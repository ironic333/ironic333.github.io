<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>zookeeper分布式锁原理</title>
    <url>/2020/05/17/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="好久不见"><a href="#好久不见" class="headerlink" title="好久不见"></a>好久不见</h2><p>学习学习学习</p>
<a id="more"></a>
<h2 id="zookeeper分布式锁原理"><a href="#zookeeper分布式锁原理" class="headerlink" title="zookeeper分布式锁原理"></a>zookeeper分布式锁原理</h2><p>看这篇吧，写得通俗易懂<br><a href="http://www.imooc.com/article/284956?block_id=tuijian_wz" target="_blank" rel="noopener">http://www.imooc.com/article/284956?block_id=tuijian_wz</a></p>
<p>GoodBye<del>~</del></p>
]]></content>
  </entry>
  <entry>
    <title>会员到期前N天提醒</title>
    <url>/2020/03/27/%E4%BC%9A%E5%91%98%E5%88%B0%E6%9C%9F%E5%89%8DN%E5%A4%A9%E6%8F%90%E9%86%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>基于redisson的rMapCache实现</p>
<a id="more"></a>
<h2 id="直接讲实例"><a href="#直接讲实例" class="headerlink" title="直接讲实例"></a>直接讲实例</h2><h3 id="设置缓存及触发时间进mapCache"><a href="#设置缓存及触发时间进mapCache" class="headerlink" title="设置缓存及触发时间进mapCache"></a>设置缓存及触发时间进mapCache</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVipService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(UserVipService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserVipMapper vipMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redisson;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//充值会员-redisson的MapCache</span></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">addVip</span>(<span class="title">UserVip</span> <span class="title">vip</span>) <span class="title">throws</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">        vip.setVipTime(DateTime.now().toDate());</span><br><span class="line">        <span class="keyword">int</span> res=vipMapper.insertSelective(vip);</span><br><span class="line">        <span class="keyword">if</span> (res&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//假设前端 vipDay=20 (20s后会员过期失效) : 第一次提醒ttl=vipDay-x ;第二次提醒ttl=vipDay</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//1、到期前n天的提醒  2、到期后的提醒</span></span><br><span class="line">            RMapCache&lt;String,Integer&gt; rMapCache=redisson.getMapCache(Constant.RedissonUserVIPKey);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>第一次提醒</span></span><br><span class="line">            String key=vip.getId()+Constant.SplitCharUserVip+Constant.VipExpireFlg.First.getType();</span><br><span class="line">            Long firstTTL=Long.valueOf(String.valueOf(vip.getVipDay()-Constant.x));</span><br><span class="line">            <span class="keyword">if</span> (firstTTL&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                rMapCache.put(key,vip.getId(),firstTTL,TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>第二次提醒</span></span><br><span class="line">            key=vip.getId()+Constant.SplitCharUserVip+Constant.VipExpireFlg.End.getType();</span><br><span class="line">            Long secondTTL=Long.valueOf(vip.getVipDay());</span><br><span class="line">            rMapCache.put(key,vip.getId(),secondTTL,TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonMapCacheUserVip</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span>,<span class="title">Ordered</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(RedissonMapCacheUserVip<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redisson;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserVipMapper vipMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailService mailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments applicationArguments)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"----不间断的执行一些自定义的操作-order 1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.listenUserVip();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听用户会员过期的数据 - 1、到期前n天的提醒  2、到期后的提醒 - 需要给相应用户发送通知(邮件)，</span></span><br><span class="line">    <span class="comment">//告知会员即将过期或者已经过期的相关信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listenUserVip</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RMapCache&lt;String,Integer&gt; rMapCache=redisson.getMapCache(Constant.RedissonUserVIPKey);</span><br><span class="line">        rMapCache.addListener(<span class="keyword">new</span> EntryExpiredListener&lt;String,Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpired</span><span class="params">(EntryEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//key=充值记录id - 类型</span></span><br><span class="line">                String key=String.valueOf(event.getKey());</span><br><span class="line">                <span class="comment">//value=充值记录id</span></span><br><span class="line">                String value=String.valueOf(event.getValue());</span><br><span class="line">                log.info(<span class="string">"--监听用户会员过期的数据，监听到数据：key=&#123;&#125;  value=&#123;&#125;"</span>,key,value);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(key) &amp;&amp; StringUtils.isNotBlank(value))&#123;</span><br><span class="line">                    String[] arr=StringUtils.split(key,Constant.SplitCharUserVip);</span><br><span class="line">                    Integer id=Integer.valueOf(value);</span><br><span class="line"></span><br><span class="line">                    UserVip vip=vipMapper.selectByPrimaryKey(id);</span><br><span class="line">                    <span class="keyword">if</span> (vip!=<span class="keyword">null</span> &amp;&amp; <span class="number">1</span>==vip.getIsActive() &amp;&amp; StringUtils.isNotBlank(vip.getEmail()))&#123;</span><br><span class="line">                        <span class="comment">//区分是第一次的提醒还是最后一次的提醒</span></span><br><span class="line">                        Integer type=Integer.valueOf(arr[<span class="number">1</span>]);</span><br><span class="line">                        <span class="keyword">if</span> (Constant.VipExpireFlg.First.getType().equals(type))&#123;</span><br><span class="line">                            String content=String.format(env.getProperty(<span class="string">"vip.expire.first.content"</span>),vip.getPhone());</span><br><span class="line">                            mailService.sendSimpleEmail(env.getProperty(<span class="string">"vip.expire.first.subject"</span>),content,vip.getEmail());</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">int</span> res=vipMapper.updateExpireVip(id);</span><br><span class="line">                            <span class="keyword">if</span> (res&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                                String content=String.format(env.getProperty(<span class="string">"vip.expire.end.content"</span>),vip.getPhone());</span><br><span class="line">                                mailService.sendSimpleEmail(env.getProperty(<span class="string">"vip.expire.end.subject"</span>),content,vip.getEmail());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>redis玩玩订阅发布</title>
    <url>/2020/03/26/redis%E7%8E%A9%E7%8E%A9%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>攻克redis冲啊，我要出神话！！！</p>
<a id="more"></a>
<h2 id="基于redis的订阅发布"><a href="#基于redis的订阅发布" class="headerlink" title="基于redis的订阅发布"></a>基于redis的订阅发布</h2>]]></content>
  </entry>
  <entry>
    <title>日志记录</title>
    <url>/2020/03/26/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要记录三种实现日志记录的方式，分别是spring的事件驱动机制applicationEvent实现、spring的aop实现、rabbitmq消息队列实现，如有纰漏，尽情谅解</p>
<a id="more"></a>
<h2 id="spring的事件驱动机制"><a href="#spring的事件驱动机制" class="headerlink" title="spring的事件驱动机制"></a>spring的事件驱动机制</h2><p>我自己感觉类似消息监听模式，具体原理请百度查看，我这里只是记录实例用法</p>
<h3 id="发送方把event发送出去"><a href="#发送方把event发送出去" class="headerlink" title="发送方把event发送出去"></a>发送方把event发送出去</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户操作-新增用户-才会产生操作日志</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BaseResponse <span class="title">addUser</span><span class="params">(@RequestBody @Validated User user, BindingResult result)</span></span>&#123;</span><br><span class="line">    String checkRes=ValidatorUtil.checkResult(result);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(checkRes))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseResponse(StatusCode.InvalidParams.getCode(),checkRes);</span><br><span class="line">    &#125;</span><br><span class="line">    BaseResponse response=<span class="keyword">new</span> BaseResponse(StatusCode.Success);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>写真正的核心业务逻辑</span></span><br><span class="line">        <span class="keyword">int</span> res=userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">if</span> (res&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>插入成功之后，我们需要记录当前用户的操作日志</span></span><br><span class="line">            LogApplicationEvent event=<span class="keyword">new</span> LogApplicationEvent(<span class="keyword">this</span>,<span class="string">"debug"</span>,<span class="string">"新增用户"</span>,<span class="string">"addUser"</span>,<span class="keyword">new</span> Gson().toJson(user));</span><br><span class="line">            publisher.publishEvent(event);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        response=<span class="keyword">new</span> BaseResponse(StatusCode.Fail.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接收方监听event并作相应处理"><a href="#接收方监听event并作相应处理" class="headerlink" title="接收方监听event并作相应处理"></a>接收方监听event并作相应处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**spring的消息驱动模型：applicationEvent applicationListener : 消息的监听器</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">LogApplicationEvent</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(LogApplicationListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听并处理消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async</span>(<span class="string">"threadPoolTaskExecutor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(LogApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"spring的消息驱动模型-监听并处理消息：&#123;&#125;"</span>,event);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                SysLog entity=<span class="keyword">new</span> SysLog(event.getUsername(),event.getOperation(),event.getMethod(),event.getParams());</span><br><span class="line">                logService.recordLog(entity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"spring的消息驱动模型-监听并处理消息 发生异常："</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AOP实现"><a href="#AOP实现" class="headerlink" title="AOP实现"></a>AOP实现</h2><h3 id="首先来创建一个注解类"><a href="#首先来创建一个注解类" class="headerlink" title="首先来创建一个注解类"></a>首先来创建一个注解类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring aop触发点-注解</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogAopAnnotation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义切点以及触发时具体操作"><a href="#定义切点以及触发时具体操作" class="headerlink" title="定义切点以及触发时具体操作"></a>定义切点以及触发时具体操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块化的东西 - 类 - 切面 - 将关注点从核心业务逻辑中分离出来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAopAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点：使用了特定注解的地方将触发通知(做日志的记录) - 切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.debug.middleware.fight.one.server.service.log.LogAopAnnotation)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知：环绕通知(前置通知+后置通知的结合)，其实就是指定的注解所在的方法 执行前 + 执行后  - 监控</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"logPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">executeAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        Long start=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        Object res=joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        Long time=System.currentTimeMillis()-start;</span><br><span class="line"></span><br><span class="line">        saveLog(joinPoint,time,res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录日志(aop - 动态代理 - 底层还是由 reflect反射来实现)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveLog</span><span class="params">(ProceedingJoinPoint point,Long time,Object res)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MethodSignature signature= (MethodSignature) point.getSignature();</span><br><span class="line">        Method method=signature.getMethod();</span><br><span class="line"></span><br><span class="line">        SysLog entity=<span class="keyword">new</span> SysLog();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取注解上用户操作描述</span></span><br><span class="line">        LogAopAnnotation annotation=method.getAnnotation(LogAopAnnotation<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (annotation!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            entity.setOperation(annotation.value());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取操作的方法名</span></span><br><span class="line">        String className=point.getTarget().getClass().getName();</span><br><span class="line">        String methodName=signature.getName();</span><br><span class="line">        entity.setMethod(<span class="keyword">new</span> StringBuilder(className).append(<span class="string">"."</span>).append(methodName).append(<span class="string">"()"</span>).toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求参数</span></span><br><span class="line">        Object[] args=point.getArgs();</span><br><span class="line">        String params=<span class="keyword">new</span> Gson().toJson(args[<span class="number">0</span>]);</span><br><span class="line">        entity.setParams(params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取剩下的参数</span></span><br><span class="line">        entity.setTime(time);</span><br><span class="line">        entity.setUsername(Constant.logOperateUser);</span><br><span class="line">        entity.setCreateDate(DateTime.now().toDate());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法的执行结果</span></span><br><span class="line">        <span class="keyword">if</span> (res!=<span class="keyword">null</span> &amp;&amp; StringUtils.isNotBlank(res.toString()))&#123;</span><br><span class="line">            entity.setMemo(<span class="keyword">new</span> Gson().toJson(res));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        logService.recordLog(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在controller中的调用"><a href="#在controller中的调用" class="headerlink" title="在controller中的调用"></a>在controller中的调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户操作-新增用户-才会产生操作日志 - spring aop</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user/add/aop"</span>)</span><br><span class="line"><span class="meta">@LogAopAnnotation</span>(<span class="string">"新增用户-spring aop"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BaseResponse <span class="title">addUserV2</span><span class="params">(@RequestBody @Validated User user, BindingResult result)</span></span>&#123;</span><br><span class="line">    String checkRes=ValidatorUtil.checkResult(result);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(checkRes))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseResponse(StatusCode.InvalidParams.getCode(),checkRes);</span><br><span class="line">    &#125;</span><br><span class="line">    BaseResponse response=<span class="keyword">new</span> BaseResponse(StatusCode.Success);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>写真正的核心业务逻辑</span></span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        response=<span class="keyword">new</span> BaseResponse(StatusCode.Fail.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rabbitMQ的方式"><a href="#rabbitMQ的方式" class="headerlink" title="rabbitMQ的方式"></a>rabbitMQ的方式</h2><h3 id="预先创建交换机、路由及其绑定-还有一些初始化template配置没有贴"><a href="#预先创建交换机、路由及其绑定-还有一些初始化template配置没有贴" class="headerlink" title="预先创建交换机、路由及其绑定,还有一些初始化template配置没有贴"></a>预先创建交换机、路由及其绑定,还有一些初始化template配置没有贴</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">logExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(env.getProperty(<span class="string">"mq.log.exchange"</span>),<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">logQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(env.getProperty(<span class="string">"mq.log.queue"</span>),<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">logBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(logQueue()).to(logExchange()).with(env.getProperty(<span class="string">"mq.log.routing.key"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户操作-新增用户-才会产生操作日志 - rabbitmq</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user/add/mq"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BaseResponse <span class="title">addUserV3</span><span class="params">(@RequestBody @Validated User user, BindingResult result)</span></span>&#123;</span><br><span class="line">    String checkRes=ValidatorUtil.checkResult(result);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(checkRes))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseResponse(StatusCode.InvalidParams.getCode(),checkRes);</span><br><span class="line">    &#125;</span><br><span class="line">    BaseResponse response=<span class="keyword">new</span> BaseResponse(StatusCode.Success);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>写真正的核心业务逻辑</span></span><br><span class="line">        <span class="keyword">int</span> res=userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">if</span> (res&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//SysLog log=new SysLog(Constant.logOperateUser,"新增用户-rabbitmq","addUserV3",objectMapper.writeValueAsString(user));</span></span><br><span class="line">            SysLog log=<span class="keyword">new</span> SysLog(Constant.logOperateUser,<span class="string">"新增用户-rabbitmq"</span>,<span class="string">"addUserV3"</span>);</span><br><span class="line">            <span class="keyword">this</span>.mqSendLog(log);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        response=<span class="keyword">new</span> BaseResponse(StatusCode.Fail.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将日志信息充当消息塞到mq server里头去（exchange+routingKey）</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mqSendLog</span><span class="params">(SysLog log)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    rabbitTemplate.setExchange(env.getProperty(<span class="string">"mq.log.exchange"</span>));</span><br><span class="line">    rabbitTemplate.setRoutingKey(env.getProperty(<span class="string">"mq.log.routing.key"</span>));</span><br><span class="line"></span><br><span class="line">    Message msg= MessageBuilder.withBody(objectMapper.writeValueAsBytes(log))</span><br><span class="line">            .setDeliveryMode(MessageDeliveryMode.PERSISTENT)</span><br><span class="line">            .build();</span><br><span class="line">    rabbitTemplate.send(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听方"><a href="#监听方" class="headerlink" title="监听方"></a>监听方</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列的监听消费者</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogMqListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(LogMqListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定要监听的队列（可以是多个）以及监听消费处理消息的模式（单一消费者实例-单一线程）</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;<span class="string">"$&#123;mq.log.queue&#125;"</span>&#125;,containerFactory = <span class="string">"singleListenerContainer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeLogMsg</span><span class="params">(@Payload <span class="keyword">byte</span>[] msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"--日志记录的监听-消费者-监听到消息--"</span>);</span><br><span class="line"></span><br><span class="line">            SysLog entity=objectMapper.readValue(msg, SysLog<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            logService.recordLog(entity);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"日志记录的监听-消费者-发生异常："</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-rLVtzuhz" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1429363572" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
  </entry>
  <entry>
    <title>无聊</title>
    <url>/2020/03/09/%E6%97%A0%E8%81%8A%E5%86%99%E5%86%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="无聊"><a href="#无聊" class="headerlink" title="无聊"></a>无聊</h2><p>疫情早点结束吧！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p>
<a id="more"></a>
<h2 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h2><p>题目：将String类型的16进制转int的10进制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等同于Integer.parseInt()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseStrToInt</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = str.charAt(len - <span class="number">1</span> - i);</span><br><span class="line">        <span class="keyword">int</span> n = Character.digit(c, <span class="number">16</span>);</span><br><span class="line">        sum += n * (<span class="number">1</span> &lt;&lt; (<span class="number">4</span> * i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>两个线程交替打印奇数和偶数</title>
    <url>/2020/02/22/%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="无聊"><a href="#无聊" class="headerlink" title="无聊"></a>无聊</h2><p>介绍多种方法实现，无聊就来看看吧，春招加油！！！！！！</p>
<a id="more"></a>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>两个线程交替打印，就是要两个线程之间进行同步，走走停停。线程的同步可以使用Object类自带的wait和notify（或者notifyAll）方法实现。<br>每个线程都是执行完一次打印之后，唤醒另外一个线程，然后自己进入等待状态。<br>需要注意的是：<br>（1）线程的启动顺序，需要先启动一个线程进入等待状态；另一个线程后启动直接执行，执行完唤醒等待线程，自己进入等待。<br>（2）线程何时退出，等打印了100之后，就不需要再等待了，而是退出。<br>wait和notify的相同点：<br>都是Object类提供的native方法。<br>都必须要在 同步方法或同步块synchronized中 调用。<br>被调用时，当前线程必须拥有该对象的锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> runNow;</span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrintNum</span><span class="params">(<span class="keyword">boolean</span> runNow, Object lock, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runNow = runNow;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="keyword">while</span> (num &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (runNow)&#123;</span><br><span class="line">                    runNow = <span class="keyword">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">"\t"</span> + num);</span><br><span class="line">                num += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> PrintNum(<span class="keyword">true</span>,lock,<span class="number">1</span>));</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> PrintNum(<span class="keyword">false</span>,lock,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="信号量Semaphore（推荐使用）"><a href="#信号量Semaphore（推荐使用）" class="headerlink" title="信号量Semaphore（推荐使用）"></a>信号量Semaphore（推荐使用）</h2><p>资源互斥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintNum2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> Semaphore odd = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> Semaphore even = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrintNum2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printOdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                odd.acquire();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + i);</span><br><span class="line">            even.release();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEven</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                even.acquire();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + i);</span><br><span class="line">            odd.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PrintNum2 printNum2 = <span class="keyword">new</span> PrintNum2(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            printNum2.printOdd();</span><br><span class="line">        &#125;,<span class="string">"线程1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            printNum2.printEven();</span><br><span class="line">        &#125;,<span class="string">"线程2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方式三（看看就好）"><a href="#方式三（看看就好）" class="headerlink" title="方式三（看看就好）"></a>方式三（看看就好）</h2><p>这个CountDownLatch用的感觉很强行，没必要<br>直接上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPrintData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Integer i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOTAL = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt;= TOTAL) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(i&lt;=TOTAL)&#123;</span><br><span class="line">                                System.out.println(Thread.currentThread().getName() + <span class="string">"打印：   "</span> + i++);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            lock.notifyAll();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span>(i &lt; TOTAL)&#123;</span><br><span class="line">                                    lock.wait();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread1.setName(<span class="string">"奇数线程"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt;= TOTAL) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName()+ <span class="string">"打印：  "</span> + i++);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            lock.notifyAll();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span>(i &lt; TOTAL)&#123;</span><br><span class="line">                                    lock.wait();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread2.setName(<span class="string">"偶数线程"</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        latch.await();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"共耗时:"</span>+(end-start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-HODxqmRH" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1402414941" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
  </entry>
  <entry>
    <title>shiro集成小实战</title>
    <url>/2020/02/12/shiro%E9%9B%86%E6%88%90%E5%B0%8F%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="后天情人节哦"><a href="#后天情人节哦" class="headerlink" title="后天情人节哦"></a>后天情人节哦</h2><p>是springboot-1.5.7版本集成Shiro，讲了一些基本的流程步骤，来看看吧</p>
<a id="more"></a>
<h2 id="首先是导pom包啦"><a href="#首先是导pom包啦" class="headerlink" title="首先是导pom包啦"></a>首先是导pom包啦</h2><p>版本是1.2.6哟</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--shiro权限控制--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="理清流程"><a href="#理清流程" class="headerlink" title="理清流程"></a>理清流程</h2><p><img src="/images/shizhan/1581476134(1).jpg" alt="示例图"></p>
<h3 id="封装UserName和Password"><a href="#封装UserName和Password" class="headerlink" title="封装UserName和Password"></a>封装UserName和Password</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 登录认证</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> modelMap</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>,method = RequestMethod.POST)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam String userName, @RequestParam String password, ModelMap modelMap)</span></span>&#123;</span><br><span class="line">      String errorMsg=<span class="string">""</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!SecurityUtils.getSubject().isAuthenticated())&#123;</span><br><span class="line">              String newPsd=<span class="keyword">new</span> Md5Hash(password,env.getProperty(<span class="string">"shiro.encrypt.password.salt"</span>)).toString();</span><br><span class="line">              UsernamePasswordToken token=<span class="keyword">new</span> UsernamePasswordToken(userName,newPsd);</span><br><span class="line">              SecurityUtils.getSubject().login(token);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (UnknownAccountException e)&#123;</span><br><span class="line">          errorMsg=e.getMessage();</span><br><span class="line">          modelMap.addAttribute(<span class="string">"userName"</span>,userName);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (DisabledAccountException e)&#123;</span><br><span class="line">          errorMsg=e.getMessage();</span><br><span class="line">          modelMap.addAttribute(<span class="string">"userName"</span>,userName);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">          errorMsg=e.getMessage();</span><br><span class="line">          modelMap.addAttribute(<span class="string">"userName"</span>,userName);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">          errorMsg=<span class="string">"用户登录异常，请联系管理员!"</span>;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.isBlank(errorMsg))&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"redirect:/index"</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          modelMap.addAttribute(<span class="string">"errorMsg"</span>,errorMsg);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>注意点：登录前要判断是否已经授权登录了，防止重复登录</p>
<h3 id="配置shiroConfig和实现realm逻辑"><a href="#配置shiroConfig和实现realm逻辑" class="headerlink" title="配置shiroConfig和实现realm逻辑"></a>配置shiroConfig和实现realm逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户自定义的realm-用于shiro的认证、授权</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(CustomRealm<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long sessionKeyTimeOut=<span class="number">3600_000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证-登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken token= (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String userName=token.getUsername();</span><br><span class="line">        String password=String.valueOf(token.getPassword());</span><br><span class="line">        log.info(<span class="string">"当前登录的用户名=&#123;&#125; 密码=&#123;&#125; "</span>,userName,password);</span><br><span class="line"></span><br><span class="line">        User user=userMapper.selectByUserName(userName);</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户名不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(<span class="number">1</span>,user.getIsActive().intValue()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledAccountException(<span class="string">"当前用户已被禁用!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!user.getPassword().equals(password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(<span class="string">"用户名密码不匹配!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SimpleAuthenticationInfo info=<span class="keyword">new</span> SimpleAuthenticationInfo(user.getUserName(),password,getName());</span><br><span class="line">        setSession(<span class="string">"uid"</span>,user.getId());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将key与对应的value塞入shiro的session中-最终交给HttpSession进行管理(如果是分布式session配置，那么就是交给redis管理)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSession</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        Session session=SecurityUtils.getSubject().getSession();</span><br><span class="line">        <span class="keyword">if</span> (session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            session.setAttribute(key,value);</span><br><span class="line">            session.setTimeout(sessionKeyTimeOut);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shiro的通用化配置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CustomRealm realm=<span class="keyword">new</span> CustomRealm();</span><br><span class="line">        <span class="keyword">return</span> realm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager=<span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(customRealm());</span><br><span class="line">        securityManager.setRememberMeManager(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean=<span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(securityManager());</span><br><span class="line">        bean.setLoginUrl(<span class="string">"/to/login"</span>);</span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/unauth"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/to/login"</span>,<span class="string">"anon"</span>);</span><br><span class="line"></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/kill/execute"</span>,<span class="string">"authc"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/item/detail/*"</span>,<span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-dtnmJDAA" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="85343659" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div> ]]></content>
      <tags>
        <tag>-Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitMQ的一次实战</title>
    <url>/2020/02/09/%E8%AE%B0%E5%BD%95rabbitMQ%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="无聊的每一天"><a href="#无聊的每一天" class="headerlink" title="无聊的每一天"></a>无聊的每一天</h2><p>撸码，学习，游戏，吃饭，睡觉。。。。。</p>
<a id="more"></a>
<h2 id="rabbitMQ死信队列"><a href="#rabbitMQ死信队列" class="headerlink" title="rabbitMQ死信队列"></a>rabbitMQ死信队列</h2><p>通过死信队列失效超时未支付的订单<br>如图所示<br><img src="/images/shizhan/1581258280.jpg" alt="示例图"></p>
<h3 id="首先创建死信队列消息模型"><a href="#首先创建死信队列消息模型" class="headerlink" title="首先创建死信队列消息模型"></a>首先创建死信队列消息模型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//订单超时未支付的死信队列消息模型</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Queue <span class="title">successKillDeadQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Map&lt;String, Object&gt; argsMap= Maps.newHashMap();</span><br><span class="line">       argsMap.put(<span class="string">"x-dead-letter-exchange"</span>,env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.exchange"</span>));</span><br><span class="line">       argsMap.put(<span class="string">"x-dead-letter-routing-key"</span>,env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.routing.key"</span>));</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Queue(env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.queue"</span>),<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,argsMap);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//基本交换机</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">successKillDeadProdExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.prod.exchange"</span>),<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建基本交换机+基本路由 -&gt; 死信队列 的绑定</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Binding <span class="title">successKillDeadProdBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> BindingBuilder.bind(successKillDeadQueue()).to(successKillDeadProdExchange()).with(env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.prod.routing.key"</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建真正的队列模型"><a href="#创建真正的队列模型" class="headerlink" title="创建真正的队列模型"></a>创建真正的队列模型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真正的队列</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Queue <span class="title">successKillRealQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Queue(env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.real.queue"</span>),<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//死信交换机</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">successKillDeadExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.exchange"</span>),<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//死信交换机+死信路由-&gt;真正队列 的绑定</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Binding <span class="title">successKillDeadBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> BindingBuilder.bind(successKillRealQueue()).to(successKillDeadExchange()).with(env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.routing.key"</span>));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何去使用？"><a href="#如何去使用？" class="headerlink" title="如何去使用？"></a>如何去使用？</h2><h3 id="发送者"><a href="#发送者" class="headerlink" title="发送者"></a>发送者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 秒杀成功后生成抢购订单-发送信息入死信队列，等待着一定时间失效超时未支付的订单</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> orderCode</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendKillSuccessOrderExpireMsg</span><span class="params">(<span class="keyword">final</span> String orderCode)</span></span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (StringUtils.isNotBlank(orderCode))&#123;</span><br><span class="line">             KillSuccessUserInfo info=itemKillSuccessMapper.selectByCode(orderCode);</span><br><span class="line">             <span class="keyword">if</span> (info!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                 rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">                 rabbitTemplate.setExchange(env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.prod.exchange"</span>));</span><br><span class="line">                 rabbitTemplate.setRoutingKey(env.getProperty(<span class="string">"mq.kill.item.success.kill.dead.prod.routing.key"</span>));</span><br><span class="line">                 rabbitTemplate.convertAndSend(info, <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                         MessageProperties mp=message.getMessageProperties();</span><br><span class="line">                         mp.setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">                         mp.setHeader(AbstractJavaTypeMapper.DEFAULT_CONTENT_CLASSID_FIELD_NAME,KillSuccessUserInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">                         <span class="comment">//TODO：动态设置TTL(为了测试方便，暂且设置10s)</span></span><br><span class="line">                         mp.setExpiration(env.getProperty(<span class="string">"mq.kill.item.success.kill.expire"</span>));</span><br><span class="line">                         <span class="keyword">return</span> message;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">         log.error(<span class="string">"秒杀成功后生成抢购订单-发送信息入死信队列，等待着一定时间失效超时未支付的订单-发生异常，消息为：&#123;&#125;"</span>,orderCode,e.fillInStackTrace());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听者"><a href="#监听者" class="headerlink" title="监听者"></a>监听者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户秒杀成功后超时未支付-监听者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> info</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = &#123;<span class="string">"$&#123;mq.kill.item.success.kill.dead.real.queue&#125;"</span>&#125;,containerFactory = <span class="string">"singleListenerContainer"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeExpireOrder</span><span class="params">(KillSuccessUserInfo info)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">"用户秒杀成功后超时未支付-监听者-接收消息:&#123;&#125;"</span>,info);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (info!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            ItemKillSuccess entity=itemKillSuccessMapper.selectByPrimaryKey(info.getCode());</span><br><span class="line">            <span class="keyword">if</span> (entity!=<span class="keyword">null</span> &amp;&amp; entity.getStatus().intValue()==<span class="number">0</span>)&#123;</span><br><span class="line">                itemKillSuccessMapper.expireOrder(info.getCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.error(<span class="string">"用户秒杀成功后超时未支付-监听者-发生异常："</span>,e.fillInStackTrace());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中监听者expireOrder是实现的如下方法,将订单状态设为失效状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;!--失效更新订单信息--&gt;</span><br><span class="line">&lt;update id="expireOrder"&gt;</span><br><span class="line">  <span class="keyword">UPDATE</span> item_kill_success</span><br><span class="line">  <span class="keyword">SET</span> <span class="keyword">status</span> = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">WHERE</span> code = <span class="comment">#&#123;code&#125; AND status = 0</span></span><br><span class="line">&lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.创建死信队列<br>2.创建基本交换机<br>3.创建基本路由绑定1和2</p>
<p>4.创建真正的队列<br>5.创建死信交换机<br>6.创建死信路由绑定4和5</p>
<p>7.发送方是设置基本交换机和基本路由<br>8.监听方是监听真正队列</p>

    <div id="aplayer-dVxKROvR" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1421191783" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>blog转移大法</title>
    <url>/2020/02/03/blog%E8%BD%AC%E7%A7%BB%E5%A4%A7%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h2><p>2020蜜汁开端，希望一切慢慢好起来吧</p>
<a id="more"></a>
<h2 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h2><p>安装Node和Git环境。Windows环境下均有相关的exe可执行文件，两者的环境搭配均比较容易，特别的Node安装时自带有npm,可以方便执行后续的hexo安装。Hexo主要执行命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init &lt;your_blog_name&gt; # your_blog_name 可以缺省,在博客文件夹内执行相关命令</span><br><span class="line">$ npm install</span><br><span class="line">3.新建SSH Key</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;GitHub邮箱名&quot;</span><br></pre></td></tr></table></figure>

<p>之后会出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/jacky/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>

<p>直接回车就可以。<br>然后会出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure>

<p>要求你输入密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br>然后会出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/jacky/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/jacky/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">65:58:······02:4b emailname@email.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|       .   o .   |</span><br><span class="line">|    . o o = o    |</span><br><span class="line">|   . o * = o     |</span><br><span class="line">|  E  o + o .     |</span><br><span class="line">| . o.   . .      |</span><br><span class="line">|     ..          |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>

<p>至此，密钥已在本地成功生成。</p>
<h2 id="拷贝相关文件"><a href="#拷贝相关文件" class="headerlink" title="拷贝相关文件"></a>拷贝相关文件</h2><p>建立hexo博客都会有一个独立的文件夹。电脑转移时安全的做法是将整个文件夹拷贝<br>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_config.yml、theme、source、scaffolds、package.json、.gitignore应该进行拷贝，.git/，node_modules/，public/，.deploy_git/，db.json文件需要删除</span><br></pre></td></tr></table></figure>

<h2 id="添加SSH-Key"><a href="#添加SSH-Key" class="headerlink" title="添加SSH Key"></a>添加SSH Key</h2><p>打开本地文件：id_rsa.pub（文件路径可以在上一步SSH生成成功后看到路径，具体在’Your public key has been saved in’后面），可以将这个文件在编辑器中打开，然后全选复制<br>登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys,点击新建SSH Key<br>将复制的内容全部粘贴在Key文本框内，title填不填均可</p>
<p>测试设置是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>有可能会出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (192.156.***.19)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 36:27:ac:a5:76:28:2d:45:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>

<p>或者是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (192.156.***.19)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is nThbg***********************8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>

<p>这种情况下，直接 yes 回车。<br>然后会出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>至此，设置成功。</p>
<h2 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;用户名&quot;</span><br><span class="line">$ git config --global user.email  &quot;你希望的邮箱名&quot;</span><br></pre></td></tr></table></figure>

<h2 id="正常Hexo命令操作"><a href="#正常Hexo命令操作" class="headerlink" title="正常Hexo命令操作"></a>正常Hexo命令操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo s # http://localhost:4000/预览</span><br><span class="line">$ hexo g # 编译</span><br><span class="line">$ hexo d # 发布</span><br></pre></td></tr></table></figure>

<h2 id="引用参考"><a href="#引用参考" class="headerlink" title="引用参考"></a>引用参考</h2><p><a href="https://blog.csdn.net/xr469786706/article/details/79837602" target="_blank" rel="noopener">https://blog.csdn.net/xr469786706/article/details/79837602</a><br><a href="https://www.cnblogs.com/xsilence/p/6001938.html" target="_blank" rel="noopener">https://www.cnblogs.com/xsilence/p/6001938.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/2020/01/11/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="I-am-Back"><a href="#I-am-Back" class="headerlink" title="I am Back"></a>I am Back</h2><p>好久不见，十分想念，今天来水一篇分布式锁的应用，最近在看秒杀的相关东西。</p>
<a id="more"></a>
<h2 id="借助redis的原子操作实现分布式锁"><a href="#借助redis的原子操作实现分布式锁" class="headerlink" title="借助redis的原子操作实现分布式锁"></a>借助redis的原子操作实现分布式锁</h2><p>SETNX和EXPIRE配合使用<br>缺点：redis部署节点宕机了怎么办</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Boolean <span class="title">killItemV3</span><span class="params">(Integer killId, Integer userId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     </span><br><span class="line">           ValueOperations valueOperations=stringRedisTemplate.opsForValue();</span><br><span class="line">           <span class="keyword">final</span> String key=<span class="keyword">new</span> StringBuffer().append(killId).append(userId).append(<span class="string">"-RedisLock"</span>).toString();</span><br><span class="line">           <span class="keyword">final</span> String value=RandomUtil.generateOrderCode();</span><br><span class="line">           Boolean cacheRes=valueOperations.setIfAbsent(key,value); <span class="comment">//lua脚本提供“分布式锁服务”，就可以写在一起</span></span><br><span class="line">           <span class="keyword">if</span> (cacheRes)&#123;</span><br><span class="line">               stringRedisTemplate.expire(key,<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">         ｝</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="redisson的分布式锁"><a href="#redisson的分布式锁" class="headerlink" title="redisson的分布式锁"></a>redisson的分布式锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Boolean <span class="title">killItemV4</span><span class="params">(Integer killId, Integer userId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     Boolean result=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">final</span> String lockKey=<span class="keyword">new</span> StringBuffer().append(killId).append(userId).append(<span class="string">"-RedissonLock"</span>).toString();</span><br><span class="line">     RLock lock=redissonClient.getLock(lockKey);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//<span class="doctag">TODO:</span>第一个参数30s=表示尝试获取分布式锁，并且最大的等待获取锁的时间为30s</span></span><br><span class="line">         <span class="comment">//<span class="doctag">TODO:</span>第二个参数10s=表示上锁之后，10s内操作完毕将自动释放锁</span></span><br><span class="line">         Boolean cacheRes=lock.tryLock(<span class="number">30</span>,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line">         <span class="keyword">if</span> (cacheRes)&#123;</span><br><span class="line">             <span class="comment">//<span class="doctag">TODO:</span>核心业务逻辑的处理</span></span><br><span class="line">           result = <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">//<span class="doctag">TODO:</span>释放锁</span></span><br><span class="line">         lock.unlock();</span><br><span class="line">         <span class="comment">//lock.forceUnlock();</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于ZooKeeper的分布式锁"><a href="#基于ZooKeeper的分布式锁" class="headerlink" title="基于ZooKeeper的分布式锁"></a>基于ZooKeeper的分布式锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> CuratorFramework curatorFramework;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String pathPrefix=<span class="string">"/kill/zkLock/"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">killItemV5</span><span class="params">(Integer killId, Integer userId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Boolean result=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">      InterProcessMutex mutex=<span class="keyword">new</span> InterProcessMutex(curatorFramework,pathPrefix+killId+userId+<span class="string">"-lock"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (mutex.acquire(<span class="number">10L</span>,TimeUnit.SECONDS))&#123;</span><br><span class="line"></span><br><span class="line">              <span class="comment">//<span class="doctag">TODO:</span>核心业务逻辑</span></span><br><span class="line">            </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"还没到抢购日期、已过了抢购时间或已被抢购完毕！"</span>);</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (mutex!=<span class="keyword">null</span>)&#123;</span><br><span class="line">              mutex.release();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>TODO：后续更新</p>
]]></content>
      <tags>
        <tag>-分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>声明</title>
    <url>/2019/12/25/shengming/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="停更几天啦"><a href="#停更几天啦" class="headerlink" title="停更几天啦"></a>停更几天啦</h2><p>期末最后一科考试，31号过了之后再恢复更博，每日算法练习也暂停啦</p>
]]></content>
  </entry>
  <entry>
    <title>每日算法题（9）</title>
    <url>/2019/12/16/leetcodeDay9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="I-Can"><a href="#I-Can" class="headerlink" title="I Can"></a>I Can</h2><p>给我一个机会证明自己！！！！！！！！</p>
<a id="more"></a>
<h2 id="全排列（中等）"><a href="#全排列（中等）" class="headerlink" title="全排列（中等）"></a>全排列（中等）</h2><p><img src="/images/leetcode/1576499300(1).jpg" alt="示例图"><br>回溯法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        backtrack(res, nums, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), visited);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span>[] nums, ArrayList&lt;Integer&gt; tmp, <span class="keyword">int</span>[] visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.size() == nums.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            visited[i] = <span class="number">1</span>;</span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            backtrack(res, nums, tmp, visited);</span><br><span class="line">            visited[i] = <span class="number">0</span>;</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LRU缓存机制（中等）"><a href="#LRU缓存机制（中等）" class="headerlink" title="LRU缓存机制（中等）"></a>LRU缓存机制（中等）</h2><p><img src="/images/leetcode/1576501779(1).jpg" alt="示例图"><br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(capacity, <span class="number">0.75F</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LRUCache 对象会以如下语句构造和调用:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="LFU缓存机制（困难）"><a href="#LFU缓存机制（困难）" class="headerlink" title="LFU缓存机制（困难）"></a>LFU缓存机制（困难）</h2><p><img src="/images/leetcode/1582613858(1).jpg" alt="示例图"><br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, Node&gt; cache;  <span class="comment">// 存储缓存的内容</span></span><br><span class="line">    Map&lt;Integer, LinkedHashSet&lt;Node&gt;&gt; freqMap; <span class="comment">// 存储每个频次对应的双向链表</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> min; <span class="comment">// 存储当前最小频次</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        cache = <span class="keyword">new</span> HashMap&lt;&gt; (capacity);</span><br><span class="line">        freqMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        Node node = cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        freqInc(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node node = cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            freqInc(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">                Node deadNode = removeNode();</span><br><span class="line">                cache.remove(deadNode.key);</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(key, value);</span><br><span class="line">            cache.put(key, newNode);</span><br><span class="line">            addNode(newNode);</span><br><span class="line">            size++;     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">freqInc</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从原freq对应的链表里移除, 并更新min</span></span><br><span class="line">        <span class="keyword">int</span> freq = node.freq;</span><br><span class="line">        LinkedHashSet&lt;Node&gt; set = freqMap.get(freq);</span><br><span class="line">        set.remove(node);</span><br><span class="line">        <span class="keyword">if</span> (freq == min &amp;&amp; set.size() == <span class="number">0</span>) &#123; </span><br><span class="line">            min = freq + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加入新freq对应的链表</span></span><br><span class="line">        node.freq++;</span><br><span class="line">        LinkedHashSet&lt;Node&gt; newSet = freqMap.get(freq + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newSet == <span class="keyword">null</span>) &#123;</span><br><span class="line">            newSet = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">            freqMap.put(freq + <span class="number">1</span>, newSet);</span><br><span class="line">        &#125;</span><br><span class="line">        newSet.add(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        LinkedHashSet&lt;Node&gt; set = freqMap.get(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (set == <span class="keyword">null</span>) &#123;</span><br><span class="line">            set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">            freqMap.put(<span class="number">1</span>, set);</span><br><span class="line">        &#125; </span><br><span class="line">        set.add(node); </span><br><span class="line">        min = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">removeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedHashSet&lt;Node&gt; set = freqMap.get(min);</span><br><span class="line">        Node deadNode = set.iterator().next();</span><br><span class="line">        set.remove(deadNode);</span><br><span class="line">        <span class="keyword">return</span> deadNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> freq = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-wRhLpJyf" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="407039047" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里短信</title>
    <url>/2019/12/16/%E9%98%BF%E9%87%8C%E7%9F%AD%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1、开通阿里云"><a href="#1、开通阿里云" class="headerlink" title="1、开通阿里云"></a>1、开通阿里云</h1><a id="more"></a>
<h2 id="1-1-注册登录"><a href="#1-1-注册登录" class="headerlink" title="1.1 注册登录"></a>1.1 注册登录</h2><p>访问阿里云主页：<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a></p>
<p><img src="/images/alimessage/1525099489244.png" alt="1525099489244"></p>
<p>注册：</p>
<p> <img src="/images/alimessage/1525099519158.png" alt="1525099519158"></p>
<p>登录：</p>
<p> <img src="/images/alimessage/1525099544901.png" alt="1525099544901"></p>
<p>进入云通信：</p>
<p> <img src="/images/alimessage/1525099619351.png" alt="1525099619351"></p>
<p>进入短信服务控制台：</p>
<p><img src="/images/alimessage/1525099688034.png" alt="1525099688034"></p>
<p>选择：已阅读协议，然后立即开通</p>
<p><img src="/images/alimessage/1525099750189.png" alt="1525099750189"></p>
<p>然后在控制台，即可查看新手帮助：</p>
<p><img src="/images/alimessage/1525099958699.png" alt="1525099958699"></p>
<h2 id="1-2-完整流程"><a href="#1-2-完整流程" class="headerlink" title="1.2 完整流程"></a>1.2 完整流程</h2><p>查看新手帮助的完整流程：</p>
<p><img src="/images/alimessage/1525100090994.png" alt="1525100090994"></p>
<p>申请短信服务我们已经完成，下一步就是创建应用：</p>
<h2 id="1-3-创建AccessKey"><a href="#1-3-创建AccessKey" class="headerlink" title="1.3 创建AccessKey"></a>1.3 创建AccessKey</h2><p>首先，生成AccessKey：</p>
<p> <img src="/images/alimessage/1525100180610.png" alt="1525100180610"></p>
<p>点击后，进入新的帮助页面：</p>
<p> <img src="/images/alimessage/1525100410301.png" alt="1525100410301"></p>
<p>操作步骤：</p>
<ul>
<li><p>登录<a href="https://ram.console.aliyun.com/" target="_blank" rel="noopener">RAM管理控制台</a>。</p>
<p><img src="/images/alimessage/1525100498042.png" alt="1525100498042"></p>
</li>
<li><p>在左侧导航栏，单击<strong>用户管理</strong>。</p>
<p><img src="/images/alimessage/1525100568259.png" alt="1525100568259"></p>
<p>然后点击新建用户：</p>
<p> <img src="/images/alimessage/1525100637854.png" alt="1525100637854"></p>
</li>
<li><p>填写信息，点击确定：</p>
<p> <img src="/images/alimessage/1525100674068.png" alt="1525100674068"></p>
</li>
<li><p>在验证手机成功：</p>
<p> <img src="/images/alimessage/1525100725841.png" alt="1525100725841"></p>
</li>
<li><p>在弹出的对话框中，展开<strong>AccessKey详情</strong>查看查看AcessKeyId和AccessKeySecret。然后单击<strong>保存AK信息</strong>，下载AccessKey信息。</p>
<p> <img src="/images/alimessage/1525100875246.png" alt="1525100875246"></p>
</li>
</ul>
<h2 id="1-4-给用户授权"><a href="#1-4-给用户授权" class="headerlink" title="1.4 给用户授权"></a>1.4 给用户授权</h2><p>点击右侧的用户授权：</p>
<p><img src="/images/alimessage/1525159418027.png" alt="1525159418027"></p>
<p>然后添加短信授权：</p>
<p><img src="/images/alimessage/1525159513967.png" alt="1525159513967"></p>
<h2 id="1-5-创建短信签名"><a href="#1-5-创建短信签名" class="headerlink" title="1.5 创建短信签名"></a>1.5 创建短信签名</h2><p>短信签名就是短信内容头部的标签，标注短信发送者的身份。</p>
<p>点击管理界面的签名管理：</p>
<p><img src="/images/alimessage/1525101109813.png" alt="1525101109813"></p>
<p>点击添加签名：</p>
<p> <img src="/images/alimessage/1525101145061.png" alt="1525101145061"></p>
<p>填写信息后点击确定，进入审核状态：</p>
<p><img src="/images/alimessage/1525101273063.png" alt="1525101273063"></p>
<h2 id="1-6-申请模板"><a href="#1-6-申请模板" class="headerlink" title="1.6 申请模板"></a>1.6 申请模板</h2><p>在右侧点击模板管理：然后添加模板</p>
<p><img src="/images/alimessage/1525101415968.png" alt="1525101415968"></p>
<p>填写模板信息：</p>
<p><img src="/images/alimessage/1532790071668.png" alt="1532790071668"></p>
<p>进入审核状态：</p>
<p><img src="/images/alimessage/1525101663353.png" alt="1525101663353"></p>
<h1 id="2、java客户端"><a href="#2、java客户端" class="headerlink" title="2、java客户端"></a>2、java客户端</h1><p>我们通过官网提供的帮助来完成java客户端学习：</p>
<p><img src="/images/alimessage/1532790118302.png" alt="1532790118302"></p>
<h2 id="2-1-下载SDK工具包"><a href="#2-1-下载SDK工具包" class="headerlink" title="2.1.下载SDK工具包"></a>2.1.下载SDK工具包</h2><p><img src="/images/alimessage/1527232030334.png" alt="1527232030334"></p>
<p>下载完成后得到压缩包：</p>
<p><img src="/images/alimessage/1532941087871.png" alt="1532941087871"></p>
<p>解压后目录结构：</p>
<p><img src="/images/alimessage/1532941225594.png" alt="1532941225594"> </p>
<p>它这里提供的案例代码比较老，jdk版本也比较低。</p>
<h2 id="2-2-安装SDK"><a href="#2-2-安装SDK" class="headerlink" title="2.2.安装SDK"></a>2.2.安装SDK</h2><p>我们需要把api_SDK中的两个依赖装入本地maven中，进入api_sdk目录，有两个项目需要处理：</p>
<p><img src="/images/alimessage/1532941276340.png" alt="1532941276340"></p>
<p>然后进入到项目根目录：</p>
<p><img src="/images/alimessage/1532941356724.png" alt="1532941356724"></p>
<p>打开cmd命令行，输入命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn install <span class="literal">-Dmaven</span>.test.skip=true <span class="literal">-Dgpg</span>.skip=true</span><br></pre></td></tr></table></figure>

<p>然后进入另一个项目，上面的操作执行一遍</p>
<h2 id="2-3-demo"><a href="#2-3-demo" class="headerlink" title="2.3.demo"></a>2.3.demo</h2><p>建议大家直接使用课前资料提供的demo工程：</p>
<p><img src="/images/alimessage/1532942155738.png" alt="1532942155738"></p>
<p>导入到idea中：</p>
<p> <img src="/images/alimessage/1527235082318.png" alt="1527235082318"></p>
<h3 id="2-3-1-填写AccessKey"><a href="#2-3-1-填写AccessKey" class="headerlink" title="2.3.1.填写AccessKey"></a>2.3.1.填写AccessKey</h3><p> <img src="/images/alimessage/1527235189991.png" alt="1527235189991"></p>
<p>这里要填写刚刚申请的AccessKey的id和secret</p>
<h3 id="2-3-2-填写电话及短信模板"><a href="#2-3-2-填写电话及短信模板" class="headerlink" title="2.3.2.填写电话及短信模板"></a>2.3.2.填写电话及短信模板</h3><p> <img src="/images/alimessage/1527235312969.png" alt="1527235312969"></p>
<p>这里要修改3个地方：</p>
<ul>
<li>phoneNumber：发送的目标手机</li>
<li>signName：签名名称，这个去控制台查看</li>
<li>templateCode：模板id，也去控制台查看</li>
</ul>
<p>运行main函数测试：</p>
<p> <img src="/images/alimessage/1527236340771.png" alt="1527236340771"></p>
<p>短信发送成功了：</p>
<p><img src="/images/alimessage/1527236388702.png" alt="1527236388702"></p>
<p>效果：</p>
<p> <img src="/images/alimessage/1527236647275.png" alt="1527236647275"></p>
]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>redis安装和配置</title>
    <url>/2019/12/16/redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="redis安装和配置"><a href="#redis安装和配置" class="headerlink" title="redis安装和配置"></a>redis安装和配置</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><ul>
<li>下载安装包<br>课前资料提供的安装包，或者:<a href="https://redis.io/download" target="_blank" rel="noopener">官网下载</a><br>建议上传到我们的home下：/usr/local/leyou</li>
</ul>
<a id="more"></a>
<ul>
<li><p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf redis-4.0.9.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv redis-4.0.9 redis</span><br><span class="line">cd redis</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><p>修改安装目录下的redis.conf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure>

<p>修改以下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1 <span class="comment"># 将这行代码注释，监听所有的ip地址，外网可以访问</span></span></span><br><span class="line">protected-mode no # 把yes改成no，允许外网访问</span><br><span class="line">daemonize yes # 把no改成yes，后台运行</span><br></pre></td></tr></table></figure>

<h2 id="3-启动或停止"><a href="#3-启动或停止" class="headerlink" title="3.启动或停止"></a>3.启动或停止</h2><p>redis提供了服务端命令和客户端命令：</p>
<ul>
<li>redis-server 服务端命令，可以包含以下参数：<br>start 启动<br>stop 停止</li>
<li>redis-cli 客户端控制台，包含参数：<br>-h xxx 指定服务端地址，缺省值是127.0.0.1<br>-p xxx 指定服务端端口，缺省值是6379</li>
</ul>
<h2 id="4-设置开机启动"><a href="#4-设置开机启动" class="headerlink" title="4.设置开机启动"></a>4.设置开机启动</h2><p>1) 输入命令，新建文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/init.d/redis</span><br></pre></td></tr></table></figure>

<p>输入下面内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig:   2345 90 10</span></span><br><span class="line"><span class="comment"># description:  Redis is a persistent key-value database</span></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/bin:/sbin:/usr/bin:/bin</span><br><span class="line"></span><br><span class="line">REDISPORT=6379</span><br><span class="line">EXEC=/usr/<span class="built_in">local</span>/bin/redis-server</span><br><span class="line">REDIS_CLI=/usr/<span class="built_in">local</span>/bin/redis-cli</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis.pid</span><br><span class="line"></span><br><span class="line">CONF=<span class="string">"/usr/local/leyou/redis/redis.conf"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>  </span><br><span class="line">    start)  </span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]  </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span>  </span><br><span class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ]   </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">"Redis is running..."</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        ;;  </span><br><span class="line">    stop)  </span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]  </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span>  </span><br><span class="line">                <span class="variable">$REDIS_CLI</span> -p <span class="variable">$REDISPORT</span> SHUTDOWN  </span><br><span class="line">                <span class="keyword">while</span> [ -x <span class="variable">$&#123;PIDFILE&#125;</span> ]  </span><br><span class="line">               <span class="keyword">do</span>  </span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span>  </span><br><span class="line">                    sleep 1  </span><br><span class="line">                <span class="keyword">done</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        ;;  </span><br><span class="line">   restart|force-reload)  </span><br><span class="line">        <span class="variable">$&#123;0&#125;</span> stop  </span><br><span class="line">        <span class="variable">$&#123;0&#125;</span> start  </span><br><span class="line">        ;;  </span><br><span class="line">  *)  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2  </span><br><span class="line">        <span class="built_in">exit</span> 1  </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>然后保存退出</p>
<p>注意：以下信息需要根据安装目录进行调整：</p>
<blockquote>
<p>EXEC=/usr/local/bin/redis-server # 执行脚本的地址</p>
<p>REDIS_CLI=/usr/local/bin/redis-cli # 客户端执行脚本的地址</p>
<p>PIDFILE=/var/run/redis.pid # 进程id文件地址</p>
<p>CONF=”/usr/local/src/redis-3.0.2/redis.conf” #配置文件地址</p>
</blockquote>
<p>2）设置权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod 755 /etc/init.d/redis</span><br></pre></td></tr></table></figure>

<p>3）启动测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/init.d/redis start</span><br></pre></td></tr></table></figure>

<p>启动成功会提示如下信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Redis server...</span><br><span class="line">Redis is running...</span><br></pre></td></tr></table></figure>

<p>4）设置开机自启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chkconfig --add /etc/init.d/redis</span><br><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitMQ与数据同步</title>
    <url>/2019/12/16/day15-rabbitmq%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>了解常见的MQ产品</li>
<li>了解RabbitMQ的5种消息模型</li>
<li>会使用Spring AMQP</li>
<li>利用MQ实现搜索和静态页的数据同步</li>
</ul>
<a id="more"></a>
<h1 id="1-RabbitMQ"><a href="#1-RabbitMQ" class="headerlink" title="1.RabbitMQ"></a>1.RabbitMQ</h1><h2 id="1-1-搜索与商品服务的问题"><a href="#1-1-搜索与商品服务的问题" class="headerlink" title="1.1.搜索与商品服务的问题"></a>1.1.搜索与商品服务的问题</h2><p>目前我们已经完成了商品详情和搜索系统的开发。我们思考一下，是否存在问题？</p>
<ul>
<li>商品的原始数据保存在数据库中，增删改查都在数据库中完成。</li>
<li>搜索服务数据来源是索引库，如果数据库商品发生变化，索引库数据不能及时更新。</li>
<li>商品详情做了页面静态化，静态页面数据也不会随着数据库商品发生变化。</li>
</ul>
<p>如果我们在后台修改了商品的价格，搜索页面和商品详情页显示的依然是旧的价格，这样显然不对。该如何解决？</p>
<p>这里有两种解决方案：</p>
<ul>
<li>方案1：每当后台对商品做增删改操作，同时要修改索引库数据及静态页面</li>
<li>方案2：搜索服务和商品页面服务对外提供操作接口，后台在商品增删改后，调用接口</li>
</ul>
<p>以上两种方式都有同一个严重问题：就是代码耦合，后台服务中需要嵌入搜索和商品页面服务，违背了微服务的<code>独立</code>原则。</p>
<p>所以，我们会通过另外一种方式来解决这个问题：消息队列</p>
<h2 id="1-2-消息队列（MQ）"><a href="#1-2-消息队列（MQ）" class="headerlink" title="1.2.消息队列（MQ）"></a>1.2.消息队列（MQ）</h2><h3 id="1-2-1-什么是消息队列"><a href="#1-2-1-什么是消息队列" class="headerlink" title="1.2.1.什么是消息队列"></a>1.2.1.什么是消息队列</h3><p>消息队列，即MQ，Message Queue。</p>
<p><img src="/images/day15/1527063872737.png" alt="1527063872737"></p>
<p>消息队列是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦。</p>
<p>结合前面所说的问题：</p>
<ul>
<li>商品服务对商品增删改以后，无需去操作索引库或静态页面，只是发送一条消息，也不关心消息被谁接收。</li>
<li>搜索服务和静态页面服务接收消息，分别去处理索引库和静态页面。</li>
</ul>
<p>如果以后有其它系统也依赖商品服务的数据，同样监听消息即可，商品服务无需任何代码修改。</p>
<h3 id="1-2-2-AMQP和JMS"><a href="#1-2-2-AMQP和JMS" class="headerlink" title="1.2.2.AMQP和JMS"></a>1.2.2.AMQP和JMS</h3><p>MQ是消息通信的模型，并不是具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p>
<p><img src="/images/day15/1527064480681.png" alt="1527064480681"></p>
<p><img src="/images/day15/1527064487042.png" alt="1527064487042"></p>
<p>两者间的区别和联系：</p>
<ul>
<li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li>
<li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li>
<li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li>
</ul>
<h3 id="1-2-3-常见MQ产品"><a href="#1-2-3-常见MQ产品" class="headerlink" title="1.2.3.常见MQ产品"></a>1.2.3.常见MQ产品</h3><p><img src="/images/day15/1527064606029.png" alt="1527064606029"></p>
<ul>
<li>ActiveMQ：基于JMS</li>
<li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</li>
<li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li>
<li>Kafka：分布式消息系统，高吞吐量</li>
</ul>
<h3 id="1-2-4-RabbitMQ"><a href="#1-2-4-RabbitMQ" class="headerlink" title="1.2.4.RabbitMQ"></a>1.2.4.RabbitMQ</h3><p>RabbitMQ是基于AMQP的一款消息管理系统</p>
<p>官网： <a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p>
<p>官方教程：<a href="http://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">http://www.rabbitmq.com/getstarted.html</a></p>
<p><img src="/images/day15/1532758972119.png" alt="1532758972119"></p>
<p> <img src="/images/day15/1527064762982.png" alt="1527064762982"></p>
<h2 id="1-3-下载和安装"><a href="#1-3-下载和安装" class="headerlink" title="1.3.下载和安装"></a>1.3.下载和安装</h2><h3 id="1-3-1-下载"><a href="#1-3-1-下载" class="headerlink" title="1.3.1.下载"></a>1.3.1.下载</h3><p>官网下载地址：<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">http://www.rabbitmq.com/download.html</a></p>
<p><img src="/images/day15/1532759070767.png" alt="1532759070767"></p>
<p>目前最新版本是：3.7.5</p>
<p>我们的课程中使用的是：3.4.1版本</p>
<p>课前资料提供了安装包：</p>
<p><img src="/images/day15/1532761948333.png" alt="1532761948333"></p>
<h3 id="1-3-2-安装"><a href="#1-3-2-安装" class="headerlink" title="1.3.2.安装"></a>1.3.2.安装</h3><p>详见课前资料中的：</p>
<p><img src="/images/day15/1532761916357.png" alt="1532761916357"></p>
<h1 id="2-五种消息模型"><a href="#2-五种消息模型" class="headerlink" title="2.五种消息模型"></a>2.五种消息模型</h1><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p>
<p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p>
<p><img src="/images/day15/1527068544487.png" alt="1527068544487"></p>
<p>我们通过一个demo工程来了解下RabbitMQ的工作方式：</p>
<p>导入工程：</p>
<p><img src="/images/day15/1532762038694.png" alt="1532762038694"></p>
<p>导入后：</p>
<p> <img src="/images/day15/1532762308507.png" alt="1532762308507"></p>
<p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-rabbitmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们抽取一个建立RabbitMQ连接的工具类，方便其他程序获取连接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立与RabbitMQ的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置服务地址</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.56.101"</span>);</span><br><span class="line">        <span class="comment">//端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、vhost</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/leyou"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"leyou"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"leyou"</span>);</span><br><span class="line">        <span class="comment">// 通过工程获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-基本消息模型"><a href="#2-1-基本消息模型" class="headerlink" title="2.1.基本消息模型"></a>2.1.基本消息模型</h2><p>官方介绍：</p>
<p> <img src="/images/day15/1532762961149.png" alt="1532762961149"></p>
<p>RabbitMQ是一个消息代理：它接受和转发消息。 你可以把它想象成一个邮局：当你把邮件放在邮箱里时，你可以确定邮差先生最终会把邮件发送给你的收件人。 在这个比喻中，RabbitMQ是邮政信箱，邮局和邮递员。</p>
<p>RabbitMQ与邮局的主要区别是它不处理纸张，而是接受，存储和转发数据消息的二进制数据块。</p>
<p> <img src="/images/day15/1532762975546.png" alt="1532762975546"></p>
<p>P（producer/ publisher）：生产者，一个发送消息的用户应用程序。</p>
<p>C（consumer）：消费者，消费和接收有类似的意思，消费者是一个主要用来等待接收消息的用户应用程序</p>
<p>队列（红色区域）：rabbitmq内部类似于邮箱的一个概念。虽然消息流经rabbitmq和你的应用程序，但是它们只能存储在队列中。队列只受主机的内存和磁盘限制，实质上是一个大的消息缓冲区。许多生产者可以发送消息到一个队列，许多消费者可以尝试从一个队列接收数据。</p>
<p>总之：</p>
<p>生产者将消息发送到队列，消费者从队列中获取消息，队列是存储消息的缓冲区。</p>
<p>我们将用Java编写两个程序;发送单个消息的生产者，以及接收消息并将其打印出来的消费者。我们将详细介绍Java API中的一些细节，这是一个消息传递的“Hello World”。</p>
<p>我们将调用我们的消息发布者（发送者）Send和我们的消息消费者（接收者）Recv。发布者将连接到RabbitMQ，发送一条消息，然后退出。</p>
<h3 id="2-1-1-生产者发送消息"><a href="#2-1-1-生产者发送消息" class="headerlink" title="2.1.1.生产者发送消息"></a>2.1.1.生产者发送消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接以及mq通道</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 从连接中创建通道，这是完成大部分API的地方。</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列，必须声明队列才能够发送消息，我们可以把消息发送到队列中。</span></span><br><span class="line">        <span class="comment">// 声明一个队列是幂等的 - 只有当它不存在时才会被创建</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台：</p>
<p><img src="/images/day15/1532763328424.png" alt="1532763328424"></p>
<h3 id="2-1-2-管理工具中查看消息"><a href="#2-1-2-管理工具中查看消息" class="headerlink" title="2.1.2.管理工具中查看消息"></a>2.1.2.管理工具中查看消息</h3><p>进入队列页面，可以看到新建了一个队列：simple_queue</p>
<p><img src="/images/day15/1532763817830.png" alt="1532763817830"></p>
<p>点击队列名称，进入详情页，可以查看消息：</p>
<p><img src="/images/day15/1532763489858.png" alt="1532763489858"></p>
<p>在控制台查看消息并不会将消息消费，所以消息还在。</p>
<h3 id="2-1-3-消费者获取消息"><a href="#2-1-3-消费者获取消息" class="headerlink" title="2.1.3.消费者获取消息"></a>2.1.3.消费者获取消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [x] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数：是否自动进行消息确认。</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台：</p>
<p><img src="/images/day15/1532763733443.png" alt="1532763733443"></p>
<p>这个时候，队列中的消息就没了：</p>
<p><img src="/images/day15/1532763773208.png" alt="1532763773208"></p>
<p>我们发现，消费者已经获取了消息，但是程序没有停止，一直在监听队列中是否有新的消息。一旦有新的消息进入队列，就会立即打印.</p>
<h3 id="2-1-4-消息确认机制（ACK）"><a href="#2-1-4-消息确认机制（ACK）" class="headerlink" title="2.1.4.消息确认机制（ACK）"></a>2.1.4.消息确认机制（ACK）</h3><p>通过刚才的案例可以看出，消息一旦被消费者接收，队列中的消息就会被删除。</p>
<p>那么问题来了：RabbitMQ怎么知道消息被接收了呢？</p>
<p>如果消费者领取消息后，还没执行操作就挂掉了呢？或者抛出了异常？消息消费失败，但是RabbitMQ无从得知，这样消息就丢失了！</p>
<p>因此，RabbitMQ有一个ACK机制。当消费者获取消息后，会向RabbitMQ发送回执ACK，告知消息已经被接收。不过这种回执ACK分两种情况：</p>
<ul>
<li>自动ACK：消息一旦被接收，消费者自动发送ACK</li>
<li>手动ACK：消息接收后，不会发送ACK，需要手动调用</li>
</ul>
<p>大家觉得哪种更好呢？</p>
<p>这需要看消息的重要性：</p>
<ul>
<li>如果消息不太重要，丢失也没有影响，那么自动ACK会比较方便</li>
<li>如果消息非常重要，不容丢失。那么最好在消费完成后手动ACK，否则接收消息后就自动ACK，RabbitMQ就会把消息从队列中删除。如果此时消费者宕机，那么消息就丢失了。</li>
</ul>
<p>我们之前的测试都是自动ACK的，如果要手动ACK，需要改动我们的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [x] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">                <span class="comment">// 手动进行ACK</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数false，手动进行ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到最后一行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br></pre></td></tr></table></figure>

<p>如果第二个参数为true，则会自动进行ACK；如果为false，则需要手动ACK。方法的声明：</p>
<p><img src="/images/day15/1532764253019.png" alt="1532764253019"></p>
<h4 id="2-1-4-1-自动ACK存在的问题"><a href="#2-1-4-1-自动ACK存在的问题" class="headerlink" title="2.1.4.1.自动ACK存在的问题"></a>2.1.4.1.自动ACK存在的问题</h4><p>修改消费者，添加异常，如下：</p>
<p><img src="/images/day15/1532764600849.png" alt="1532764600849"></p>
<p>生产者不做任何修改，直接运行，消息发送成功：</p>
<p><img src="/images/day15/1532764694290.png" alt="1532764694290"></p>
<p>运行消费者，程序抛出异常。但是消息依然被消费：</p>
<p><img src="/images/day15/1532764717995.png" alt="1532764717995"></p>
<p>管理界面：</p>
<p><img src="/images/day15/1532764734232.png" alt="1532764734232"></p>
<h4 id="2-1-4-2-演示手动ACK"><a href="#2-1-4-2-演示手动ACK" class="headerlink" title="2.1.4.2.演示手动ACK"></a>2.1.4.2.演示手动ACK</h4><p>修改消费者，把自动改成手动（去掉之前制造的异常）</p>
<p><img src="/images/day15/1532764831241.png" alt="1532764831241"></p>
<p>生产者不变，再次运行：</p>
<p><img src="/images/day15/1532764895239.png" alt="1532764895239"></p>
<p>运行消费者</p>
<p><img src="/images/day15/1532764957092.png" alt="1532764957092"></p>
<p>但是，查看管理界面，发现：</p>
<p><img src="/images/day15/1532765013834.png" alt="1532765013834"></p>
<p>停掉消费者的程序，发现：</p>
<p><img src="/images/day15/1532765038088.png" alt="1532765038088"></p>
<p>这是因为虽然我们设置了手动ACK，但是代码中并没有进行消息确认！所以消息并未被真正消费掉。</p>
<p>当我们关掉这个消费者，消息的状态再次称为Ready</p>
<p>修改代码手动ACK：</p>
<p><img src="/images/day15/1532765123282.png" alt="1532765123282"></p>
<p>执行：</p>
<p><img src="/images/day15/1532765151039.png" alt="1532765151039"></p>
<p>消息消费成功！</p>
<h2 id="2-2-work消息模型"><a href="#2-2-work消息模型" class="headerlink" title="2.2.work消息模型"></a>2.2.work消息模型</h2><p>工作队列或者竞争消费者模式</p>
<p> <img src="/images/day15/1532765197277.png" alt="1532765197277"></p>
<p>在第一篇教程中，我们编写了一个程序，从一个命名队列中发送并接受消息。在这里，我们将创建一个工作队列，在多个工作者之间分配耗时任务。</p>
<p>工作队列，又称任务队列。主要思想就是避免执行资源密集型任务时，必须等待它执行完成。相反我们稍后完成任务，我们将任务封装为消息并将其发送到队列。 在后台运行的工作进程将获取任务并最终执行作业。当你运行许多消费者时，任务将在他们之间共享，但是<strong>一个消息只能被一个消费者获取</strong>。</p>
<p>这个概念在Web应用程序中特别有用，因为在短的HTTP请求窗口中无法处理复杂的任务。</p>
<p>接下来我们来模拟这个流程：</p>
<pre><code>P：生产者：任务的发布者

C1：消费者，领取任务并且完成任务，假设完成速度较快

C2：消费者2：领取任务并完成任务，假设完成速度慢</code></pre><p>面试题：避免消息堆积？</p>
<p>1）采用workqueue，多个消费者监听同一队列。</p>
<p>2）接收到消息以后，而是通过线程池，异步消费。</p>
<h3 id="2-2-1-生产者"><a href="#2-2-1-生产者" class="headerlink" title="2.2.1.生产者"></a>2.2.1.生产者</h3><p>生产者与案例1中的几乎一样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 循环发布任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">"task .. "</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过这里我们是循环发送50条消息。</p>
<h3 id="2-2-2-消费者1"><a href="#2-2-2-消费者1" class="headerlink" title="2.2.2.消费者1"></a>2.2.2.消费者1</h3><p><img src="/images/day15/1527085386747.png" alt="1527085386747"></p>
<h3 id="2-2-3-消费者2"><a href="#2-2-3-消费者2" class="headerlink" title="2.2.3.消费者2"></a>2.2.3.消费者2</h3><p><img src="/images/day15/1527085448377.png" alt="1527085448377"></p>
<p>与消费者1基本类似，就是没有设置消费耗时时间。</p>
<p>这里是模拟有些消费者快，有些比较慢。</p>
<p>接下来，两个消费者一同启动，然后发送50条消息：</p>
<p><img src="/images/day15/1527085826462.png" alt="1527085826462"></p>
<p>可以发现，两个消费者各自消费了25条消息，而且各不相同，这就实现了任务的分发。</p>
<h3 id="2-2-4-能者多劳"><a href="#2-2-4-能者多劳" class="headerlink" title="2.2.4.能者多劳"></a>2.2.4.能者多劳</h3><p>刚才的实现有问题吗？</p>
<ul>
<li>消费者1比消费者2的效率要低，一次任务的耗时较长</li>
<li>然而两人最终消费的消息数量是一样的</li>
<li>消费者2大量时间处于空闲状态，消费者1一直忙碌</li>
</ul>
<p>现在的状态属于是把任务平均分配，正确的做法应该是消费越快的人，消费的越多。</p>
<p>怎么实现呢？</p>
<p>我们可以使用basicQos方法和prefetchCount = 1设置。 这告诉RabbitMQ一次不要向工作人员发送多于一条消息。 或者换句话说，不要向工作人员发送新消息，直到它处理并确认了前一个消息。 相反，它会将其分派给不是仍然忙碌的下一个工作人员。</p>
<p><img src="/images/day15/1532765689904.png" alt="1532765689904"></p>
<p>再次测试：</p>
<p><img src="/images/day15/1527086159534.png" alt="1527086159534"></p>
<h2 id="2-3-订阅模型分类"><a href="#2-3-订阅模型分类" class="headerlink" title="2.3.订阅模型分类"></a>2.3.订阅模型分类</h2><p>在之前的模式中，我们创建了一个工作队列。 工作队列背后的假设是：每个任务只被传递给一个工作人员。 在这一部分，我们将做一些完全不同的事情 - 我们将会传递一个信息给多个消费者。 这种模式被称为“发布/订阅”。 </p>
<p>订阅模型示意图：</p>
<p> <img src="/images/day15/1527086284940.png" alt="1527086284940"></p>
<p>解读：</p>
<p>1、1个生产者，多个消费者</p>
<p>2、每一个消费者都有自己的一个队列</p>
<p>3、生产者没有将消息直接发送到队列，而是发送到了交换机</p>
<p>4、每个队列都要绑定到交换机</p>
<p>5、生产者发送的消息，经过交换机到达队列，实现一个消息被多个消费者获取的目的</p>
<p>X（Exchanges）：交换机一方面：接收生产者发送的消息。另一方面：知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</p>
<p>Exchange类型有以下几种：</p>
<pre><code>Fanout：广播，将消息交给所有绑定到交换机的队列

Direct：定向，把消息交给符合指定routing key 的队列 

Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</code></pre><p>我们这里先学习</p>
<pre><code>Fanout：即广播模式</code></pre><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>
<h2 id="2-4-订阅模型-Fanout"><a href="#2-4-订阅模型-Fanout" class="headerlink" title="2.4.订阅模型-Fanout"></a>2.4.订阅模型-Fanout</h2><p>Fanout，也称为广播。</p>
<p>流程图：</p>
<p> <img src="/images/day15/1527086564505.png" alt="1527086564505"></p>
<p>在广播模式下，消息发送流程是这样的：</p>
<ul>
<li>1）  可以有多个消费者</li>
<li>2）  每个<strong>消费者有自己的queue</strong>（队列）</li>
<li>3）  每个<strong>队列都要绑定到Exchange</strong>（交换机）</li>
<li>4）  <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li>
<li>5）  交换机把消息发送给绑定过的所有队列</li>
<li>6）  队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li>
</ul>
<h3 id="2-4-1-生产者"><a href="#2-4-1-生产者" class="headerlink" title="2.4.1.生产者"></a>2.4.1.生产者</h3><p>两个变化：</p>
<ul>
<li>1）  声明Exchange，不再声明Queue</li>
<li>2）  发送消息到Exchange，不再发送到Queue</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为fanout</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"Hello everyone"</span>;</span><br><span class="line">        <span class="comment">// 发布消息到Exchange</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [生产者] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-消费者1"><a href="#2-4-2-消费者1" class="headerlink" title="2.4.2.消费者1"></a>2.4.2.消费者1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动返回完成</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要注意代码中：<strong>队列需要和交换机绑定</strong></p>
<h3 id="2-4-3-消费者2"><a href="#2-4-3-消费者2" class="headerlink" title="2.4.3.消费者2"></a>2.4.3.消费者2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，手动返回完成</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-4-测试"><a href="#2-4-4-测试" class="headerlink" title="2.4.4.测试"></a>2.4.4.测试</h3><p>我们运行两个消费者，然后发送1条消息：</p>
<p><img src="/images/day15/1532766264386.png" alt="1532766264386"></p>
<p><img src="/images/day15/1532766291204.png" alt="1532766291204"></p>
<h2 id="2-5-订阅模型-Direct"><a href="#2-5-订阅模型-Direct" class="headerlink" title="2.5.订阅模型-Direct"></a>2.5.订阅模型-Direct</h2><p>有选择性的接收消息</p>
<p>在订阅模式中，生产者发布消息，所有消费者都可以获取所有消息。</p>
<p>在路由模式中，我们将添加一个功能 - 我们将只能订阅一部分消息。 例如，我们只能将重要的错误消息引导到日志文件（以节省磁盘空间），同时仍然能够在控制台上打印所有日志消息。</p>
<p>但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p>
<p>在Direct模型下，队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）</p>
<p>消息的发送方在向Exchange发送消息时，也必须指定消息的routing key。</p>
<p> <img src="/images/day15/1532766437787.png" alt="1532766437787"></p>
<p>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</p>
<p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</p>
<p>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p>
<p>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</p>
<h3 id="2-5-1-生产者"><a href="#2-5-1-生产者" class="headerlink" title="2.5.1.生产者"></a>2.5.1.生产者</h3><p>此处我们模拟商品的增删改，发送消息的RoutingKey分别是：insert、update、delete</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为direct</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"商品新增了， id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-2-消费者1"><a href="#2-5-2-消费者1" class="headerlink" title="2.5.2.消费者1"></a>2.5.2.消费者1</h3><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。假设此处需要update和delete消息</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-3-消费者2"><a href="#2-5-3-消费者2" class="headerlink" title="2.5.3.消费者2"></a>2.5.3.消费者2</h3><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"insert"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-4-测试"><a href="#2-5-4-测试" class="headerlink" title="2.5.4.测试"></a>2.5.4.测试</h3><p>我们分别发送增、删、改的RoutingKey，发现结果：</p>
<p> <img src="/images/day15/1527088296131.png" alt="1527088296131"></p>
<h2 id="2-6-订阅模型-Topic"><a href="#2-6-订阅模型-Topic" class="headerlink" title="2.6.订阅模型-Topic"></a>2.6.订阅模型-Topic</h2><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p>
<p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p>
<p> 通配符规则：</p>
<pre><code>`#`：匹配一个或多个词

`*`：匹配不多不少恰好1个词</code></pre><p>举例：</p>
<pre><code>`audit.#`：能够匹配`audit.irs.corporate` 或者 `audit.irs`

`audit.*`：只能匹配`audit.irs`</code></pre><p> <img src="/images/day15/1532766712166.png" alt="1532766712166"></p>
<p>在这个例子中，我们将发送所有描述动物的消息。消息将使用由三个字（两个点）组成的routing key发送。路由关键字中的第一个单词将描述速度，第二个颜色和第三个种类：“<speed>.<color>.<species>”。</species></color></speed></p>
<p>我们创建了三个绑定：Q1绑定了绑定键“* .orange.<em>”，Q2绑定了“</em>.*.rabbit”和“lazy.＃”。</p>
<p>Q1匹配所有的橙色动物。</p>
<p>Q2匹配关于兔子以及懒惰动物的消息。</p>
<p>练习，生产者发送如下消息，会进入那个队列：</p>
<p>quick.orange.rabbit     Q1 Q2</p>
<p>lazy.orange.elephant     </p>
<p>quick.orange.fox      </p>
<p>lazy.pink.rabbit      </p>
<p>quick.brown.fox     </p>
<p>quick.orange.male.rabbit </p>
<p>orange </p>
<h3 id="2-6-1-生产者"><a href="#2-6-1-生产者" class="headerlink" title="2.6.1.生产者"></a>2.6.1.生产者</h3><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.isnert</code>、<code>item.update</code>、<code>item.delete</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为topic</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"topic"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"新增商品 : id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"item.insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-2-消费者1"><a href="#2-6-2-消费者1" class="headerlink" title="2.6.2.消费者1"></a>2.6.2.消费者1</h3><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。需要 update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-3-消费者2"><a href="#2-6-3-消费者2" class="headerlink" title="2.6.3.消费者2"></a>2.6.3.消费者2</h3><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-7-持久化"><a href="#2-7-持久化" class="headerlink" title="2.7.持久化"></a>2.7.持久化</h2><p>如何避免消息丢失？</p>
<p>1）  消费者的ACK机制。可以防止消费者丢失消息。</p>
<p>2）  但是，如果在消费者消费之前，MQ就宕机了，消息就没了。</p>
<p>是可以将消息进行持久化呢？</p>
<p>要将消息持久化，前提是：队列、Exchange都持久化</p>
<h3 id="2-7-1-交换机持久化"><a href="#2-7-1-交换机持久化" class="headerlink" title="2.7.1.交换机持久化"></a>2.7.1.交换机持久化</h3><p><img src="/images/day15/1532766951432.png" alt="1532766951432"></p>
<h3 id="2-7-2-队列持久化"><a href="#2-7-2-队列持久化" class="headerlink" title="2.7.2.队列持久化"></a>2.7.2.队列持久化</h3><p><img src="/images/day15/1532766981230.png" alt="1532766981230"></p>
<h3 id="2-7-3-消息持久化"><a href="#2-7-3-消息持久化" class="headerlink" title="2.7.3.消息持久化"></a>2.7.3.消息持久化</h3><p><img src="/images/day15/1532767057491.png" alt="1532767057491"></p>
<h1 id="3-Spring-AMQP"><a href="#3-Spring-AMQP" class="headerlink" title="3.Spring AMQP"></a>3.Spring AMQP</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1.简介"></a>3.1.简介</h2><p>Sprin有很多不同的项目，其中就有对AMQP的支持：</p>
<p><img src="/images/day15/1532767136007.png" alt="1532767136007"></p>
<p>Spring AMQP的页面：<a href="http://spring.io/projects/spring-amqp" target="_blank" rel="noopener">http://spring.io/projects/spring-amqp</a></p>
<p><img src="/images/day15/1532767171063.png" alt="1532767171063"></p>
<p>注意这里一段描述：</p>
<p><img src="/images/day15/1532767227821.png" alt="1532767227821">                                             </p>
<pre><code>Spring-amqp是对AMQP协议的抽象实现，而spring-rabbit 是对协议的具体实现，也是目前的唯一实现。底层使用的就是RabbitMQ。</code></pre><h2 id="3-2-依赖和配置"><a href="#3-2-依赖和配置" class="headerlink" title="3.2.依赖和配置"></a>3.2.依赖和配置</h2><p>添加AMQP的启动器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>application.yml</code>中添加RabbitMQ地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-监听者"><a href="#3-3-监听者" class="headerlink" title="3.3.监听者"></a>3.3.监听者</h2><p>在SpringAmqp中，对消息的消费者进行了封装和抽象，一个普通的JavaBean中的普通方法，只要通过简单的注解，就可以成为一个消费者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"spring.test.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"spring.test.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC</span><br><span class="line">            ),</span><br><span class="line">            key = &#123;<span class="string">"#.#"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@Componet</code>：类上的注解，注册到Spring容器</li>
<li><code>@RabbitListener</code>：方法上的注解，声明这个方法是一个消费者方法，需要指定下面的属性：<ul>
<li><code>bindings</code>：指定绑定关系，可以有多个。值是<code>@QueueBinding</code>的数组。<code>@QueueBinding</code>包含下面属性：<ul>
<li><code>value</code>：这个消费者关联的队列。值是<code>@Queue</code>，代表一个队列</li>
<li><code>exchange</code>：队列所绑定的交换机，值是<code>@Exchange</code>类型</li>
<li><code>key</code>：队列和交换机绑定的<code>RoutingKey</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>类似listen这样的方法在一个类中可以写多个，就代表多个消费者。</p>
<h2 id="3-4-AmqpTemplate"><a href="#3-4-AmqpTemplate" class="headerlink" title="3.4.AmqpTemplate"></a>3.4.AmqpTemplate</h2><p>Spring最擅长的事情就是封装，把他人的框架进行封装和整合。</p>
<p>Spring为AMQP提供了统一的消息处理模板：AmqpTemplate，非常方便的发送消息，其发送方法：</p>
<p><img src="/images/day15/1527090258083.png" alt="1527090258083"></p>
<p>红框圈起来的是比较常用的3个方法，分别是：</p>
<ul>
<li>指定交换机、RoutingKey和消息体</li>
<li>指定消息</li>
<li>指定RoutingKey和消息，会向默认的交换机发送消息</li>
</ul>
<h2 id="3-5-测试代码"><a href="#3-5-测试代码" class="headerlink" title="3.5.测试代码"></a>3.5.测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= Application<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MqDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        String msg = <span class="string">"hello, Spring boot amqp"</span>;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"spring.test.exchange"</span>,<span class="string">"a.b"</span>, msg);</span><br><span class="line">        <span class="comment">// 等待10秒后再结束</span></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后查看日志：</p>
<p><img src="/images/day15/1532767726274.png" alt="1532767726274"></p>
<h1 id="3-项目改造"><a href="#3-项目改造" class="headerlink" title="3.项目改造"></a>3.项目改造</h1><p>接下来，我们就改造项目，实现搜索服务、商品静态页的数据同步。</p>
<h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1.思路分析"></a>3.1.思路分析</h2><blockquote>
<p>发送方：商品微服务</p>
</blockquote>
<ul>
<li><p>什么时候发？</p>
<p>当商品服务对商品进行写操作：增、删、改的时候，需要发送一条消息，通知其它服务。</p>
</li>
<li><p>发送什么内容？</p>
<p>对商品的增删改时其它服务可能需要新的商品数据，但是如果消息内容中包含全部商品信息，数据量太大，而且并不是每个服务都需要全部的信息。因此我们<strong>只发送商品id</strong>，其它服务可以根据id查询自己需要的信息。</p>
</li>
</ul>
<blockquote>
<p>接收方：搜索微服务、静态页微服务</p>
</blockquote>
<p>接收消息后如何处理？</p>
<ul>
<li>搜索微服务：<ul>
<li>增/改：添加新的数据到索引库 </li>
<li>删：删除索引库数据</li>
</ul>
</li>
<li>静态页微服务：<ul>
<li>增/改：创建新的静态页</li>
<li>删：删除原来的静态页</li>
</ul>
</li>
</ul>
<h2 id="3-2-商品服务发送消息"><a href="#3-2-商品服务发送消息" class="headerlink" title="3.2.商品服务发送消息"></a>3.2.商品服务发送消息</h2><p>我们先在商品微服务<code>leyou-item-service</code>中实现发送消息。</p>
<h3 id="3-2-1-引入依赖"><a href="#3-2-1-引入依赖" class="headerlink" title="3.2.1.引入依赖"></a>3.2.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-配置文件"><a href="#3-2-2-配置文件" class="headerlink" title="3.2.2.配置文件"></a>3.2.2.配置文件</h3><p>我们在application.yml中添加一些有关RabbitMQ的配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">exchange:</span> <span class="string">leyou.item.exchange</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>template：有关<code>AmqpTemplate</code>的配置<ul>
<li>exchange：缺省的交换机名称，此处配置后，发送消息如果不指定交换机就会使用这个</li>
</ul>
</li>
<li>publisher-confirms：生产者确认机制，确保消息会正确发送，如果发送失败会有错误回执，从而触发重试</li>
</ul>
<h3 id="3-2-3-改造GoodsService"><a href="#3-2-3-改造GoodsService" class="headerlink" title="3.2.3.改造GoodsService"></a>3.2.3.改造GoodsService</h3><p>在GoodsService中封装一个发送消息到mq的方法：<strong>（需要注入AmqpTemplate模板）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Long id, String type)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"item."</span> + type, id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"&#123;&#125;商品消息发送异常，商品id：&#123;&#125;"</span>, type, id, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里没有指定交换机，因此默认发送到了配置中的：<code>leyou.item.exchange</code></p>
<p><strong>注意：这里要把所有异常都try起来，不能让消息的发送影响到正常的业务逻辑</strong></p>
<p>然后在新增的时候调用：</p>
<p><img src="/images/day15/1532768930797.png" alt="1532768930797"></p>
<p>修改的时候调用：</p>
<p><img src="/images/day15/1532769005960.png" alt="1532769005960"></p>
<h2 id="3-3-搜索服务接收消息"><a href="#3-3-搜索服务接收消息" class="headerlink" title="3.3.搜索服务接收消息"></a>3.3.搜索服务接收消息</h2><p>搜索服务接收到消息后要做的事情：</p>
<ul>
<li>增：添加新的数据到索引库</li>
<li>删：删除索引库数据</li>
<li>改：修改索引库数据</li>
</ul>
<p>因为索引库的新增和修改方法是合二为一的，因此我们可以将这两类消息一同处理，删除另外处理。</p>
<h3 id="3-3-1-引入依赖"><a href="#3-3-1-引入依赖" class="headerlink" title="3.3.1.引入依赖"></a>3.3.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-添加配置"><a href="#3-3-2-添加配置" class="headerlink" title="3.3.2.添加配置"></a>3.3.2.添加配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure>

<p>这里只是接收消息而不发送，所以不用配置template相关内容。</p>
<h3 id="3-3-3-编写监听器"><a href="#3-3-3-编写监听器" class="headerlink" title="3.3.3.编写监听器"></a>3.3.3.编写监听器</h3><p> <img src="/images/day15/1532769181819.png" alt="1532769181819"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理insert和update的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.create.index.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>, <span class="string">"item.update"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenCreate</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建或更新索引</span></span><br><span class="line">        <span class="keyword">this</span>.searchService.createIndex(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理delete的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.delete.index.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"item.delete"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除索引</span></span><br><span class="line">        <span class="keyword">this</span>.searchService.deleteIndex(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-4-编写创建和删除索引方法"><a href="#3-3-4-编写创建和删除索引方法" class="headerlink" title="3.3.4.编写创建和删除索引方法"></a>3.3.4.编写创建和删除索引方法</h3><p>这里因为要创建和删除索引，我们需要在SearchService中拓展两个方法，创建和删除索引：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(Long id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spu spu = <span class="keyword">this</span>.goodsClient.querySpuById(id);</span><br><span class="line">    <span class="comment">// 构建商品</span></span><br><span class="line">    Goods goods = <span class="keyword">this</span>.buildGoods(spu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存数据到索引库</span></span><br><span class="line">    <span class="keyword">this</span>.goodsRepository.save(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.goodsRepository.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建索引的方法可以从之前导入数据的测试类中拷贝和改造。</p>
<h2 id="3-4-静态页服务接收消息"><a href="#3-4-静态页服务接收消息" class="headerlink" title="3.4.静态页服务接收消息"></a>3.4.静态页服务接收消息</h2><p>商品静态页服务接收到消息后的处理：</p>
<ul>
<li>增：创建新的静态页</li>
<li>删：删除原来的静态页</li>
<li>改：创建新的静态页并覆盖原来的</li>
</ul>
<p>不过，我们编写的创建静态页的方法也具备覆盖以前页面的功能，因此：增和改的消息可以放在一个方法中处理，删除消息放在另一个方法处理。</p>
<h3 id="3-4-1-引入依赖"><a href="#3-4-1-引入依赖" class="headerlink" title="3.4.1.引入依赖"></a>3.4.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-添加配置"><a href="#3-4-2-添加配置" class="headerlink" title="3.4.2.添加配置"></a>3.4.2.添加配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure>

<p>这里只是接收消息而不发送，所以不用配置template相关内容。</p>
<h3 id="3-4-3-编写监听器"><a href="#3-4-3-编写监听器" class="headerlink" title="3.4.3.编写监听器"></a>3.4.3.编写监听器</h3><p> <img src="/images/day15/1532769581964.png" alt="1532769581964"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsHtmlService goodsHtmlService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.create.web.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>, <span class="string">"item.update"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenCreate</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建页面</span></span><br><span class="line">        goodsHtmlService.createHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.delete.web.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"item.delete"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除页面</span></span><br><span class="line">        goodsHtmlService.deleteHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-4-添加删除页面方法"><a href="#3-4-4-添加删除页面方法" class="headerlink" title="3.4.4.添加删除页面方法"></a>3.4.4.添加删除页面方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHtml</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"C:\\project\\nginx-1.14.0\\html\\item\\"</span>, id + <span class="string">".html"</span>);</span><br><span class="line">    file.deleteOnExit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5.测试"></a>3.5.测试</h2><h3 id="3-5-1-查看RabbitMQ控制台"><a href="#3-5-1-查看RabbitMQ控制台" class="headerlink" title="3.5.1.查看RabbitMQ控制台"></a>3.5.1.查看RabbitMQ控制台</h3><p>重新启动项目，并且登录RabbitMQ管理界面：<a href="http://192.168.56.101:15672" target="_blank" rel="noopener">http://192.168.56.101:15672</a></p>
<p>可以看到，交换机已经创建出来了：</p>
<p><img src="/images/day15/1532772446520.png" alt="1532772446520"></p>
<p>队列也已经创建完毕：</p>
<p><img src="/images/day15/1532772471931.png" alt="1532772471931"></p>
<p>并且队列都已经绑定到交换机：</p>
<p><img src="/images/day15/1532772521932.png" alt="1532772521932"></p>
<h3 id="3-5-2-修改数据试一试"><a href="#3-5-2-修改数据试一试" class="headerlink" title="3.5.2.修改数据试一试"></a>3.5.2.修改数据试一试</h3><p>在后台修改商品数据的价格，分别在搜索及商品详情页查看是否统一。</p>

    <div id="aplayer-ARdgagSy" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1409540467" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq安装</title>
    <url>/2019/12/16/Centos6%E5%AE%89%E8%A3%85rabbitmq/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h1><p>下载地址：<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">http://www.rabbitmq.com/download.html</a></p>
<a id="more"></a>
<h1 id="2-windows下安装"><a href="#2-windows下安装" class="headerlink" title="2. windows下安装"></a>2. windows下安装</h1><h2 id="2-1-安装Erlang"><a href="#2-1-安装Erlang" class="headerlink" title="2.1.安装Erlang"></a>2.1.安装Erlang</h2><p>下载：<a href="http://www.erlang.org/download/otp_win64_17.3.exe" target="_blank" rel="noopener">http://www.erlang.org/download/otp_win64_17.3.exe</a></p>
<p>安装：</p>
<p> <img src="/images/rabbitMQ/clip_image001.png" alt="img"></p>
<p> <img src="/images/rabbitMQ/clip_image002.png" alt="img"></p>
<p> <img src="/images/rabbitMQ/clip_image003.png" alt="img"></p>
<p> <img src="/images/rabbitMQ/clip_image004.png" alt="img"></p>
<p> <img src="/images/rabbitMQ/clip_image005.png" alt="img"></p>
<p>安装完成。</p>
<p>如果出现：</p>
<p> <img src="/images/rabbitMQ/clip_image006.png" alt="img"></p>
<p>请选择忽略。</p>
<h2 id="2-2-安装RabbitMQ"><a href="#2-2-安装RabbitMQ" class="headerlink" title="2.2.安装RabbitMQ"></a>2.2.安装RabbitMQ</h2><p> <img src="/images/rabbitMQ/clip_image007.png" alt="img"></p>
<p> <img src="/images/rabbitMQ/clip_image008.png" alt="img"></p>
<p> <img src="/images/rabbitMQ/clip_image009.png" alt="img"></p>
<p>安装完成。</p>
<p>启动、停止、重新安装等。</p>
<p>按下win + R 然后运行命令：services.msc</p>
<p> <img src="/images/rabbitMQ/clip_image010.png" alt="img"></p>
<p>查看RabbitMQ服务有没有启动：</p>
<p> <img src="/images/rabbitMQ/clip_image011.png" alt="img"></p>
<h2 id="2-3-安装的注意事项"><a href="#2-3-安装的注意事项" class="headerlink" title="2.3.安装的注意事项"></a>2.3.安装的注意事项</h2><p><strong>1）推荐使用默认的安装路径</strong></p>
<p><strong>2）系统用户名必须是英文</strong></p>
<p>可以查看下用户目录：</p>
<p> <img src="/images/rabbitMQ/clip_image012.png" alt="img"></p>
<p>也可以在桌面打开cmd查看路径：</p>
<p> <img src="/images/rabbitMQ/clip_image013.png" alt="img"></p>
<p><strong>3</strong>）计算机名必须是英文</p>
<p><img src="/images/rabbitMQ/clip_image014.png" alt="img"></p>
<p><strong>4）系统的用户必须是管理员</strong></p>
<h2 id="2-4-启用管理工具"><a href="#2-4-启用管理工具" class="headerlink" title="2.4.启用管理工具"></a>2.4.启用管理工具</h2><p> <img src="/images/rabbitMQ/clip_image015.png" alt="img"></p>
<p>1、 点击<img src="/images/rabbitMQ/clip_image016.png" alt="img"></p>
<p>2、 输入命令：</p>
<p>rabbitmq-plugins enable rabbitmq_management<br> <img src="/images/rabbitMQ/clip_image017.png" alt="img"></p>
<p>3、 在浏览器中输入地址查看：<a href="http://127.0.0.1:15672/" target="_blank" rel="noopener">http://127.0.0.1:15672/</a></p>
<p> <img src="/images/rabbitMQ/clip_image018.png" alt="img"></p>
<p>4、 使用默认账号登录：guest/ guest</p>
<h2 id="2-5-安装失败解决方案"><a href="#2-5-安装失败解决方案" class="headerlink" title="2.5.安装失败解决方案"></a>2.5.安装失败解决方案</h2><p>如果安装失败的同学应该如何解决：</p>
<p>l  <strong>重装系统</strong>  </p>
<p>–  不推荐</p>
<p>l  <strong>将RabbitMQ安装到linux虚拟机中</strong></p>
<p>–  推荐</p>
<p>l  <strong>使用别人安装好的RabbitMQ服务</strong></p>
<p>a)     只要给你开通一个账户即可。</p>
<p>b)     使用公用的RabbitMQ服务，在192.168.50.22</p>
<p>–  推荐</p>
<h1 id="3-Linux下安装"><a href="#3-Linux下安装" class="headerlink" title="3. Linux下安装"></a>3. Linux下安装</h1><p>cd /usr/local/leyou</p>
<p>mkdir rabbitmq</p>
<p>cd rabbitmq</p>
<h2 id="3-1-安装Erlang"><a href="#3-1-安装Erlang" class="headerlink" title="3.1.安装Erlang"></a>3.1.安装Erlang</h2><h3 id="3-1-1-在线安装"><a href="#3-1-1-在线安装" class="headerlink" title="3.1.1.在线安装"></a>3.1.1.在线安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install esl-erlang_17.3-1~centos~6_amd64.rpm</span><br><span class="line"></span><br><span class="line">yum install esl-erlang-compat-R14B-1.el6.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-离线安装"><a href="#3-1-2-离线安装" class="headerlink" title="3.1.2.离线安装"></a>3.1.2.离线安装</h3><p>上传课前资料中的安装包</p>
<p>Erlang：</p>
<p><img src="/images/rabbitMQ/1533941425250.png" alt="1533941425250"></p>
<p>依次执行命令：</p>
<p>1）rpm -ivh esl-erlang-17.3-1.x86_64.rpm –force –nodeps</p>
<p><img src="/images/rabbitMQ/clip_image002-1533941272258.png" alt="img"></p>
<p>2）rpm -ivh esl-erlang_17.3-1<del>centos</del>6_amd64.rpm –force –nodeps</p>
<p><img src="/images/rabbitMQ/clip_image003-1533941272258.png" alt="img"></p>
<p>3）rpm -ivh esl-erlang-compat-R14B-1.el6.noarch.rpm –force –nodeps</p>
<p><img src="/images/rabbitMQ/clip_image001-1533941511197.png" alt="img"></p>
<h2 id="3-2-安装RabbitMQ"><a href="#3-2-安装RabbitMQ" class="headerlink" title="3.2.安装RabbitMQ"></a>3.2.安装RabbitMQ</h2><p>RabbitMQ：</p>
<p><img src="/images/rabbitMQ/1533941467342.png" alt="1533941467342"></p>
<p>上传后：</p>
<p><img src="/images/rabbitMQ/clip_image006-1533941272259.png" alt="img"></p>
<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh rabbitmq-server-3.4.1-1.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><img src="/images/rabbitMQ/clip_image007-1533941272259.png" alt="img"></p>
<h3 id="3-2-1-设置配置文件"><a href="#3-2-1-设置配置文件" class="headerlink" title="3.2.1.设置配置文件"></a>3.2.1.设置配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /usr/share/doc/rabbitmq-server-3.4.1/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br></pre></td></tr></table></figure>

<p>开启用户远程访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/rabbitmq/rabbitmq.config</span><br></pre></td></tr></table></figure>

<p> <img src="/images/rabbitMQ/clip_image008-1533941272259.png" alt="img"></p>
<p><strong>注意要去掉后面的逗号。</strong></p>
<h3 id="3-2-2-启动、停止"><a href="#3-2-2-启动、停止" class="headerlink" title="3.2.2.启动、停止"></a>3.2.2.启动、停止</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service rabbitmq-server start</span><br><span class="line"></span><br><span class="line">service rabbitmq-server stop</span><br><span class="line"></span><br><span class="line">service rabbitmq-server restart</span><br></pre></td></tr></table></figure>



<h3 id="3-2-3-开启web界面管理工具"><a href="#3-2-3-开启web界面管理工具" class="headerlink" title="3.2.3.开启web界面管理工具"></a>3.2.3.开启web界面管理工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"></span><br><span class="line">service rabbitmq-server restart</span><br></pre></td></tr></table></figure>

<p> <img src="/images/rabbitMQ/clip_image009-1533941272259.png" alt="img"></p>
<h3 id="3-2-4-设置开机启动"><a href="#3-2-4-设置开机启动" class="headerlink" title="3.2.4.设置开机启动"></a>3.2.4.设置开机启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure>



<h3 id="3-2-5-防火墙开放15672端口"><a href="#3-2-5-防火墙开放15672端口" class="headerlink" title="3.2.5.防火墙开放15672端口"></a>3.2.5.防火墙开放15672端口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 15672 -j ACCEPT</span><br><span class="line"></span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure>



<h1 id="4-管理界面"><a href="#4-管理界面" class="headerlink" title="4.管理界面"></a>4.管理界面</h1><h2 id="2-1-主页总览"><a href="#2-1-主页总览" class="headerlink" title="2.1.主页总览"></a>2.1.主页总览</h2><p><img src="/images/rabbitMQ/clip_image010-1533941272259.png" alt="img"></p>
<p>connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况</p>
<p>channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。</p>
<p>Exchanges：交换机，用来实现消息的路由</p>
<p>Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。</p>
<p>端口：</p>
<p>5672: rabbitMq的编程语言客户端连接端口</p>
<p>15672：rabbitMq管理界面端口</p>
<p>25672：rabbitMq集群的端口</p>
<h2 id="2-2-添加用户"><a href="#2-2-添加用户" class="headerlink" title="2.2.添加用户"></a>2.2.添加用户</h2><p>如果不使用guest，我们也可以自己创建一个用户：</p>
<p><img src="/images/rabbitMQ/1527068070427.png" alt="img"></p>
<p>1、 超级管理员(administrator)</p>
<p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p>
<p>2、 监控者(monitoring)</p>
<p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p>
<p>3、 策略制定者(policymaker)</p>
<p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p>
<p>4、 普通管理者(management)</p>
<p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p>
<p>5、 其他</p>
<p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p>
<h2 id="2-3-创建Virtual-Hosts"><a href="#2-3-创建Virtual-Hosts" class="headerlink" title="2.3.创建Virtual Hosts"></a>2.3.创建Virtual Hosts</h2><p>虚拟主机：类似于mysql中的database。他们都是以“/”开头</p>
<p><img src="/images/rabbitMQ/1527068172958.png" alt="img"></p>
<h2 id="2-4-设置权限"><a href="#2-4-设置权限" class="headerlink" title="2.4.设置权限"></a>2.4.设置权限</h2><p> <img src="/images/rabbitMQ/1527068230315.png" alt="img"></p>
<p> <img src="/images/rabbitMQ/1527068380737.png" alt="img"></p>
<p><img src="/images/rabbitMQ/clip_image015-1533941272259.png" alt="img"></p>
]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>商品详情及静态化</title>
    <url>/2019/12/16/day14.%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E5%8F%8A%E9%9D%99%E6%80%81%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>了解Thymeleaf的基本使用</li>
<li>实现商品详情页的渲染</li>
<li>知道页面静态化的作用</li>
<li>实现页面静态化功能</li>
</ul>
<a id="more"></a>
<h1 id="1-商品详情"><a href="#1-商品详情" class="headerlink" title="1.商品详情"></a>1.商品详情</h1><p>当用户搜索到商品，肯定会点击查看，就会进入商品详情页，接下来我们完成商品详情页的展示，</p>
<h2 id="1-1-Thymeleaf"><a href="#1-1-Thymeleaf" class="headerlink" title="1.1.Thymeleaf"></a>1.1.Thymeleaf</h2><p>在商品详情页中，我们会使用到Thymeleaf来渲染页面，所以需要先了解Thymeleaf的语法。</p>
<p>详见课前资料中《Thymeleaf语法入门.md》</p>
<h2 id="1-2-商品详情页服务"><a href="#1-2-商品详情页服务" class="headerlink" title="1.2.商品详情页服务"></a>1.2.商品详情页服务</h2><p>商品详情浏览量比较大，并发高，我们会独立开启一个微服务，用来展示商品详情。</p>
<h3 id="1-2-1-创建module"><a href="#1-2-1-创建module" class="headerlink" title="1.2.1.创建module"></a>1.2.1.创建module</h3><p>商品的详情页服务，命名为：<code>leyou-goods-web</code></p>
<p><img src="/images/day14/1532349011199.png" alt="1532349011199"></p>
<p>目录：</p>
<p><img src="/images/day14/1532349060982.png" alt="1532349060982"></p>
<h3 id="1-2-2-pom依赖"><a href="#1-2-2-pom依赖" class="headerlink" title="1.2.2.pom依赖"></a>1.2.2.pom依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.goods<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-goods-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.item<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-编写启动类"><a href="#1-2-3-编写启动类" class="headerlink" title="1.2.3.编写启动类"></a>1.2.3.编写启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouGoodsWebApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LeyouGoodsWebApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-4-application-yml文件"><a href="#1-2-4-application-yml文件" class="headerlink" title="1.2.4.application.yml文件"></a>1.2.4.application.yml文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">goods-web</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-5-页面模板"><a href="#1-2-5-页面模板" class="headerlink" title="1.2.5.页面模板"></a>1.2.5.页面模板</h3><p>我们从leyou-portal中复制item.html模板到当前项目resource目录下的templates中：</p>
<p> <img src="/images/day14/1532353728660.png" alt="1532353728660"></p>
<h2 id="1-3-页面跳转"><a href="#1-3-页面跳转" class="headerlink" title="1.3.页面跳转"></a>1.3.页面跳转</h2><h3 id="1-3-1-修改页面跳转路径"><a href="#1-3-1-修改页面跳转路径" class="headerlink" title="1.3.1.修改页面跳转路径"></a>1.3.1.修改页面跳转路径</h3><p>首先我们需要修改搜索结果页的商品地址，目前所有商品的地址都是：<a href="http://www.leyou.com/item.html" target="_blank" rel="noopener">http://www.leyou.com/item.html</a></p>
<p> <img src="/images/day14/1526955707685.png" alt="1526955707685"></p>
<p>我们应该跳转到对应的商品的详情页才对。</p>
<p>那么问题来了：商品详情页是一个SKU？还是多个SKU的集合？</p>
<p><img src="/images/day14/1526955852490.png" alt="1526955852490"></p>
<p>通过详情页的预览，我们知道它是多个SKU的集合，即SPU。</p>
<p>所以，页面跳转时，我们应该携带SPU的id信息。</p>
<p>例如：<a href="http://www.leyou.com/item/2314123.html" target="_blank" rel="noopener">http://www.leyou.com/item/2314123.html</a></p>
<p>这里就采用了路径占位符的方式来传递spu的id，我们打开<code>search.html</code>，修改其中的商品路径：</p>
<p><img src="/images/day14/1532354937173.png" alt="1526972476737"></p>
<p>刷新页面后再看：</p>
<p><img src="/images/day14/1532356634734.png" alt="1532356634734"></p>
<h3 id="1-3-2-nginx反向代理"><a href="#1-3-2-nginx反向代理" class="headerlink" title="1.3.2.nginx反向代理"></a>1.3.2.nginx反向代理</h3><p>接下来，我们要把这个地址指向我们刚刚创建的服务：<code>leyou-goods-web</code>，其端口为8084</p>
<p>我们在nginx.conf中添加一段逻辑：</p>
<p><img src="/images/day14/1532356995455.png" alt="1532356995455"></p>
<p>把以/item开头的请求，代理到我们的8084端口。</p>
<h3 id="1-3-3-编写跳转controller"><a href="#1-3-3-编写跳转controller" class="headerlink" title="1.3.3.编写跳转controller"></a>1.3.3.编写跳转controller</h3><p>在<code>leyou-goods-web</code>中编写controller，接收请求，并跳转到商品详情页：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到商品详情页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-4-测试"><a href="#1-3-4-测试" class="headerlink" title="1.3.4.测试"></a>1.3.4.测试</h3><p>启动<code>leyou-goods-page</code>，点击搜索页面商品，看是能够正常跳转：</p>
<p><img src="/images/day14/1532490861851.png" alt="1532490861851"></p>
<p>现在看到的依然是静态的数据。我们接下来开始页面的渲染</p>
<h2 id="1-4-封装模型数据"><a href="#1-4-封装模型数据" class="headerlink" title="1.4.封装模型数据"></a>1.4.封装模型数据</h2><p>首先我们一起来分析一下，在这个页面中需要哪些数据</p>
<p>我们已知的条件是传递来的spu的id，我们需要根据spu的id查询到下面的数据：</p>
<ul>
<li>spu信息</li>
<li>spu的详情</li>
<li>spu下的所有sku</li>
<li>品牌</li>
<li>商品三级分类</li>
<li>商品规格参数、规格参数组</li>
</ul>
<h3 id="1-4-1-商品微服务提供接口"><a href="#1-4-1-商品微服务提供接口" class="headerlink" title="1.4.1.商品微服务提供接口"></a>1.4.1.商品微服务提供接口</h3><h4 id="1-4-1-1-查询spu"><a href="#1-4-1-1-查询spu" class="headerlink" title="1.4.1.1.查询spu"></a>1.4.1.1.查询spu</h4><p>以上所需数据中，根据id查询spu的接口目前还没有，我们需要在商品微服务中提供这个接口：</p>
<blockquote>
<p>GoodsApi</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据spu的id查询spu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Spu <span class="title">querySpuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GoodsController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Spu&gt; <span class="title">querySpuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    Spu spu = <span class="keyword">this</span>.goodsService.querySpuById(id);</span><br><span class="line">    <span class="keyword">if</span>(spu == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(spu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GoodsService</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Spu <span class="title">querySpuById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.spuMapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-1-2-查询规格参数组"><a href="#1-4-1-2-查询规格参数组" class="headerlink" title="1.4.1.2.查询规格参数组"></a>1.4.1.2.查询规格参数组</h4><p>我们在页面展示规格时，需要按组展示：</p>
<p><img src="/images/day14/1532496187812.png" alt="1532496187812"></p>
<p>组内有多个参数，为了方便展示。我们在leyou-item-service中提供一个接口，查询规格组，同时在规格组内的所有参数。</p>
<blockquote>
<p>拓展<code>SpecGroup</code>类：</p>
</blockquote>
<p>我们在<code>SpecGroup</code>中添加一个<code>SpecParam</code>的集合，保存该组下所有规格参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spec_group"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SpecParam&gt; params; <span class="comment">// 该组下的所有规格参数集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后提供查询接口：</p>
<blockquote>
<p>SpecificationAPI：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"spec"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"groups/&#123;cid&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroup&gt;&gt; querySpecGroups(<span class="meta">@PathVariable</span>(<span class="string">"cid"</span>) Long cid);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/params"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SpecParam&gt; <span class="title">querySpecParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"gid"</span>, required = <span class="keyword">false</span>)</span> Long gid,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"cid"</span>, required = <span class="keyword">false</span>)</span> Long cid,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"searching"</span>, required = <span class="keyword">false</span>)</span> Boolean searching,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"generic"</span>, required = <span class="keyword">false</span>)</span> Boolean generic)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询规格参数组，及组内参数</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;cid&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;SpecGroup&gt; <span class="title">querySpecsByCid</span><span class="params">(@PathVariable(<span class="string">"cid"</span>)</span> Long cid)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SpecificationController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;cid&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroup&gt;&gt; querySpecsByCid(<span class="meta">@PathVariable</span>(<span class="string">"cid"</span>) Long cid)&#123;</span><br><span class="line">    List&lt;SpecGroup&gt; list = <span class="keyword">this</span>.specificationService.querySpecsByCid(cid);</span><br><span class="line">    <span class="keyword">if</span>(list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SpecificationService</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SpecGroup&gt; <span class="title">querySpecsByCid</span><span class="params">(Long cid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询规格组</span></span><br><span class="line">    List&lt;SpecGroup&gt; groups = <span class="keyword">this</span>.querySpecGroups(cid);</span><br><span class="line">    groups.forEach(g -&gt; &#123;</span><br><span class="line">        <span class="comment">// 查询组内参数</span></span><br><span class="line">        g.setParams(<span class="keyword">this</span>.querySpecParams(g.getId(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> groups;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service中，我们调用之前编写过的方法，查询规格组，和规格参数，然后封装返回。</p>
<h3 id="1-4-2-创建FeignClient"><a href="#1-4-2-创建FeignClient" class="headerlink" title="1.4.2.创建FeignClient"></a>1.4.2.创建FeignClient</h3><p>我们在<code>leyou-goods-web</code>服务中，创建FeignClient：</p>
<p> <img src="/images/day14/1529916126099.png" alt="1529916126099"></p>
<p>BrandClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CategoryClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryClient</span> <span class="keyword">extends</span> <span class="title">CategoryApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GoodsClient:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> <span class="keyword">extends</span> <span class="title">GoodsApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpecificationClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationClient</span> <span class="keyword">extends</span> <span class="title">SpecificationApi</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-封装数据模型"><a href="#1-4-3-封装数据模型" class="headerlink" title="1.4.3.封装数据模型"></a>1.4.3.封装数据模型</h3><p>我们创建一个GoodsService，在里面来封装数据模型。</p>
<p>这里要查询的数据：</p>
<ul>
<li><p>SPU</p>
</li>
<li><p>SpuDetail</p>
</li>
<li><p>SKU集合</p>
</li>
<li><p>商品分类</p>
<ul>
<li>这里值需要分类的id和name就够了，因此我们查询到以后自己需要封装数据</li>
</ul>
</li>
<li><p>品牌对象</p>
</li>
<li><p>规格组</p>
<ul>
<li>查询规格组的时候，把规格组下所有的参数也一并查出，上面提供的接口中已经实现该功能，我们直接调</li>
</ul>
</li>
<li><p>sku的特有规格参数</p>
<p>有了规格组，为什么这里还要查询？</p>
<p>因为在SpuDetail中的SpecialSpec中，是以id作为规格参数id作为key，如图：</p>
<p><img src="/images/day14/1532499905549.png" alt="1532499905549"></p>
<p>但是，在页面渲染时，需要知道参数的名称，如图：</p>
<p> <img src="/images/day14/1529922667759.png" alt="1529922667759"></p>
<p>我们就需要把id和name一一对应起来，因此需要额外查询sku的特有规格参数，然后变成一个id:name的键值对格式。也就是一个Map，方便将来根据id查找！</p>
</li>
</ul>
<blockquote>
<p>Service代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">loadData</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据id查询spu对象</span></span><br><span class="line">        Spu spu = <span class="keyword">this</span>.goodsClient.querySpuById(spuId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询spudetail</span></span><br><span class="line">        SpuDetail spuDetail = <span class="keyword">this</span>.goodsClient.querySpuDetailBySpuId(spuId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询sku集合</span></span><br><span class="line">        List&lt;Sku&gt; skus = <span class="keyword">this</span>.goodsClient.querySkusBySpuId(spuId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询分类</span></span><br><span class="line">        List&lt;Long&gt; cids = Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3());</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">this</span>.categoryClient.queryNamesByIds(cids);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; categories = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cids.size(); i++) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; categoryMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            categoryMap.put(<span class="string">"id"</span>, cids.get(i));</span><br><span class="line">            categoryMap.put(<span class="string">"name"</span>, names.get(i));</span><br><span class="line">            categories.add(categoryMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询品牌</span></span><br><span class="line">        Brand brand = <span class="keyword">this</span>.brandClient.queryBrandById(spu.getBrandId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询规格参数组</span></span><br><span class="line">        List&lt;SpecGroup&gt; groups = <span class="keyword">this</span>.specificationClient.querySpecGroupByCid(spu.getCid3());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询特殊的规格参数</span></span><br><span class="line">        List&lt;SpecParam&gt; params = <span class="keyword">this</span>.specificationClient.queryParams(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        Map&lt;Long, String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.forEach(param -&gt; &#123;</span><br><span class="line">            paramMap.put(param.getId(), param.getName());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装spu</span></span><br><span class="line">        map.put(<span class="string">"spu"</span>, spu);</span><br><span class="line">        <span class="comment">// 封装spuDetail</span></span><br><span class="line">        map.put(<span class="string">"spuDetail"</span>, spuDetail);</span><br><span class="line">        <span class="comment">// 封装sku集合</span></span><br><span class="line">        map.put(<span class="string">"skus"</span>, skus);</span><br><span class="line">        <span class="comment">// 分类</span></span><br><span class="line">        map.put(<span class="string">"categories"</span>, categories);</span><br><span class="line">        <span class="comment">// 品牌</span></span><br><span class="line">        map.put(<span class="string">"brand"</span>, brand);</span><br><span class="line">        <span class="comment">// 规格参数组</span></span><br><span class="line">        map.put(<span class="string">"groups"</span>, groups);</span><br><span class="line">        <span class="comment">// 查询特殊规格参数</span></span><br><span class="line">        map.put(<span class="string">"paramMap"</span>, paramMap);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在controller中把数据放入model：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到商品详情页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="comment">// 加载所需的数据</span></span><br><span class="line">        Map&lt;String, Object&gt; modelMap = <span class="keyword">this</span>.goodsService.loadModel(id);</span><br><span class="line">        <span class="comment">// 放入模型</span></span><br><span class="line">        model.addAllAttributes(modelMap);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-页面测试数据"><a href="#1-4-4-页面测试数据" class="headerlink" title="1.4.4.页面测试数据"></a>1.4.4.页面测试数据</h3><p>我们在页面中先写一段JS，把模型中的数据取出观察，看是否成功：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> a = <span class="comment">/*[[$&#123;groups&#125;]]*/</span> [];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> b = <span class="comment">/*[[$&#123;params&#125;]]*/</span> [];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> c = <span class="comment">/*[[$&#123;categories&#125;]]*/</span> [];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> d = <span class="comment">/*[[$&#123;spu&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> e = <span class="comment">/*[[$&#123;spuDetail&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> f = <span class="comment">/*[[$&#123;skus&#125;]]*/</span> [];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> g = <span class="comment">/*[[$&#123;brand&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后查看页面源码：</p>
<p><img src="/images/day14/1532509946463.png" alt="1532509946463"></p>
<p>数据都成功查到了！</p>
<h2 id="1-5-渲染面包屑"><a href="#1-5-渲染面包屑" class="headerlink" title="1.5.渲染面包屑"></a>1.5.渲染面包屑</h2><p>在商品展示页的顶部，有一个商品分类、品牌、标题的面包屑</p>
<p> <img src="/images/day14/1526978423084.png" alt="1526978423084"></p>
<p>其数据有3部分：</p>
<ul>
<li>商品分类</li>
<li>商品品牌</li>
<li>spu标题</li>
</ul>
<p>我们的模型中都有，所以直接渲染即可（页面101行开始）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"crumb-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sui-breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"category : $&#123;categories&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;category.name&#125;"</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;brand.name&#125;"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;spu.title&#125;"</span>&gt;</span>Apple iPhone 6s<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-6-渲染商品列表"><a href="#1-6-渲染商品列表" class="headerlink" title="1.6.渲染商品列表"></a>1.6.渲染商品列表</h2><p>先看下整体效果：</p>
<p><img src="/images/day14/1526979330657.png" alt="1526979330657"></p>
<p>这个部分需要渲染的数据有5块：</p>
<ul>
<li>sku图片</li>
<li>sku标题</li>
<li>副标题</li>
<li>sku价格</li>
<li>特有规格属性列表</li>
</ul>
<p>其中，sku 的图片、标题、价格，都必须在用户选中一个具体sku后，才能渲染。而特有规格属性列表可以在spuDetail中查询到。而副标题则是在spu中，直接可以在页面渲染</p>
<p>因此，我们先对特有规格属性列表进行渲染。等用户选择一个sku，再通过js对其它sku属性渲染</p>
<h3 id="1-6-1-副标题"><a href="#1-6-1-副标题" class="headerlink" title="1.6.1.副标题"></a>1.6.1.副标题</h3><p>副标题是在spu中，所以我们直接通过Thymeleaf渲染：</p>
<p>在第146行左右：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;spu.subTitle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>副标题中可能会有超链接，因此这里也用<code>th:utext</code>来展示，效果：</p>
<p> <img src="/images/day14/1526980061592.png" alt="1526980061592"></p>
<h3 id="1-6-2-渲染规格属性列表"><a href="#1-6-2-渲染规格属性列表" class="headerlink" title="1.6.2.渲染规格属性列表"></a>1.6.2.渲染规格属性列表</h3><p>规格属性列表将来会有事件和动态效果。我们需要有js代码参与，不能使用Thymeleaf来渲染了。</p>
<p>因此，这里我们用vue，不过需要先把数据放到js对象中，方便vue使用</p>
<h4 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h4><p>我们在页面的<code>head</code>中，定义一个js标签，然后在里面定义变量，保存与sku相关的一些数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// sku集合</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> skus = <span class="comment">/*[[$&#123;skus&#125;]]*/</span> [];</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 规格参数id与name对</span></span></span><br><span class="line"><span class="actionscript">	<span class="keyword">const</span> paramMap = <span class="comment">/*[[$&#123;params&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 特有规格参数集合</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> specialSpec = <span class="built_in">JSON</span>.parse(<span class="comment">/*[[$&#123;spuDetail.specialSpec&#125;]]*/</span> <span class="string">""</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>specialSpec：这是SpuDetail中唯一与Sku相关的数据</p>
<p>因此我们并没有保存整个spuDetail，而是只保留了这个属性，而且需要手动转为js对象。</p>
</li>
<li><p>paramMap：规格参数的id和name键值对，方便页面根据id获取参数名</p>
</li>
<li><p>skus：sku集合</p>
</li>
</ul>
<p>我们来看下页面获取的数据：</p>
<p><img src="/images/day14/1529923363960.png" alt="1529923363960"></p>
<h4 id="通过Vue渲染"><a href="#通过Vue渲染" class="headerlink" title="通过Vue渲染"></a>通过Vue渲染</h4><p>我们把刚才获得的几个变量保存在Vue实例中：</p>
<p><img src="/images/day14/1532531501925.png" alt="1532531501925"></p>
<p>然后在页面中渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"specification"</span> <span class="attr">class</span>=<span class="string">"summary-wrap clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">v-for</span>=<span class="string">"(v,k) in specialSpec"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;paramMap[k]&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span> <span class="attr">v-for</span>=<span class="string">"(str,j) in v"</span> <span class="attr">:key</span>=<span class="string">"j"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">                &#123;&#123;str&#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"点击取消选择"</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后刷新页面查看：</p>
<p><img src="/images/day14/1532531590626.png" alt="1532531590626"></p>
<p>数据成功渲染了。不过我们发现所有的规格都被勾选了。这是因为现在，每一个规格都有样式：<code>selected</code>，我们应该只选中一个，让它的class样式为selected才对！</p>
<p>那么问题来了，我们该如何确定用户选择了哪一个？</p>
<h3 id="1-6-3-规格属性的筛选"><a href="#1-6-3-规格属性的筛选" class="headerlink" title="1.6.3.规格属性的筛选"></a>1.6.3.规格属性的筛选</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>规格参数的格式是这样的：</p>
<p> <img src="/images/day14/1529923584730.png" alt="1529923584730"></p>
<p>每一个规格项是数组中的一个元素，因此我们只要保存被选择的规格项的索引，就能判断哪个是用户选择的了！</p>
<p>我们需要一个对象来保存用户选择的索引，格式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"4"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"12"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"13"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但问题是，第一次进入页面时，用户并未选择任何参数。因此索引应该有一个默认值，我们将默认值设置为0。</p>
<p>我们在<code>head</code>的script标签中，对索引对象进行初始化：</p>
<p> <img src="/images/day14/1529923658242.png" alt="1529923658242"></p>
<p>然后在vue中保存：</p>
<p> <img src="/images/day14/1529923701283.png" alt="1529923701283"></p>
<h4 id="页面改造"><a href="#页面改造" class="headerlink" title="页面改造"></a>页面改造</h4><p>我们在页面中，通过判断indexes的值来判断当前规格是否被选中，并且给规格绑定点击事件，点击规格项后，修改indexes中的对应值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"specification"</span> <span class="attr">class</span>=<span class="string">"summary-wrap clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">v-for</span>=<span class="string">"(v,k) in specialSpec"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;paramMap[k]&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span> <span class="attr">v-for</span>=<span class="string">"(str,j) in v"</span> <span class="attr">:key</span>=<span class="string">"j"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">:class</span>=<span class="string">"&#123;selected: j===indexes[k]&#125;"</span> @<span class="attr">click</span>=<span class="string">"indexes[k]=j"</span>&gt;</span></span><br><span class="line">                &#123;&#123;str&#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"j===indexes[k]"</span> <span class="attr">title</span>=<span class="string">"点击取消选择"</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/day14/1532533192037.png" alt="1532533192037"></p>
<h3 id="1-6-4-确定SKU"><a href="#1-6-4-确定SKU" class="headerlink" title="1.6.4.确定SKU"></a>1.6.4.确定SKU</h3><p>在我们设计sku数据的时候，就已经添加了一个字段：indexes：</p>
<p><img src="/images/day14/1532533286400.png" alt="1532533286400"></p>
<p>这其实就是规格参数的索引组合。</p>
<p>而我们在页面中，用户点击选择规格后，就会把对应的索引保存起来：</p>
<p><img src="/images/day14/1532533340274.png" alt="1532533340274"></p>
<p>因此，我们可以根据这个indexes来确定用户要选择的sku</p>
<p>我们在vue中定义一个<strong>计算属性</strong>，来计算与索引匹配的sku：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    sku()&#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">Object</span>.values(<span class="keyword">this</span>.indexes).join(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.skus.find(<span class="function"><span class="params">s</span> =&gt;</span> s.indexes == index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器工具中查看：</p>
<p><img src="/images/day14/1532533876765.png" alt="1532533876765"></p>
<h3 id="1-6-5-渲染sku列表"><a href="#1-6-5-渲染sku列表" class="headerlink" title="1.6.5.渲染sku列表"></a>1.6.5.渲染sku列表</h3><p>既然已经拿到了用户选中的sku，接下来，就可以在页面渲染数据了</p>
<h4 id="图片列表"><a href="#图片列表" class="headerlink" title="图片列表"></a>图片列表</h4><p>商品图片是一个字符串，以<code>,</code>分割，页面展示比较麻烦，所以我们编写一个<strong>计算属性：</strong>images()，将图片字符串变成数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    sku()&#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">Object</span>.values(<span class="keyword">this</span>.indexes).join(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.skus.find(<span class="function"><span class="params">s</span>=&gt;</span>s.indexes==index);</span><br><span class="line">    &#125;,</span><br><span class="line">    images()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sku.images ? <span class="keyword">this</span>.sku.images.split(<span class="string">","</span>) : [<span class="string">''</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>页面改造：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zoom"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--默认第一个预览--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"preview"</span> <span class="attr">class</span>=<span class="string">"spec-preview"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"jqzoom"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">img</span> <span class="attr">:jqimg</span>=<span class="string">"images[0]"</span> <span class="attr">:src</span>=<span class="string">"images[0]"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"400px"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--下方的缩略图--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spec-scroll"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"prev"</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--左右按钮--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(image, i) in images"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"image"</span> <span class="attr">:bimg</span>=<span class="string">"image"</span> <span class="attr">onmousemove</span>=<span class="string">"preview(this)"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p> <img src="/images/day14/1526985783938.png" alt="1526985783938"></p>
<h4 id="标题和价格"><a href="#标题和价格" class="headerlink" title="标题和价格"></a>标题和价格</h4><p><img src="/images/day14/1526985959427.png" alt="1526985959427"></p>
<h4 id="完整效果"><a href="#完整效果" class="headerlink" title="完整效果"></a>完整效果</h4><p><img src="/images/day14/1532535748931.png" alt="1532535748931"></p>
<h2 id="1-7-商品详情"><a href="#1-7-商品详情" class="headerlink" title="1.7.商品详情"></a>1.7.商品详情</h2><p>商品详情页面如下图所示：</p>
<p><img src="/images/day14/1526988361312.png" alt="1526988361312"></p>
<p>分成上下两部分：</p>
<ul>
<li>上部：展示的是规格属性列表</li>
<li>下部：展示的是商品详情</li>
</ul>
<h3 id="1-7-1-属性列表（作业）"><a href="#1-7-1-属性列表（作业）" class="headerlink" title="1.7.1.属性列表（作业）"></a>1.7.1.属性列表（作业）</h3><p>这部分内容与规格参数部分重复，我就不带大家做了，大家可以自己完成</p>
<h3 id="1-7-2-商品详情"><a href="#1-7-2-商品详情" class="headerlink" title="1.7.2.商品详情"></a>1.7.2.商品详情</h3><p>商品详情是HTML代码，我们不能使用 <code>th:text</code>，应该使用<code>th:utext</code></p>
<p>在页面的第444行左右：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--商品详情--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro-detail"</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;spuDetail.description&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终展示效果：</p>
<p><img src="/images/day14/1532536101914.png" alt="1532536101914"></p>
<h2 id="1-8-规格包装"><a href="#1-8-规格包装" class="headerlink" title="1.8.规格包装"></a>1.8.规格包装</h2><p>规格包装分成两部分：</p>
<ul>
<li>规格参数</li>
<li>包装列表</li>
</ul>
<p>而且规格参数需要按照组来显示</p>
<h3 id="1-8-1-规格参数"><a href="#1-8-1-规格参数" class="headerlink" title="1.8.1.规格参数"></a>1.8.1.规格参数</h3><p>最终的效果：</p>
<p><img src="/images/day14/1532536238386.png" alt="1532536238386"></p>
<p>我们模型中有一个groups，跟这个数据结果很像：</p>
<p> <img src="/images/day14/1529924049003.png" alt="1529924049003"></p>
<p>分成8个组，组内都有params，里面是所有的参数。不过，这些参数都没有值！</p>
<p>规格参数的值分为两部分：</p>
<ul>
<li>通用规格参数：保存在SpuDetail中的genericSpec中</li>
<li>特有规格参数：保存在sku的ownSpec中</li>
</ul>
<p>我们需要把这两部分值取出来，放到groups中。</p>
<p>从spuDetail中取出genericSpec并取出groups：</p>
<p><img src="/images/day14/1532537802576.png" alt="1532537802576"></p>
<p>把genericSpec引入到Vue实例：</p>
<p><img src="/images/day14/1532537863801.png" alt="1532537863801"></p>
<p>因为sku是动态的，所以我们编写一个<strong>计算属性</strong>，来进行值的组合：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">groups()&#123;</span><br><span class="line">    groups.forEach(<span class="function"><span class="params">group</span> =&gt;</span> &#123;</span><br><span class="line">        group.params.forEach(<span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(param.generic)&#123;</span><br><span class="line">                <span class="comment">// 通用属性，去spu的genericSpec中获取</span></span><br><span class="line">                param.v = <span class="keyword">this</span>.genericSpec[param.id] || <span class="string">'其它'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 特有属性值，去SKU中获取</span></span><br><span class="line">                param.v = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.sku.ownSpec)[param.id]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> groups;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在页面渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Ptable"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Ptable-item"</span> <span class="attr">v-for</span>=<span class="string">"group in groups"</span> <span class="attr">:key</span>=<span class="string">"group.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;group.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"p in group.params"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;&#123;p.name&#125;&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123;p.v + (p.unit || '')&#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-8-2-包装列表"><a href="#1-8-2-包装列表" class="headerlink" title="1.8.2.包装列表"></a>1.8.2.包装列表</h3><p>包装列表在商品详情中，我们一开始并没有赋值到Vue实例中，但是可以通过Thymeleaf来渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"package-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>包装清单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;spuDetail.packingList&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终效果：</p>
<p><img src="/images/day14/1532538150603.png" alt="1532538150603"></p>
<p><img src="/images/day14/1532538178543.png" alt="1532538178543"></p>
<h2 id="1-9-售后服务"><a href="#1-9-售后服务" class="headerlink" title="1.9.售后服务"></a>1.9.售后服务</h2><p>售后服务也可以通过Thymeleaf进行渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"three"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>售后保障<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;spuDetail.afterService&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/day14/1532538249704.png" alt="1532538249704"></p>
<h1 id="2-页面静态化"><a href="#2-页面静态化" class="headerlink" title="2.页面静态化"></a>2.页面静态化</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><h3 id="2-1-1-问题分析"><a href="#2-1-1-问题分析" class="headerlink" title="2.1.1.问题分析"></a>2.1.1.问题分析</h3><p>现在，我们的页面是通过Thymeleaf模板引擎渲染后返回到客户端。在后台需要大量的数据查询，而后渲染得到HTML页面。会对数据库造成压力，并且请求的响应时间过长，并发能力不高。</p>
<p>大家能想到什么办法来解决这个问题？</p>
<p>首先我们能想到的就是缓存技术，比如之前学习过的Redis。不过Redis适合数据规模比较小的情况。假如数据量比较大，例如我们的商品详情页。每个页面如果10kb，100万商品，就是10GB空间，对内存占用比较大。此时就给缓存系统带来极大压力，如果缓存崩溃，接下来倒霉的就是数据库了。</p>
<p>所以缓存并不是万能的，某些场景需要其它技术来解决，比如静态化。</p>
<h3 id="2-1-2-什么是静态化"><a href="#2-1-2-什么是静态化" class="headerlink" title="2.1.2.什么是静态化"></a>2.1.2.什么是静态化</h3><p>静态化是指把动态生成的HTML页面变为静态内容保存，以后用户的请求到来，直接访问静态页面，不再经过服务的渲染。</p>
<p>而静态的HTML页面可以部署在nginx中，从而大大提高并发能力，减小tomcat压力。</p>
<h3 id="2-1-3-如何实现静态化"><a href="#2-1-3-如何实现静态化" class="headerlink" title="2.1.3.如何实现静态化"></a>2.1.3.如何实现静态化</h3><p>目前，静态化页面都是通过模板引擎来生成，而后保存到nginx服务器来部署。常用的模板引擎比如：</p>
<ul>
<li>Freemarker</li>
<li>Velocity</li>
<li>Thymeleaf</li>
</ul>
<p>我们之前就使用的Thymeleaf，来渲染html返回给用户。Thymeleaf除了可以把渲染结果写入Response，也可以写到本地文件，从而实现静态化。</p>
<h2 id="2-2-Thymeleaf实现静态化"><a href="#2-2-Thymeleaf实现静态化" class="headerlink" title="2.2.Thymeleaf实现静态化"></a>2.2.Thymeleaf实现静态化</h2><h3 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1.概念"></a>2.2.1.概念</h3><p>先说下Thymeleaf中的几个概念：</p>
<ul>
<li>Context：运行上下文</li>
<li>TemplateResolver：模板解析器</li>
<li>TemplateEngine：模板引擎</li>
</ul>
<blockquote>
<p>Context</p>
</blockquote>
<p>上下文： 用来保存模型数据，当模板引擎渲染时，可以从Context上下文中获取数据用于渲染。</p>
<p>当与SpringBoot结合使用时，我们放入Model的数据就会被处理到Context，作为模板渲染的数据使用。</p>
<blockquote>
<p>TemplateResolver</p>
</blockquote>
<p>模板解析器：用来读取模板相关的配置，例如：模板存放的位置信息，模板文件名称，模板文件的类型等等。</p>
<p>当与SpringBoot结合时，TemplateResolver已经由其创建完成，并且各种配置也都有默认值，比如模板存放位置，其默认值就是：templates。比如模板文件类型，其默认值就是html。</p>
<blockquote>
<p>TemplateEngine</p>
</blockquote>
<p>模板引擎：用来解析模板的引擎，需要使用到上下文、模板解析器。分别从两者中获取模板中需要的数据，模板文件。然后利用内置的语法规则解析，从而输出解析后的文件。来看下模板引擎进行处理的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">templateEngine.process(<span class="string">"模板名"</span>, context, writer);</span><br></pre></td></tr></table></figure>

<p>三个参数：</p>
<ul>
<li>模板名称</li>
<li>上下文：里面包含模型数据</li>
<li>writer：输出目的地的流</li>
</ul>
<p>在输出时，我们可以指定输出的目的地，如果目的地是Response的流，那就是网络响应。如果目的地是本地文件，那就实现静态化了。</p>
<p>而在SpringBoot中已经自动配置了模板引擎，因此我们不需要关心这个。现在我们做静态化，就是把输出的目的地改成本地文件即可！</p>
<h3 id="2-2-2-具体实现"><a href="#2-2-2-具体实现" class="headerlink" title="2.2.2.具体实现"></a>2.2.2.具体实现</h3><p> <img src="/images/day14/1532757937331.png" alt="1532757937331"></p>
<p>Service代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsHtmlService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(GoodsHtmlService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建html页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        PrintWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取页面数据</span></span><br><span class="line">            Map&lt;String, Object&gt; spuMap = <span class="keyword">this</span>.goodsService.loadModel(spuId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建thymeleaf上下文对象</span></span><br><span class="line">            Context context = <span class="keyword">new</span> Context();</span><br><span class="line">            <span class="comment">// 把数据放入上下文对象</span></span><br><span class="line">            context.setVariables(spuMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建输出流</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"C:\\project\\nginx-1.14.0\\html\\item\\"</span> + spuId + <span class="string">".html"</span>);</span><br><span class="line">            writer = <span class="keyword">new</span> PrintWriter(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行页面静态化方法</span></span><br><span class="line">            templateEngine.process(<span class="string">"item"</span>, context, writer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"页面静态化出错：&#123;&#125;，"</span>+ e, spuId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建线程处理页面静态化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncExcute</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        ThreadUtils.execute(()-&gt;createHtml(spuId));</span><br><span class="line">        <span class="comment">/*ThreadUtils.execute(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void run() &#123;</span></span><br><span class="line"><span class="comment">                createHtml(spuId);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService es = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        es.submit(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-什么时候创建静态文件"><a href="#2-2-3-什么时候创建静态文件" class="headerlink" title="2.2.3.什么时候创建静态文件"></a>2.2.3.什么时候创建静态文件</h3><p>我们编写好了创建静态文件的service，那么问题来了：什么时候去调用它呢</p>
<p>想想这样的场景：</p>
<p>假如大部分的商品都有了静态页面。那么用户的请求都会被nginx拦截下来，根本不会到达我们的<code>leyou-goods-web</code>服务。只有那些还没有页面的请求，才可能会到达这里。</p>
<p>因此，如果请求到达了这里，我们除了返回页面视图外，还应该创建一个静态页面，那么下次就不会再来麻烦我们了。</p>
<p>所以，我们在GoodsController中添加逻辑，去生成静态html文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id, Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载所需的数据</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">this</span>.goodsService.loadModel(id);</span><br><span class="line">    <span class="comment">// 把数据放入数据模型</span></span><br><span class="line">    model.addAllAttributes(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面静态化</span></span><br><span class="line">    <span class="keyword">this</span>.goodsHtmlService.asyncExcute(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：生成html 的代码不能对用户请求产生影响，所以这里我们使用额外的线程进行异步创建。</p>
<h3 id="2-2-4-重启测试"><a href="#2-2-4-重启测试" class="headerlink" title="2.2.4.重启测试"></a>2.2.4.重启测试</h3><p>访问一个商品详情，然后查看nginx目录：</p>
<p><img src="/images/day14/1532757980379.png" alt="1532757980379"></p>
<h2 id="2-3-nginx代理静态页面"><a href="#2-3-nginx代理静态页面" class="headerlink" title="2.3.nginx代理静态页面"></a>2.3.nginx代理静态页面</h2><p>接下来，我们修改nginx，让它对商品请求进行监听，指向本地静态页面，如果本地没找到，才进行反向代理：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /item &#123;</span><br><span class="line">        <span class="comment"># 先找本地</span></span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>) &#123; <span class="comment">#请求的文件不存在，就反向代理</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:8084;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:9002;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启测试：</p>
<p>发现请求速度得到了极大提升：</p>
<p><img src="/images/day14/1532758206086.png" alt="1532758206086"></p>

    <div id="aplayer-GOOnwgsF" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="74265751" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>



]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf语法入门</title>
    <url>/2019/12/16/thymeleaf%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-Thymeleaf简介"><a href="#1-Thymeleaf简介" class="headerlink" title="1.Thymeleaf简介"></a>1.Thymeleaf简介</h1><p>官方网站：<a href="https://www.thymeleaf.org/index.html" target="_blank" rel="noopener">https://www.thymeleaf.org/index.html</a></p>
<p><img src="/images/yufa/1526434145635.png" alt="1526434145635"></p>
<p><strong>Thymeleaf</strong>是用来开发Web和独立环境项目的现代服务器端Java模板引擎。</p>
<p>Thymeleaf的主要目标是为您的开发工作流程带来优雅的<em>自然模板</em> - HTML。可以在直接浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作。</p>
<p>借助Spring Framework的模块，可以根据自己的喜好进行自由选择，可插拔功能组件，Thymeleaf是现代HTML5 JVM Web开发的理想选择 - 尽管它可以做的更多。</p>
<p>Spring官方支持的服务的渲染模板中，并不包含jsp。而是Thymeleaf和Freemarker等，而Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，你只用关注Thymeleaf的语法即可。</p>
<a id="more"></a>
<h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h1><p>特点：</p>
<ul>
<li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li>
<li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li>
<li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>
<li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li>
</ul>
<h1 id="3-环境准备"><a href="#3-环境准备" class="headerlink" title="3.环境准备"></a>3.环境准备</h1><p>我们来创建一个module，为学习Thymeleaf做准备：</p>
<h2 id="3-1-创建module"><a href="#3-1-创建module" class="headerlink" title="3.1.创建module"></a>3.1.创建module</h2><p>使用spring 脚手架创建：</p>
<p><img src="/images/yufa/1526435213659.png" alt="1526435213659"></p>
<p><img src="/images/yufa/1526435267302.png" alt="1526435267302"></p>
<p>勾选web和Thymeleaf的依赖：</p>
<p><img src="/images/yufa/1526435317440.png" alt="1526435317440"></p>
<p>项目结构：</p>
<p> <img src="/images/yufa/1526435434999.png" alt="1526435434999"></p>
<p>pom：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>thymeleaf-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-默认配置"><a href="#3-2-默认配置" class="headerlink" title="3.2.默认配置"></a>3.2.默认配置</h2><p>不需要做任何配置，启动器已经帮我们把Thymeleaf的视图器配置完成：</p>
<p> <img src="/images/yufa/1526435647041.png" alt="1526435647041"></p>
<p>而且，还配置了模板文件（html）的位置，与jsp类似的前缀+ 视图名 + 后缀风格：</p>
<p> <img src="/images/yufa/1526435706301.png" alt="1526435706301"></p>
<ul>
<li>默认前缀：<code>classpath:/templates/</code></li>
<li>默认后缀：<code>.html</code></li>
</ul>
<p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p>
<p>Thymeleaf默认会开启页面缓存，提高页面并发能力。但会导致我们修改页面不会立即被展现，因此我们关闭缓存：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭Thymeleaf的缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p>另外，修改完毕页面，需要使用快捷键：<code>Ctrl + Shift + F9</code>来刷新工程。</p>
<h2 id="3-3-快速开始"><a href="#3-3-快速开始" class="headerlink" title="3.3.快速开始"></a>3.3.快速开始</h2><p>我们准备一个controller，控制视图跳转：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"show1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Hello, Thymeleaf!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建一个html模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span>大家好<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，把html 的名称空间，改成：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code> 会有语法提示</p>
<p>启动项目，访问页面：</p>
<p> <img src="/images/yufa/1526436248528.png" alt="1526436248528"></p>
<h1 id="4-语法"><a href="#4-语法" class="headerlink" title="4.语法"></a>4.语法</h1><p>Thymeleaf的主要作用是把model中的数据渲染到html中，因此其语法主要是如何解析model中的数据。从以下方面来学习：</p>
<ul>
<li>变量</li>
<li>方法</li>
<li>条件判断</li>
<li>循环</li>
<li>运算<ul>
<li>逻辑运算</li>
<li>布尔运算</li>
<li>比较运算</li>
<li>条件运算</li>
</ul>
</li>
<li>其它</li>
</ul>
<h2 id="4-1-变量"><a href="#4-1-变量" class="headerlink" title="4.1.变量"></a>4.1.变量</h2><h3 id="变量案例"><a href="#变量案例" class="headerlink" title="变量案例"></a>变量案例</h3><p>我们先新建一个实体类：User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    User friend;<span class="comment">// 对象类型属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在模型中添加数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"show2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"Jack Chen"</span>);</span><br><span class="line">    user.setFriend(<span class="keyword">new</span> User(<span class="string">"李小龙"</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"show2"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>语法说明：</p>
</blockquote>
<p>Thymeleaf通过<code>${}</code>来获取model中的变量，注意这不是el表达式，而是ognl表达式，但是语法非常像。</p>
<blockquote>
<p>示例：</p>
</blockquote>
<p>我们在页面获取user数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    欢迎您：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p> <img src="/images/yufa/1526438010948.png" alt="1526438010948"></p>
<p>感觉跟el表达式几乎是一样的。不过区别在于，我们的表达式写在一个名为：<code>th:text</code>的标签属性中，这个叫做<code>指令</code></p>
<h3 id="动静结合"><a href="#动静结合" class="headerlink" title="动静结合"></a>动静结合</h3><blockquote>
<p>指令：</p>
</blockquote>
<p>Thymeleaf崇尚<code>自然模板</code>，意思就是模板是纯正的html代码，脱离模板引擎，在纯静态环境也可以直接运行。现在如果我们直接在html中编写 <code>${}</code>这样的表达式，显然在静态环境下就会出错，这不符合Thymeleaf的理念。</p>
<p>Thymeleaf中所有的表达式都需要写在<code>指令</code>中，指令是HTML5中的自定义属性，在Thymeleaf中所有指令都是以<code>th:</code>开头。因为表达式<code>${user.name}</code>是写在自定义属性中，因此在静态环境下，表达式的内容会被当做是普通字符串，浏览器会自动忽略这些指令，这样就不会报错了！</p>
<p>现在，我们不经过SpringMVC，而是直接用浏览器打开页面看看：</p>
<p> <img src="/images/yufa/1526438337869.png" alt="1526438337869"></p>
<ul>
<li>静态页面中，<code>th</code>指令不被识别，但是浏览器也不会报错，把它当做一个普通属性处理。这样<code>span</code>的默认值<code>请登录</code>就会展现在页面</li>
<li>如果是在Thymeleaf环境下，<code>th</code>指令就会被识别和解析，而<code>th:text</code>的含义就是替<strong>换所在标签中的文本内容</strong>，于是<code>user.name</code>的值就替代了 <code>span</code>中默认的请登录</li>
</ul>
<p>指令的设计，正是Thymeleaf的高明之处，也是它优于其它模板引擎的原因。动静结合的设计，使得无论是前端开发人员还是后端开发人员可以完美契合。</p>
<blockquote>
<p>向下兼容</p>
</blockquote>
<p>但是要注意，如果浏览器不支持Html5怎么办？</p>
<p>如果不支持这种<code>th:</code>的命名空间写法，那么可以把<code>th:text</code>换成 <code>data-th-text</code>，Thymeleaf也可以兼容。</p>
<blockquote>
<p>escape</p>
</blockquote>
<p>另外，<code>th:text</code>指令出于安全考虑，会把表达式读取到的值进行处理，防止html的注入。</p>
<p>例如，<code>&lt;p&gt;你好&lt;/p&gt;</code>将会被格式化输出为<code>$lt;p$gt;你好$lt;/p$lt;</code>。</p>
<p><strong>如果想要不进行格式化输出，而是要输出原始内容，则使用<code>th:utext</code>来代替.</strong></p>
<h3 id="ognl表达式的语法糖"><a href="#ognl表达式的语法糖" class="headerlink" title="ognl表达式的语法糖"></a>ognl表达式的语法糖</h3><p>刚才获取变量值，我们使用的是经典的<code>对象.属性名</code>方式。但有些情况下，我们的属性名可能本身也是变量，怎么办？</p>
<p>ognl提供了类似js的语法方式：</p>
<p>例如：<code>${user.name}</code> 可以写作<code>${user[&#39;name&#39;]}</code></p>
<h2 id="4-2-自定义变量"><a href="#4-2-自定义变量" class="headerlink" title="4.2.自定义变量"></a>4.2.自定义变量</h2><blockquote>
<p>场景</p>
</blockquote>
<p>看下面的案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>friend: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.friend.name&#125;"</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们获取用户的所有信息，分别展示。</p>
<p>当数据量比较多的时候，频繁的写<code>user.</code>就会非常麻烦。</p>
<p>因此，Thymeleaf提供了自定义变量来解决：</p>
<blockquote>
<p>示例：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name&#125;"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;age&#125;"</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>friend: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;friend.name&#125;"</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>首先在 <code>h2</code>上 用 <code>th:object=&quot;${user}&quot;</code>获取user的值，并且保存</li>
<li>然后，在<code>h2</code>内部的任意元素上，可以通过 <code>*{属性名}</code>的方式，来获取user中的属性，这样就省去了大量的<code>user.</code>前缀了</li>
</ul>
<h2 id="4-3-方法"><a href="#4-3-方法" class="headerlink" title="4.3.方法"></a>4.3.方法</h2><blockquote>
<p>ognl表达式中的方法调用</p>
</blockquote>
<p>ognl表达式本身就支持方法调用，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>FirstName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name.split(' ')[0]&#125;"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>LastName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name.split(' ')[1]&#125;"</span>&gt;</span>Li<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里我们调用了name（是一个字符串）的split方法。</li>
</ul>
<blockquote>
<p>Thymeleaf内置对象</p>
</blockquote>
<p>Thymeleaf中提供了一些内置对象，并且在这些对象中提供了一些方法，方便我们来调用。获取这些对象，需要使用<code>#对象名</code>来引用。</p>
<ul>
<li>一些环境相关对象</li>
</ul>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>#ctx</code></td>
<td align="left">获取Thymeleaf自己的Context对象</td>
</tr>
<tr>
<td align="center"><code>#requset</code></td>
<td align="left">如果是web程序，可以获取HttpServletRequest对象</td>
</tr>
<tr>
<td align="center"><code>#response</code></td>
<td align="left">如果是web程序，可以获取HttpServletReponse对象</td>
</tr>
<tr>
<td align="center"><code>#session</code></td>
<td align="left">如果是web程序，可以获取HttpSession对象</td>
</tr>
<tr>
<td align="center"><code>#servletContext</code></td>
<td align="left">如果是web程序，可以获取HttpServletContext对象</td>
</tr>
<tr>
<td align="center"></td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li>Thymeleaf提供的全局对象：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>#dates</code></td>
<td align="left">处理java.util.date的工具对象</td>
</tr>
<tr>
<td align="center"><code>#calendars</code></td>
<td align="left">处理java.util.calendar的工具对象</td>
</tr>
<tr>
<td align="center"><code>#numbers</code></td>
<td align="left">用来对数字格式化的方法</td>
</tr>
<tr>
<td align="center"><code>#strings</code></td>
<td align="left">用来处理字符串的方法</td>
</tr>
<tr>
<td align="center"><code>#bools</code></td>
<td align="left">用来判断布尔值的方法</td>
</tr>
<tr>
<td align="center"><code>#arrays</code></td>
<td align="left">用来护理数组的方法</td>
</tr>
<tr>
<td align="center"><code>#lists</code></td>
<td align="left">用来处理List集合的方法</td>
</tr>
<tr>
<td align="center"><code>#sets</code></td>
<td align="left">用来处理set集合的方法</td>
</tr>
<tr>
<td align="center"><code>#maps</code></td>
<td align="left">用来处理map集合的方法</td>
</tr>
</tbody></table>
<ul>
<li>举例</li>
</ul>
<p>我们在环境变量中添加日期类型对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"show3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show3</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"today"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"show3"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在页面中处理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  今天是: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(today,'yyyy-MM-dd')&#125;"</span>&gt;</span>2018-04-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 效果：</p>
<p> <img src="/images/yufa/1526440538848.png" alt="1526440538848"></p>
<h2 id="4-4-字面值"><a href="#4-4-字面值" class="headerlink" title="4.4 字面值"></a>4.4 字面值</h2><p>有的时候，我们需要在指令中填写基本类型如：字符串、数值、布尔等，并不希望被Thymeleaf解析为变量，这个时候称为字面值。</p>
<ul>
<li><p>字符串字面值</p>
<p>使用一对<code>&#39;</code>引用的内容就是字符串字面值了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  你正在观看 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'thymeleaf'"</span>&gt;</span>template<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的字符串常量值.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>th:text</code>中的thymeleaf并不会被认为是变量，而是一个字符串</p>
<p> <img src="/images/yufa/1526958538157.png" alt="1526958538157"></p>
</li>
<li><p>数字字面值</p>
<p>数字不需要任何特殊语法， 写的什么就是什么，而且可以直接进行算术运算</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>今年是 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2018"</span>&gt;</span>1900<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两年后将会是 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2018 + 2"</span>&gt;</span>1902<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="/images/yufa/1526958856078.png" alt="1526958856078"></p>
</li>
<li><p>布尔字面值</p>
<p>布尔类型的字面值是true或false：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    你填的是true</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里引用了一个<code>th:if</code>指令，跟vue中的<code>v-if</code>类似</p>
</li>
</ul>
<h2 id="4-5-拼接"><a href="#4-5-拼接" class="headerlink" title="4.5 拼接"></a>4.5 拼接</h2><p>我们经常会用到普通字符串与表达式拼接的情况：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'欢迎您:' + $&#123;user.name&#125; + '!'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>字符串字面值需要用<code>&#39;&#39;</code>，拼接起来非常麻烦，Thymeleaf对此进行了简化，使用一对<code>|</code>即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|欢迎您:$&#123;user.name&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>与上面是完全等效的，这样就省去了字符串字面值的书写。</p>
<p> <img src="/images/yufa/1526959781368.png" alt="1526959781368"></p>
<h2 id="4-6-运算"><a href="#4-6-运算" class="headerlink" title="4.6 运算"></a>4.6 运算</h2><p>需要注意：<code>${}</code>内部的是通过OGNL表达式引擎解析的，外部的才是通过Thymeleaf的引擎解析，因此运算符尽量放在<code>${}</code>外进行。</p>
<ul>
<li><p>算术运算</p>
<p>支持的算术运算符：<code>+ - * / %</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;%2 == 0"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="/images/yufa/1526959990356.png" alt="1526959990356"></p>
</li>
<li><p>比较运算</p>
<p>支持的比较运算：<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and <code>&lt;=</code>  ，但是<code>&gt;</code>, <code>&lt;</code>不能直接使用，因为xml会解析为标签，要使用别名。</p>
<p>注意 <code>==</code> and <code>!=</code>不仅可以比较数值，类似于equals的功能。</p>
<p>可以使用的别名：<code>gt (&gt;), lt (&lt;), ge (&gt;=), le (&lt;=), not (!). Also eq (==), neq/ne (!=).</code></p>
</li>
<li><p>条件运算</p>
<ul>
<li>三元运算</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.sex&#125; ? '男':'女'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>三元运算符的三个部分：conditon ? then : else</p>
<pre><code>condition：条件

then：条件成立的结果

else：不成立的结果</code></pre><p>其中的每一个部分都可以是Thymeleaf中的任意表达式。</p>
<p> <img src="/images/yufa/1526960230778.png" alt="1526960230778"></p>
<ul>
<li><p>默认值</p>
<p>有的时候，我们取一个值可能为空，这个时候需要做非空判断，可以使用 <code>表达式 ?: 默认值</code>简写：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125; ?: '二狗'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当前面的表达式值为null时，就会使用后面的默认值。</p>
<p>注意：<code>?:</code>之间没有空格。</p>
<p> <img src="/images/yufa/1526960384564.png" alt="1526960384564"></p>
</li>
</ul>
<h2 id="4-7-循环"><a href="#4-7-循环" class="headerlink" title="4.7 循环"></a>4.7 循环</h2><p>循环也是非常频繁使用的需求，我们使用<code>th:each</code>指令来完成：</p>
<p>假如有用户的集合：users在Context中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>${users} 是要遍历的集合，可以是以下类型：<ul>
<li>Iterable，实现了Iterable接口的类</li>
<li>Enumeration，枚举</li>
<li>Interator，迭代器</li>
<li>Map，遍历得到的是Map.Entry</li>
<li>Array，数组及其它一切符合数组结果的对象</li>
</ul>
</li>
</ul>
<p>在迭代的同时，我们也可以获取迭代的状态对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,stat : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>stat对象包含以下属性：</p>
<ul>
<li>index，从0开始的角标</li>
<li>count，元素的个数，从1开始</li>
<li>size，总元素个数</li>
<li>current，当前遍历到的元素</li>
<li>even/odd，返回是否为奇偶，boolean值</li>
<li>first/last，返回是否为第一或最后，boolean值</li>
</ul>
<h2 id="4-8-逻辑判断"><a href="#4-8-逻辑判断" class="headerlink" title="4.8 逻辑判断"></a>4.8 逻辑判断</h2><p>有了<code>if和else</code>，我们能实现一切功能^_^。</p>
<p>Thymeleaf中使用<code>th:if</code> 或者 <code>th:unless</code> ，两者的意思恰好相反。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.age&#125; &lt; 24"</span>&gt;</span>小鲜肉<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果表达式的值为true，则标签会渲染到页面，否则不进行渲染。</p>
<p>以下情况被认定为true：</p>
<ul>
<li>表达式值为true</li>
<li>表达式值为非0数值</li>
<li>表达式值为非0字符</li>
<li>表达式值为字符串，但不是<code>&quot;false&quot;</code>,<code>&quot;no&quot;</code>,<code>&quot;off&quot;</code></li>
<li>表达式不是布尔、字符串、数字、字符中的任何一种</li>
</ul>
<p>其它情况包括null都被认定为false</p>
<p> <img src="/images/yufa/1526960499522.png" alt="1526960499522"></p>
<h2 id="4-9-分支控制switch"><a href="#4-9-分支控制switch" class="headerlink" title="4.9 分支控制switch"></a>4.9 分支控制switch</h2><p>这里要使用两个指令：<code>th:switch</code> 和 <code>th:case</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>用户是管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'manager'"</span>&gt;</span>用户是经理<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>用户是别的玩意<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，一旦有一个th:case成立，其它的则不再判断。与java中的switch是一样的。</p>
<p>另外<code>th:case=&quot;*&quot;</code>表示默认，放最后。</p>
<p> <img src="/images/yufa/1526960621714.png" alt="1526960621714"></p>
<p>页面：</p>
<p> <img src="/images/yufa/1526961251878.png" alt="1526961251878"></p>
<h2 id="4-10-JS模板"><a href="#4-10-JS模板" class="headerlink" title="4.10.JS模板"></a>4.10.JS模板</h2><p>模板引擎不仅可以渲染html，也可以对JS中的进行预处理。而且为了在纯静态环境下可以运行，其Thymeleaf代码可以被注释起来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> user = <span class="comment">/*[[$&#123;user&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> age = <span class="comment">/*[[$&#123;user.age&#125;]]*/</span> <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(age)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在script标签中通过<code>th:inline=&quot;javascript&quot;</code>来声明这是要特殊处理的js脚本</p>
</li>
<li><p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="comment">/*[[Thymeleaf表达式]]*/</span> <span class="string">"静态环境下的默认值"</span>;</span><br></pre></td></tr></table></figure>

<p>因为Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值。</p>
</li>
</ul>
<p>看看页面的源码：</p>
<p><img src="/images/yufa/1526961583904.png" alt="1526961583904"></p>
<p>我们的User对象被直接处理为json格式了，非常方便。</p>
<p>控制台：</p>
<p> <img src="/images/yufa/1526961525185.png" alt="1526961525185"></p>

    <div id="aplayer-YewGfJxe" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="74265751" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>



]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索过滤</title>
    <url>/2019/12/16/day13-%E6%90%9C%E7%B4%A2%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>了解过滤功能的基本思路</li>
<li>实现分类和品牌展示</li>
<li>了解规格参数展示</li>
<li>实现过滤条件筛选</li>
<li>实现已选过滤项回显</li>
<li>实现取消选择过滤项</li>
</ul>
<a id="more"></a>
<h1 id="1-过滤功能分析"><a href="#1-过滤功能分析" class="headerlink" title="1.过滤功能分析"></a>1.过滤功能分析</h1><p>首先看下页面要实现的效果：</p>
<p><img src="/images/day13/1526725119663.png" alt="1526725119663"></p>
<p>整个过滤部分有3块：</p>
<ul>
<li>顶部的导航，已经选择的过滤条件展示：<ul>
<li>商品分类面包屑，根据用户选择的商品分类变化</li>
<li>其它已选择过滤参数</li>
</ul>
</li>
<li>过滤条件展示，又包含3部分<ul>
<li>商品分类展示</li>
<li>品牌展示</li>
<li>其它规格参数</li>
</ul>
</li>
<li>展开或收起的过滤条件的按钮</li>
</ul>
<p>顶部导航要展示的内容跟用户选择的过滤条件有关。</p>
<ul>
<li>比如用户选择了某个商品分类，则面包屑中才会展示具体的分类</li>
<li>比如用户选择了某个品牌，列表中才会有品牌信息。</li>
</ul>
<p>所以，这部分需要依赖第二部分：过滤条件的展示和选择。因此我们先不着急去做。</p>
<p>展开或收起的按钮是否显示，取决于过滤条件有多少，如果很少，那么就没必要展示。所以也是跟第二部分的过滤条件有关。</p>
<p>这样分析来看，我们必须先做第二部分：过滤条件展示。</p>
<h1 id="2-生成分类和品牌过滤"><a href="#2-生成分类和品牌过滤" class="headerlink" title="2.生成分类和品牌过滤"></a>2.生成分类和品牌过滤</h1><p>先来看分类和品牌。在我们的数据库中已经有所有的分类和品牌信息。在这个位置，是不是把所有的分类和品牌信息都展示出来呢？</p>
<p>显然不是，用户搜索的条件会对商品进行过滤，而在搜索结果中，不一定包含所有的分类和品牌，直接展示出所有商品分类，让用户选择显然是不合适的。</p>
<p>无论是分类信息，还是品牌信息，都应该从搜索的结果商品中进行聚合得到。</p>
<h2 id="2-1-扩展返回的结果"><a href="#2-1-扩展返回的结果" class="headerlink" title="2.1.扩展返回的结果"></a>2.1.扩展返回的结果</h2><p>原来，我们返回的结果是PageResult对象，里面只有total、totalPage、items3个属性。但是现在要对商品分类和品牌进行聚合，数据显然不够用，我们需要对返回的结果进行扩展，添加分类和品牌的数据。</p>
<p>那么问题来了：以什么格式返回呢？</p>
<p>看页面：</p>
<p> <img src="/images/day13/1526738120021.png" alt="1526738120021"></p>
<p>分类：页面显示了分类名称，但背后肯定要保存id信息。所以至少要有id和name</p>
<p>品牌：页面展示的有logo，有文字，当然肯定有id，基本上是品牌的完整数据</p>
<p>我们新建一个类，继承PageResult，然后扩展两个新的属性：分类集合和品牌集合：</p>
<p> <img src="/images/day13/1543671901773.png" alt="1543671901773"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> <span class="keyword">extends</span> <span class="title">PageResult</span>&lt;<span class="title">Goods</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; categories;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Brand&gt; brands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; categories, List&lt;Brand&gt; brands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(List&lt;Goods&gt; items, Long total, List&lt;Map&lt;String, Object&gt;&gt; categories, List&lt;Brand&gt; brands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(items, total);</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(List&lt;Goods&gt; items, Long total, Integer totalPage, List&lt;Map&lt;String, Object&gt;&gt; categories, List&lt;Brand&gt; brands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(items, total, totalPage);</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getCategories() &#123;</span><br><span class="line">        <span class="keyword">return</span> categories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategories</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; categories)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">getBrands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrands</span><span class="params">(List&lt;Brand&gt; brands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-聚合商品分类和品牌"><a href="#2-2-聚合商品分类和品牌" class="headerlink" title="2.2.聚合商品分类和品牌"></a>2.2.聚合商品分类和品牌</h2><p>我们修改搜索的业务逻辑，对分类和品牌聚合。</p>
<p>因为索引库中只有id，所以我们根据id聚合，然后再根据id去查询完整数据。</p>
<p>所以，商品微服务需要提供一个接口：根据品牌id集合，批量查询品牌。</p>
<p>修改SearchService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SearchResult <span class="title">search</span><span class="params">(SearchRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断查询条件</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(request.getKey())) &#123;</span><br><span class="line">        <span class="comment">// 返回默认结果集</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化自定义查询构建器</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加查询条件</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">"all"</span>, request.getKey()).operator(Operator.AND));</span><br><span class="line">    <span class="comment">// 添加结果集过滤，只需要：id,subTitle, skus</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>, <span class="string">"subTitle"</span>, <span class="string">"skus"</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取分页参数</span></span><br><span class="line">    Integer page = request.getPage();</span><br><span class="line">    Integer size = request.getSize();</span><br><span class="line">    <span class="comment">// 添加分页</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(page - <span class="number">1</span>, size));</span><br><span class="line"></span><br><span class="line">    String categoryAggName = <span class="string">"categories"</span>;</span><br><span class="line">    String brandAggName = <span class="string">"brands"</span>;</span><br><span class="line">    queryBuilder.addAggregation(AggregationBuilders.terms(categoryAggName).field(<span class="string">"cid3"</span>));</span><br><span class="line">    queryBuilder.addAggregation(AggregationBuilders.terms(brandAggName).field(<span class="string">"brandId"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取搜索的结果集</span></span><br><span class="line">    AggregatedPage&lt;Goods&gt; goodsPage = (AggregatedPage&lt;Goods&gt;)<span class="keyword">this</span>.goodsReponsitory.search(queryBuilder.build());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析聚合结果集</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; categories = getCategoryAggResult(goodsPage.getAggregation(categoryAggName));</span><br><span class="line">    List&lt;Brand&gt; brands = getBrandAggResult(goodsPage.getAggregation(brandAggName));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装成需要的返回结果集</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SearchResult(goodsPage.getContent(), goodsPage.getTotalElements(), goodsPage.getTotalPages(), categories, brands);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析品牌聚合结果集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aggregation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Brand&gt; <span class="title">getBrandAggResult</span><span class="params">(Aggregation aggregation)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理聚合结果集</span></span><br><span class="line">    LongTerms terms = (LongTerms)aggregation;</span><br><span class="line">    <span class="comment">// 获取所有的品牌id桶</span></span><br><span class="line">    List&lt;LongTerms.Bucket&gt; buckets = terms.getBuckets();</span><br><span class="line">    <span class="comment">// 定义一个品牌集合，搜集所有的品牌对象</span></span><br><span class="line">    List&lt;Brand&gt; brands = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 解析所有的id桶，查询品牌</span></span><br><span class="line">    buckets.forEach(bucket -&gt; &#123;</span><br><span class="line">        Brand brand = <span class="keyword">this</span>.brandClient.queryBrandById(bucket.getKeyAsNumber().longValue());</span><br><span class="line">        brands.add(brand);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> brands;</span><br><span class="line">    <span class="comment">// 解析聚合结果集中的桶，把桶的集合转化成id的集合</span></span><br><span class="line">    <span class="comment">// List&lt;Long&gt; brandIds = terms.getBuckets().stream().map(bucket -&gt; bucket.getKeyAsNumber().longValue()).collect(Collectors.toList());</span></span><br><span class="line">    <span class="comment">// 根据ids查询品牌</span></span><br><span class="line">    <span class="comment">//return brandIds.stream().map(id -&gt; this.brandClient.queryBrandById(id)).collect(Collectors.toList());</span></span><br><span class="line">    <span class="comment">// return terms.getBuckets().stream().map(bucket -&gt; this.brandClient.queryBrandById(bucket.getKeyAsNumber().longValue())).collect(Collectors.toList());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aggregation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; getCategoryAggResult(Aggregation aggregation) &#123;</span><br><span class="line">    <span class="comment">// 处理聚合结果集</span></span><br><span class="line">    LongTerms terms = (LongTerms)aggregation;</span><br><span class="line">    <span class="comment">// 获取所有的分类id桶</span></span><br><span class="line">    List&lt;LongTerms.Bucket&gt; buckets = terms.getBuckets();</span><br><span class="line">    <span class="comment">// 定义一个品牌集合，搜集所有的品牌对象</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; categories = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Long&gt; cids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 解析所有的id桶，查询品牌</span></span><br><span class="line">    buckets.forEach(bucket -&gt; &#123;</span><br><span class="line">        cids.add(bucket.getKeyAsNumber().longValue());</span><br><span class="line">    &#125;);</span><br><span class="line">    List&lt;String&gt; names = <span class="keyword">this</span>.categoryClient.queryNamesByIds(cids);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cids.size(); i++) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"id"</span>, cids.get(i));</span><br><span class="line">        map.put(<span class="string">"name"</span>, names.get(i));</span><br><span class="line">        categories.add(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> categories;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="/images/day13/1532259453938.png" alt="1532259453938"></p>
<h2 id="2-3-页面渲染数据"><a href="#2-3-页面渲染数据" class="headerlink" title="2.3.页面渲染数据"></a>2.3.页面渲染数据</h2><h3 id="2-3-1-过滤参数数据结构"><a href="#2-3-1-过滤参数数据结构" class="headerlink" title="2.3.1.过滤参数数据结构"></a>2.3.1.过滤参数数据结构</h3><p>来看下页面的展示效果：</p>
<p> <img src="/images/day13/1526742664217.png" alt="1526742664217"></p>
<p>虽然分类、品牌内容都不太一样，但是结构相似，都是key和value的结构。</p>
<p>而且页面结构也极为类似：</p>
<p> <img src="/images/day13/1526742817804.png" alt="1526742817804"></p>
<p>所以，我们可以把所有的过滤条件放入一个<code>数组</code>中，然后在页面利用<code>v-for</code>遍历一次生成。</p>
<p>其基本结构是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        k:<span class="string">"过滤字段名"</span>,</span><br><span class="line">        options:[&#123;<span class="comment">/*过滤字段值对象*/</span>&#125;,&#123;<span class="comment">/*过滤字段值对象*/</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>我们先在data中定义数组：filters，等待组装过滤参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    ly,</span><br><span class="line">    search:&#123;</span><br><span class="line">        key: <span class="string">""</span>,</span><br><span class="line">        page: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    goodsList:[], <span class="comment">// 接收搜索得到的结果</span></span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">    totalPage: <span class="number">0</span>, <span class="comment">// 总页数</span></span><br><span class="line">    filters:[] <span class="comment">// 过滤参数集合</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>然后在查询搜索结果的回调函数中，对过滤参数进行封装：</p>
<p><img src="/images/day13/1532261937404.png" alt="1532261937404"></p>
<p>然后刷新页面，通过浏览器工具，查看封装的结果：</p>
<p><img src="/images/day13/1532260781128.png" alt="1532260781128"></p>
<h3 id="2-3-2-页面渲染数据"><a href="#2-3-2-页面渲染数据" class="headerlink" title="2.3.2.页面渲染数据"></a>2.3.2.页面渲染数据</h3><p>首先看页面原来的代码：</p>
<p> <img src="/images/day13/1526803362517.png" alt="1526803362517"></p>
<p>我们注意到，虽然页面元素是一样的，但是品牌会比其它搜索条件多出一些样式，因为品牌是以图片展示。需要进行特殊处理。数据展示是一致的，我们采用v-for处理：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"type-wrap"</span> <span class="attr">v-for</span>=<span class="string">"(f,i) in filters"</span> <span class="attr">:key</span>=<span class="string">"i"</span> <span class="attr">v-if</span>=<span class="string">"f.k !== '品牌'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl key"</span>&gt;</span>&#123;&#123;f.k&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl value"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"type-list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(option, j) in f.options"</span> <span class="attr">:key</span>=<span class="string">"j"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;&#123;option.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl ext"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"type-wrap logo"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl key brand"</span>&gt;</span>&#123;&#123;f.k&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"value logos"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"logo-list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(option, j) in f.options"</span> <span class="attr">v-if</span>=<span class="string">"option.image"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"option.image"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"line-height: 30px; font-size: 12px"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;option.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl ext"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"sui-btn"</span>&gt;</span>多选<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/day13/1532264524663.png" alt="1532264524663"></p>
<h1 id="3-生成规格参数过滤"><a href="#3-生成规格参数过滤" class="headerlink" title="3.生成规格参数过滤"></a>3.生成规格参数过滤</h1><h2 id="3-1-谋而后动"><a href="#3-1-谋而后动" class="headerlink" title="3.1.谋而后动"></a>3.1.谋而后动</h2><p>有四个问题需要先思考清楚：</p>
<ul>
<li>什么时候显示规格参数过滤？ 分类只有一个</li>
<li>如何知道哪些规格需要过滤？ </li>
<li>要过滤的参数，其可选值是如何获取的？ </li>
<li>规格过滤的可选值，其数据格式怎样的？</li>
</ul>
<blockquote>
<p>什么情况下显示有关规格参数的过滤？</p>
</blockquote>
<p>如果用户尚未选择商品分类，或者聚合得到的分类数大于1，那么就没必要进行规格参数的聚合。因为不同分类的商品，其规格是不同的。</p>
<p>因此，我们在后台<strong>需要对聚合得到的商品分类数量进行判断，如果等于1，我们才继续进行规格参数的聚合</strong>。</p>
<blockquote>
<p>如何知道哪些规格需要过滤？</p>
</blockquote>
<p>我们不能把数据库中的所有规格参数都拿来过滤。因为并不是所有的规格参数都可以用来过滤，参数的值是不确定的。</p>
<p>值的庆幸的是，我们在设计规格参数时，已经标记了某些规格可搜索，某些不可搜索。</p>
<p>因此，一旦商品分类确定，我们就可以根据商品分类查询到其对应的规格，从而知道哪些规格要进行搜索。</p>
<blockquote>
<p>要过滤的参数，其可选值是如何获取的？</p>
</blockquote>
<p>虽然数据库中有所有的规格参数，但是不能把一切数据都用来供用户选择。</p>
<p>与商品分类和品牌一样，应该是从用户搜索得到的结果中聚合，得到与结果品牌的规格参数可选值。</p>
<blockquote>
<p>规格过滤的可选值，其数据格式怎样的？</p>
</blockquote>
<p>我们直接看页面效果：</p>
<p><img src="/images/day13/1526805322441.png" alt="1526805322441"></p>
<p>我们之前存储时已经将数据分段，恰好符合这里的需求</p>
<h2 id="3-2-实战"><a href="#3-2-实战" class="headerlink" title="3.2.实战"></a>3.2.实战</h2><p>接下来，我们就用代码实现刚才的思路。</p>
<p>总结一下，应该是以下几步：</p>
<ul>
<li>1）用户搜索得到商品，并聚合出商品分类</li>
<li>2）判断分类数量是否等于1，如果是则进行规格参数聚合</li>
<li>3）先根据分类，查找可以用来搜索的规格</li>
<li>4）对规格参数进行聚合</li>
<li>5）将规格参数聚合结果整理后返回</li>
</ul>
<h3 id="3-2-1-扩展返回结果"><a href="#3-2-1-扩展返回结果" class="headerlink" title="3.2.1.扩展返回结果"></a>3.2.1.扩展返回结果</h3><p>返回结果中需要增加新数据，用来保存规格参数过滤条件。这里与前面的品牌和分类过滤的json结构类似：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"k"</span>:<span class="string">"规格参数名"</span>,</span><br><span class="line">        <span class="attr">"options"</span>:[<span class="string">"规格参数值"</span>,<span class="string">"规格参数值"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>因此，在java中我们用List&lt;Map&lt;String, Object&gt;&gt;来表示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> <span class="keyword">extends</span> <span class="title">PageResult</span>&lt;<span class="title">Goods</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; categories;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Brand&gt; brands;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; specs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; categories, List&lt;Brand&gt; brands, List&lt;Map&lt;String, Object&gt;&gt; specs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">        <span class="keyword">this</span>.specs = specs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(List&lt;Goods&gt; items, Long total, List&lt;Map&lt;String, Object&gt;&gt; categories, List&lt;Brand&gt; brands, List&lt;Map&lt;String, Object&gt;&gt; specs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(items, total);</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">        <span class="keyword">this</span>.specs = specs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(List&lt;Goods&gt; items, Long total, Integer totalPage, List&lt;Map&lt;String, Object&gt;&gt; categories, List&lt;Brand&gt; brands, List&lt;Map&lt;String, Object&gt;&gt; specs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(items, total, totalPage);</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">        <span class="keyword">this</span>.specs = specs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getCategories() &#123;</span><br><span class="line">        <span class="keyword">return</span> categories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategories</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; categories)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">getBrands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrands</span><span class="params">(List&lt;Brand&gt; brands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getSpecs() &#123;</span><br><span class="line">        <span class="keyword">return</span> specs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecs</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; specs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.specs = specs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-判断是否需要聚合"><a href="#3-2-2-判断是否需要聚合" class="headerlink" title="3.2.2.判断是否需要聚合"></a>3.2.2.判断是否需要聚合</h3><p>首先，在聚合得到商品分类后，判断分类的个数，如果是1个则进行规格聚合：</p>
<p><img src="/images/day13/1543673893654.png" alt="1543673893654"></p>
<p><img src="/images/day13/1543673960091.png" alt="1543673960091"></p>
<p>我们将聚合的代码抽取到了一个<code>getParamAggResult</code>方法中。</p>
<h3 id="3-2-3-获取需要聚合的规格参数"><a href="#3-2-3-获取需要聚合的规格参数" class="headerlink" title="3.2.3.获取需要聚合的规格参数"></a>3.2.3.获取需要聚合的规格参数</h3><p>然后，我们需要根据商品分类，查询所有可用于搜索的规格参数：</p>
<p><img src="/images/day13/1543674113503.png" alt="1543674113503"></p>
<p>要注意的是，这里我们需要根据分类id查询规格，而规格参数接口需要从商品微服务提供</p>
<h3 id="3-2-4-聚合规格参数"><a href="#3-2-4-聚合规格参数" class="headerlink" title="3.2.4.聚合规格参数"></a>3.2.4.聚合规格参数</h3><p>因为规格参数保存时不做分词，因此其名称会自动带上一个.keyword后缀：</p>
<p><img src="/images/day13/1543674179820.png" alt="1543674179820"></p>
<h3 id="3-2-5-解析聚合结果"><a href="#3-2-5-解析聚合结果" class="headerlink" title="3.2.5.解析聚合结果"></a>3.2.5.解析聚合结果</h3><p><img src="/images/day13/1543674250920.png" alt="1543674250920"></p>
<h3 id="3-2-6-最终的完整代码"><a href="#3-2-6-最终的完整代码" class="headerlink" title="3.2.6.最终的完整代码"></a>3.2.6.最终的完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SearchResult <span class="title">search</span><span class="params">(SearchRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断查询条件</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(request.getKey())) &#123;</span><br><span class="line">        <span class="comment">// 返回默认结果集</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化自定义查询构建器</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加查询条件</span></span><br><span class="line">    MatchQueryBuilder basicQuery = QueryBuilders.matchQuery(<span class="string">"all"</span>, request.getKey()).operator(Operator.AND);</span><br><span class="line">    queryBuilder.withQuery(basicQuery);</span><br><span class="line">    <span class="comment">// 添加结果集过滤，只需要：id,subTitle, skus</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>, <span class="string">"subTitle"</span>, <span class="string">"skus"</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取分页参数</span></span><br><span class="line">    Integer page = request.getPage();</span><br><span class="line">    Integer size = request.getSize();</span><br><span class="line">    <span class="comment">// 添加分页</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(page - <span class="number">1</span>, size));</span><br><span class="line"></span><br><span class="line">    String categoryAggName = <span class="string">"categories"</span>;</span><br><span class="line">    String brandAggName = <span class="string">"brands"</span>;</span><br><span class="line">    queryBuilder.addAggregation(AggregationBuilders.terms(categoryAggName).field(<span class="string">"cid3"</span>));</span><br><span class="line">    queryBuilder.addAggregation(AggregationBuilders.terms(brandAggName).field(<span class="string">"brandId"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取搜索的结果集</span></span><br><span class="line">    AggregatedPage&lt;Goods&gt; goodsPage = (AggregatedPage&lt;Goods&gt;)<span class="keyword">this</span>.goodsReponsitory.search(queryBuilder.build());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析聚合结果集</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; categories = getCategoryAggResult(goodsPage.getAggregation(categoryAggName));</span><br><span class="line">    List&lt;Brand&gt; brands = getBrandAggResult(goodsPage.getAggregation(brandAggName));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断分类聚合的结果集大小，等于1则聚合</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; specs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (categories.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        specs = getParamAggResult((Long)categories.get(<span class="number">0</span>).get(<span class="string">"id"</span>), basicQuery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装成需要的返回结果集</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SearchResult(goodsPage.getContent(), goodsPage.getTotalElements(), goodsPage.getTotalPages(), categories, brands, specs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合出规格参数过滤条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basicQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; getParamAggResult(Long id, QueryBuilder basicQuery) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建自定义查询构建器</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 基于基本的查询条件，聚合规格参数</span></span><br><span class="line">    queryBuilder.withQuery(basicQuery);</span><br><span class="line">    <span class="comment">// 查询要聚合的规格参数</span></span><br><span class="line">    List&lt;SpecParam&gt; params = <span class="keyword">this</span>.specificationClient.queryParams(<span class="keyword">null</span>, id, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 添加聚合</span></span><br><span class="line">    params.forEach(param -&gt; &#123;</span><br><span class="line">        queryBuilder.addAggregation(AggregationBuilders.terms(param.getName()).field(<span class="string">"specs."</span> + param.getName() + <span class="string">".keyword"</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 只需要聚合结果集，不需要查询结果集</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;&#125;, <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行聚合查询</span></span><br><span class="line">    AggregatedPage&lt;Goods&gt; goodsPage = (AggregatedPage&lt;Goods&gt;)<span class="keyword">this</span>.goodsReponsitory.search(queryBuilder.build());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个集合，收集聚合结果集</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; paramMapList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 解析聚合查询的结果集</span></span><br><span class="line">    Map&lt;String, Aggregation&gt; aggregationMap = goodsPage.getAggregations().asMap();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Aggregation&gt; entry : aggregationMap.entrySet()) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 放入规格参数名</span></span><br><span class="line">        map.put(<span class="string">"k"</span>, entry.getKey());</span><br><span class="line">        <span class="comment">// 收集规格参数值</span></span><br><span class="line">        List&lt;Object&gt; options = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 解析每个聚合</span></span><br><span class="line">        StringTerms terms = (StringTerms)entry.getValue();</span><br><span class="line">        <span class="comment">// 遍历每个聚合中桶，把桶中key放入收集规格参数的集合中</span></span><br><span class="line">        terms.getBuckets().forEach(bucket -&gt; options.add(bucket.getKeyAsString()));</span><br><span class="line">        map.put(<span class="string">"options"</span>, options);</span><br><span class="line">        paramMapList.add(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paramMapList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-7-测试结果"><a href="#3-2-7-测试结果" class="headerlink" title="3.2.7.测试结果"></a>3.2.7.测试结果</h3><p><img src="/images/day13/1532270167684.png" alt="1532270167684"></p>
<h2 id="3-3-页面渲染"><a href="#3-3-页面渲染" class="headerlink" title="3.3.页面渲染"></a>3.3.页面渲染</h2><h3 id="3-3-1-渲染规格过滤条件"><a href="#3-3-1-渲染规格过滤条件" class="headerlink" title="3.3.1.渲染规格过滤条件"></a>3.3.1.渲染规格过滤条件</h3><p>首先把后台传递过来的specs添加到filters数组：</p>
<p>要注意：分类、品牌的option选项是对象，里面有name属性，而specs中的option是简单的字符串，所以需要进行封装，变为相同的结构：</p>
<p><img src="/images/day13/1532271319440.png" alt="1532271319440"></p>
<p>最后的结果：</p>
<p><img src="/images/day13/1526836508277.png" alt="1526836508277"></p>
<h3 id="3-3-2-展示或收起过滤条件"><a href="#3-3-2-展示或收起过滤条件" class="headerlink" title="3.3.2.展示或收起过滤条件"></a>3.3.2.展示或收起过滤条件</h3><p>是不是感觉显示的太多了，我们可以通过按钮点击来展开和隐藏部分内容：</p>
<p><img src="/images/day13/1532271362148.png" alt="1532271362148"></p>
<p>我们在data中定义变量，记录展开或隐藏的状态：</p>
<p><img src="/images/day13/1532271577293.png" alt="1532271577293"></p>
<p>然后在按钮绑定点击事件，以改变show的取值：</p>
<p><img src="/images/day13/1532272309322.png" alt="1532272309322"></p>
<p>在展示规格时，对show进行判断：</p>
<p><img src="/images/day13/1532272262743.png" alt="1532272262743"></p>
<p>OK！</p>
<h1 id="4-过滤条件的筛选"><a href="#4-过滤条件的筛选" class="headerlink" title="4.过滤条件的筛选"></a>4.过滤条件的筛选</h1><p>当我们点击页面的过滤项，要做哪些事情？</p>
<ul>
<li>把过滤条件保存在search对象中（watch监控到search变化后就会发送到后台）</li>
<li>在页面顶部展示已选择的过滤项</li>
<li>把商品分类展示到顶部面包屑</li>
</ul>
<h2 id="4-1-保存过滤项"><a href="#4-1-保存过滤项" class="headerlink" title="4.1.保存过滤项"></a>4.1.保存过滤项</h2><h3 id="4-1-1-定义属性"><a href="#4-1-1-定义属性" class="headerlink" title="4.1.1.定义属性"></a>4.1.1.定义属性</h3><p>我们把已选择的过滤项保存在search中：</p>
<p><img src="/images/day13/1532273487583.png" alt="1532273487583"></p>
<p>要注意，在created构造函数中会对search进行初始化，所以要在构造函数中对filter进行初始化：</p>
<p><img src="/images/day13/1533566768364.png" alt="1533566768364"></p>
<p>search.filter是一个对象，结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"过滤项名"</span>:<span class="string">"过滤项值"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-2-绑定点击事件"><a href="#4-1-2-绑定点击事件" class="headerlink" title="4.1.2.绑定点击事件"></a>4.1.2.绑定点击事件</h3><p>给所有的过滤项绑定点击事件：</p>
<p><img src="/images/day13/1532272879418.png" alt="1532272879418"></p>
<p>要注意，点击事件传2个参数：</p>
<ul>
<li>k：过滤项的key</li>
<li>option：当前过滤项对象</li>
</ul>
<p>在点击事件中，保存过滤项到<code>selectedFilter</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selectFilter(k, o)&#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.assign(obj, <span class="keyword">this</span>.search);</span><br><span class="line">    <span class="keyword">if</span>(k === <span class="string">'分类'</span> || k === <span class="string">'品牌'</span>)&#123;</span><br><span class="line">        o = o.id;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.filter[k] = o.name || o;</span><br><span class="line">    <span class="keyword">this</span>.search = obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，这里search对象中嵌套了filter对象，请求参数格式化时需要进行特殊处理，修改common.js中的一段代码：</p>
<p><img src="/images/day13/1532273144046.png" alt="1532273144046"></p>
<p>我们刷新页面，点击后通过浏览器功能查看<code>search.filter</code>的属性变化：</p>
<p><img src="/images/day13/1532274670784.png" alt="1532274670784"></p>
<p>并且，此时浏览器地址也发生了变化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://www.leyou.com/search.html?key=%E6%89%8B%E6%9C%BA&amp;page=1&amp;filter.%E5%93%81%E7%89%8C=2032&amp;filter.CPU%E5%93%81%E7%89%8C=%E6%B5%B7%E6%80%9D%EF%BC%88Hisilicon%EF%BC%89&amp;filter.CPU%E6%A0%B8%E6%95%B0=%E5%8D%81%E6%A0%B8</span><br></pre></td></tr></table></figure>

<p>网络请求也正常发出：</p>
<p><img src="/images/day13/1532274821104.png" alt="1532274821104"></p>
<h2 id="4-2-后台添加过滤条件"><a href="#4-2-后台添加过滤条件" class="headerlink" title="4.2.后台添加过滤条件"></a>4.2.后台添加过滤条件</h2><p>既然请求已经发送到了后台，那接下来我们就在后台去添加这些条件：</p>
<h3 id="4-2-1-拓展请求对象"><a href="#4-2-1-拓展请求对象" class="headerlink" title="4.2.1.拓展请求对象"></a>4.2.1.拓展请求对象</h3><p>我们需要在请求类：<code>SearchRequest</code>中添加属性，接收过滤属性。过滤属性都是键值对格式，但是key不确定，所以用一个map来接收即可。</p>
<p> <img src="/images/day13/1526910290497.png" alt="1526910290497"></p>
<h3 id="4-2-2-添加过滤条件"><a href="#4-2-2-添加过滤条件" class="headerlink" title="4.2.2.添加过滤条件"></a>4.2.2.添加过滤条件</h3><p>目前，我们的基本查询是这样的：</p>
<p><img src="/images/day13/1533567897849.png" alt="1533567897849"></p>
<p>现在，我们要把页面传递的过滤条件也加入进去。</p>
<p>因此不能在使用普通的查询，而是要用到BooleanQuery，基本结构是这样的：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        	"must":&#123; "match": &#123; "title": "小米手机",operator:"and"&#125;&#125;,</span><br><span class="line">        	"filter":&#123;</span><br><span class="line">                "range":&#123;"price":&#123;"gt":2000.00,"lt":3800.00&#125;&#125;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，我们对原来的基本查询进行改造：（SearchService中的search方法）</p>
<p><img src="/images/day13/1543674461682.png" alt="1543674461682"></p>
<p><img src="/images/day13/1543674644998.png" alt="1543674644998"></p>
<p>因为比较复杂，我们将其封装到一个方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建bool查询构建器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> BoolQueryBuilder <span class="title">buildBooleanQueryBuilder</span><span class="params">(SearchRequest request)</span> </span>&#123;</span><br><span class="line">    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加基本查询条件</span></span><br><span class="line">    boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="string">"all"</span>, request.getKey()).operator(Operator.AND));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加过滤条件</span></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(request.getFilter()))&#123;</span><br><span class="line">        <span class="keyword">return</span> boolQueryBuilder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : request.getFilter().entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">        String key = entry.getKey();</span><br><span class="line">        <span class="comment">// 如果过滤条件是“品牌”, 过滤的字段名：brandId</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(<span class="string">"品牌"</span>, key)) &#123;</span><br><span class="line">            key = <span class="string">"brandId"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.equals(<span class="string">"分类"</span>, key)) &#123;</span><br><span class="line">            <span class="comment">// 如果是“分类”，过滤字段名：cid3</span></span><br><span class="line">            key = <span class="string">"cid3"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是规格参数名，过滤字段名：specs.key.keyword</span></span><br><span class="line">            key = <span class="string">"specs."</span> + key + <span class="string">".keyword"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        boolQueryBuilder.filter(QueryBuilders.termQuery(key, entry.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> boolQueryBuilder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它不变。</p>
<h2 id="4-3-页面测试"><a href="#4-3-页面测试" class="headerlink" title="4.3.页面测试"></a>4.3.页面测试</h2><p>我们先不点击过滤条件，直接搜索手机：</p>
<p> <img src="/images/day13/1526910966728.png" alt="1526910966728"></p>
<p>总共184条</p>
<p>接下来，我们点击一个过滤条件：</p>
<p> <img src="/images/day13/1526911057839.png" alt="1526911057839"></p>
<p>得到的结果：</p>
<p> <img src="/images/day13/1526911090064.png" alt="1526911090064"></p>
<h1 id="5-页面展示选择的过滤项-作业"><a href="#5-页面展示选择的过滤项-作业" class="headerlink" title="5.页面展示选择的过滤项(作业)"></a>5.页面展示选择的过滤项(作业)</h1><h2 id="5-1-商品分类面包屑"><a href="#5-1-商品分类面包屑" class="headerlink" title="5.1.商品分类面包屑"></a>5.1.商品分类面包屑</h2><p>当用户选择一个商品分类以后，我们应该在过滤模块的上方展示一个面包屑，把三级商品分类都显示出来。</p>
<p> <img src="/images/day13/1526912181355.png" alt="1526912181355"></p>
<p>用户选择的商品分类就存放在<code>search.filter</code>中，但是里面只有第三级分类的id：cid3</p>
<p>我们需要根据它查询出所有三级分类的id及名称</p>
<h3 id="5-1-1-提供查询分类接口"><a href="#5-1-1-提供查询分类接口" class="headerlink" title="5.1.1.提供查询分类接口"></a>5.1.1.提供查询分类接口</h3><p>我们在商品微服务中提供一个根据三级分类id查询1~3级分类集合的方法：</p>
<blockquote>
<p>Controller</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据3级分类id，查询1~3级的分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"all/level"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Category&gt;&gt; queryAllByCid3(<span class="meta">@RequestParam</span>(<span class="string">"id"</span>) Long id)&#123;</span><br><span class="line">    List&lt;Category&gt; list = <span class="keyword">this</span>.categoryService.queryAllByCid3(id);</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Service</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryAllByCid3</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    Category c3 = <span class="keyword">this</span>.categoryMapper.selectByPrimaryKey(id);</span><br><span class="line">    Category c2 = <span class="keyword">this</span>.categoryMapper.selectByPrimaryKey(c3.getParentId());</span><br><span class="line">    Category c1 = <span class="keyword">this</span>.categoryMapper.selectByPrimaryKey(c2.getParentId());</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(c1,c2,c3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p> <img src="/images/day13/1526912781014.png" alt="1526912781014"></p>
<h3 id="5-1-2-页面展示面包屑"><a href="#5-1-2-页面展示面包屑" class="headerlink" title="5.1.2.页面展示面包屑"></a>5.1.2.页面展示面包屑</h3><p>后台提供了接口，下面的问题是，我们在哪里去查询接口？</p>
<p>大家首先想到的肯定是当用户点击以后。</p>
<p>但是我们思考一下：用户点击以后，就会重新发起请求，页面刷新，那么你渲染的结果就没了。</p>
<p>因此，应该是在页面重新加载完毕后，此时因为过滤条件中加入了商品分类的条件，所以查询的结果中只有1个分类。</p>
<p>我们判断商品分类是否只有1个，如果是，则查询三级商品分类，添加到面包屑即可。</p>
<p><img src="/images/day13/1526914910479.png" alt="1526914910479"></p>
<p>渲染：</p>
<p> <img src="/images/day13/1528416823546.png" alt="1528416823546"></p>
<p>刷新页面：</p>
<p> <img src="/images/day13/1526914954839.png" alt="1526914954839"></p>
<h2 id="5-2-其它过滤项"><a href="#5-2-其它过滤项" class="headerlink" title="5.2.其它过滤项"></a>5.2.其它过滤项</h2><p>接下来，我们需要在页面展示用户已选择的过滤项，如图：</p>
<p><img src="/images/day13/1526911364625.png" alt="1526911364625"></p>
<p>我们知道，所有已选择过滤项都保存在<code>search.filter</code>中，因此在页面遍历并展示即可。</p>
<p>但这里有个问题，filter中数据的格式：</p>
<p> <img src="/images/day13/1526911311273.png" alt="1526911311273"></p>
<p>基本有四类数据：</p>
<ul>
<li>商品分类：这个不需要展示，分类展示在面包屑位置</li>
<li>品牌：这个要展示，但是其key和值不合适，我们不能显示一个id在页面。需要找到其name值</li>
<li>数值类型规格：这个展示的时候，需要把单位查询出来</li>
<li>非数值类型规格：这个直接展示其值即可</li>
</ul>
<p>因此，我们在页面上这样处理：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--已选择过滤项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tags-choose"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tag"</span> <span class="attr">v-for</span>=<span class="string">"(v,k) in search.filter"</span> <span class="attr">v-if</span>=<span class="string">"k !== 'cid3'"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span></span><br><span class="line">        &#123;&#123;k === 'brandId' ? '品牌' : k&#125;&#125;:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123;getFilterValue(k,v)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"sui-icon icon-tb-close"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>判断如果 <code>k === &#39;cid3&#39;</code>说明是商品分类，直接忽略</li>
<li>判断<code>k === &#39;brandId&#39;</code>说明是品牌，页面显示品牌，其它规格则直接显示<code>k</code>的值</li>
<li>值的处理比较复杂，我们用一个方法<code>getFilterValue(k,v)</code>来处理，调用时把<code>k</code>和<code>v</code>都传递</li>
</ul>
<p>方法内部：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getFilterValue(k,v)&#123;</span><br><span class="line">    <span class="comment">// 如果没有过滤参数，我们跳过展示</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.filters || <span class="keyword">this</span>.filters.length === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> filter = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 判断是否是品牌</span></span><br><span class="line">    <span class="keyword">if</span>(k === <span class="string">'brandId'</span>)&#123;</span><br><span class="line">        <span class="comment">// 返回品牌名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.filters.find(<span class="function"><span class="params">f</span> =&gt;</span> f.k === <span class="string">'brandId'</span>).options[<span class="number">0</span>].name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后刷新页面，即可看到效果：</p>
<p> <img src="/images/day13/1526911811998.png" alt="1526911811998"></p>
<h2 id="5-3-隐藏已经选择的过滤项"><a href="#5-3-隐藏已经选择的过滤项" class="headerlink" title="5.3.隐藏已经选择的过滤项"></a>5.3.隐藏已经选择的过滤项</h2><p>现在，我们已经实现了已选择过滤项的展示，但是你会发现一个问题：</p>
<p>已经选择的过滤项，在过滤列表中依然存在：</p>
<p><img src="/images/day13/1526915075037.png" alt="1526915075037"></p>
<p>这些已经选择的过滤项，应该从列表中移除。</p>
<p>怎么做呢？</p>
<p>你必须先知道用户选择了什么。用户选择的项保存在<code>search.filter</code>中：</p>
<p> <img src="/images/day13/1526915191753.png" alt="1526915191753"></p>
<p>我们可以编写一个计算属性，把filters中的 已经被选择的key过滤掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    remainFilters()&#123;</span><br><span class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.search.filter);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.search.filter.cid3)&#123;</span><br><span class="line">            keys.push(<span class="string">"cid3"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.search.filter.brandId)&#123;</span><br><span class="line">            keys.push(<span class="string">"brandId"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.filters.filter(<span class="function"><span class="params">f</span> =&gt;</span> !keys.includes(f.k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后页面不再直接遍历<code>filters</code>，而是遍历<code>remainFilters</code></p>
<p><img src="/images/day13/1526916315470.png" alt="1526916315470"></p>
<p>刷新页面：</p>
<p><img src="/images/day13/1526916538925.png" alt="1526916538925"></p>
<p>最后发现，还剩下一堆没选过的。但是都只有一个可选项，此时再过滤没有任何意义，应该隐藏，所以，在刚才的过滤条件中，还应该添加一条：如果只剩下一个可选项，不显示</p>
<p><img src="/images/day13/1526916815264.png" alt="1526916815264"></p>
<p><img src="/images/day13/1526916838222.png" alt="1526916838222"></p>
<h1 id="6-取消过滤项（作业）"><a href="#6-取消过滤项（作业）" class="headerlink" title="6.取消过滤项（作业）"></a>6.取消过滤项（作业）</h1><p>我们能够看到，每个过滤项后面都有一个小叉，当点击后，应该取消对应条件的过滤。</p>
<p>思路非常简单：</p>
<ul>
<li>给小叉绑定点击事件</li>
<li>点击后把过滤项从<code>search.filter</code>中移除，页面会自动刷新，OK</li>
</ul>
<blockquote>
<p>绑定点击事件：</p>
</blockquote>
<p><img src="/images/day13/1526955150293.png" alt="1526955150293"></p>
<p>绑定点击事件时，把k传递过去，方便删除</p>
<blockquote>
<p>删除过滤项</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">removeFilter(k)&#123;</span><br><span class="line">    <span class="keyword">this</span>.search.filter[k] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-优化"><a href="#7-优化" class="headerlink" title="7.优化"></a>7.优化</h1><p>搜索系统需要优化的点：</p>
<ul>
<li>查询规格参数部分可以添加缓存 </li>
<li>聚合计算interval变化频率极低，所以可以设计为定时任务计算（周期为天），然后缓存起来。</li>
<li>elasticsearch本身有查询缓存，可以不进行优化</li>
<li>商品图片应该采用缩略图，减少流量，提高页面加载速度</li>
<li>图片采用延迟加载</li>
<li>图片还可以采用CDN服务器</li>
<li>sku信息应该在页面异步加载，而不是放到索引库</li>
</ul>

    <div id="aplayer-aGdOmPGH" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="84079986" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>



]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>基本搜索</title>
    <url>/2019/12/16/day12.%E5%9F%BA%E6%9C%AC%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>编写数据导入功能</li>
<li>实现基本搜索</li>
<li>实现页面分页</li>
<li>实现结果排序</li>
</ul>
<a id="more"></a>
<h1 id="1-索引库数据导入"><a href="#1-索引库数据导入" class="headerlink" title="1.索引库数据导入"></a>1.索引库数据导入</h1><p>昨天我们学习了Elasticsearch的基本应用。今天就学以致用，搭建搜索微服务，实现搜索功能。</p>
<h2 id="1-1-创建搜索服务"><a href="#1-1-创建搜索服务" class="headerlink" title="1.1.创建搜索服务"></a>1.1.创建搜索服务</h2><p>创建module：</p>
<p><img src="/images/day12/1532178218793.png" alt="1532178218793"></p>
<p><img src="/images/day12/1532178276070.png" alt="1532178276070"></p>
<p>Pom文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.search<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-search<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- elasticsearch --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- eureka --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- feign --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">search-service</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br></pre></td></tr></table></figure>

<p>引导类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouSearchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LySearchService<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-索引库数据格式分析"><a href="#1-2-索引库数据格式分析" class="headerlink" title="1.2.索引库数据格式分析"></a>1.2.索引库数据格式分析</h2><p>接下来，我们需要商品数据导入索引库，便于用户搜索。</p>
<p>那么问题来了，我们有SPU和SKU，到底如何保存到索引库？</p>
<h3 id="1-2-1-以结果为导向"><a href="#1-2-1-以结果为导向" class="headerlink" title="1.2.1.以结果为导向"></a>1.2.1.以结果为导向</h3><p>大家来看下搜索结果页：</p>
<p><img src="/images/day12/1532180648745.png" alt="1532180648745"></p>
<p>可以看到，每一个搜索结果都有至少1个商品，当我们选择大图下方的小图，商品会跟着变化。</p>
<p>因此，<strong>搜索的结果是SPU，即多个SKU的集合</strong>。</p>
<p>既然搜索的结果是SPU，那么我们索引库中存储的应该也是SPU，但是却需要包含SKU的信息。</p>
<h3 id="1-2-2-需要什么数据"><a href="#1-2-2-需要什么数据" class="headerlink" title="1.2.2.需要什么数据"></a>1.2.2.需要什么数据</h3><p>再来看看页面中有什么数据：</p>
<p> <img src="/images/day12/1526607712207.png" alt="1526607712207"> </p>
<p>直观能看到的：图片、价格、标题、副标题</p>
<p>暗藏的数据：spu的id，sku的id</p>
<p>另外，页面还有过滤条件：</p>
<p> <img src="/images/day12/1526608095471.png" alt="1526608095471"></p>
<p>这些过滤条件也都需要存储到索引库中，包括：</p>
<p>商品分类、品牌、可用来搜索的规格参数等</p>
<p>综上所述，我们需要的数据格式有：</p>
<p>spuId、SkuId、商品分类id、品牌id、图片、价格、商品的创建时间、sku信息集、可搜索的规格参数</p>
<h3 id="1-2-3-最终的数据结构"><a href="#1-2-3-最终的数据结构" class="headerlink" title="1.2.3.最终的数据结构"></a>1.2.3.最终的数据结构</h3><p>我们创建一个类，封装要保存到索引库的数据，并设置映射属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"goods"</span>, type = <span class="string">"docs"</span>, shards = <span class="number">1</span>, replicas = <span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">// spuId</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, analyzer = <span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String all; <span class="comment">// 所有需要被搜索的信息，包含标题，分类，甚至品牌</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword, index = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String subTitle;<span class="comment">// 卖点</span></span><br><span class="line">    <span class="keyword">private</span> Long brandId;<span class="comment">// 品牌id</span></span><br><span class="line">    <span class="keyword">private</span> Long cid1;<span class="comment">// 1级分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long cid2;<span class="comment">// 2级分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long cid3;<span class="comment">// 3级分类id</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; price;<span class="comment">// 价格</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword, index = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String skus;<span class="comment">// List&lt;sku&gt;信息的json结构</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; specs;<span class="comment">// 可搜索的规格参数，key是参数名，值是参数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一些特殊字段解释：</p>
<ul>
<li><p>all：用来进行全文检索的字段，里面包含标题、商品分类信息</p>
</li>
<li><p>price：价格数组，是所有sku的价格集合。方便根据价格进行筛选过滤</p>
</li>
<li><p>skus：用于页面展示的sku信息，不索引，不搜索。包含skuId、image、price、title字段</p>
</li>
<li><p>specs：所有规格参数的集合。key是参数名，值是参数值。</p>
<p>例如：我们在specs中存储 内存：4G,6G，颜色为红色，转为json就是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"specs"</span>:&#123;</span><br><span class="line">        <span class="attr">"内存"</span>:[<span class="number">4</span>G,<span class="number">6</span>G],</span><br><span class="line">        <span class="attr">"颜色"</span>:<span class="string">"红色"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当存储到索引库时，elasticsearch会处理为两个字段：</p>
<ul>
<li>specs.内存：[4G,6G]</li>
<li>specs.颜色：红色</li>
</ul>
<p>另外， 对于字符串类型，还会额外存储一个字段，这个字段不会分词，用作聚合。</p>
<ul>
<li>specs.颜色.keyword：红色</li>
</ul>
</li>
</ul>
<h2 id="1-3-商品微服务提供接口"><a href="#1-3-商品微服务提供接口" class="headerlink" title="1.3.商品微服务提供接口"></a>1.3.商品微服务提供接口</h2><p>索引库中的数据来自于数据库，我们不能直接去查询商品的数据库，因为真实开发中，每个微服务都是相互独立的，包括数据库也是一样。所以我们只能调用商品微服务提供的接口服务。</p>
<p>先思考我们需要的数据：</p>
<ul>
<li><p>SPU信息</p>
</li>
<li><p>SKU信息</p>
</li>
<li><p>SPU的详情</p>
</li>
<li><p>商品分类名称（拼接all字段）</p>
</li>
<li><p>品牌名称</p>
</li>
<li><p>规格参数</p>
</li>
</ul>
<p>再思考我们需要哪些服务：</p>
<ul>
<li>第一：分批查询spu的服务，已经写过。</li>
<li>第二：根据spuId查询sku的服务，已经写过</li>
<li>第三：根据spuId查询SpuDetail的服务，已经写过</li>
<li>第四：根据商品分类id，查询商品分类名称，没写过</li>
<li>第五：根据商品品牌id，查询商品的品牌，没写过</li>
<li>第六：规格参数接口</li>
</ul>
<p>因此我们需要额外提供一个查询商品分类名称的接口。</p>
<h3 id="1-3-1-商品分类名称查询"><a href="#1-3-1-商品分类名称查询" class="headerlink" title="1.3.1.商品分类名称查询"></a>1.3.1.商品分类名称查询</h3><p>在CategoryController中添加接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"names"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;String&gt;&gt; queryNamesByIds(<span class="meta">@RequestParam</span>(<span class="string">"ids"</span>)List&lt;Long&gt; ids)&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; names = <span class="keyword">this</span>.categoryService.queryNamesByIds(ids);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(names)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(names);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="/images/day12/1532213731039.png" alt="1532213731039"></p>
<h3 id="1-3-2-编写FeignClient"><a href="#1-3-2-编写FeignClient" class="headerlink" title="1.3.2.编写FeignClient"></a>1.3.2.编写FeignClient</h3><h4 id="1-3-2-1-问题展现"><a href="#1-3-2-1-问题展现" class="headerlink" title="1.3.2.1.问题展现"></a>1.3.2.1.问题展现</h4><p>操作leyou-search工程</p>
<p>现在，我们要在搜索微服务调用商品微服务的接口。</p>
<p>第一步要在leyou-search工程中，引入商品微服务依赖：<code>leyou-item-interface</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--商品微服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.item<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;leyou.latest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步，编写FeignClient</p>
<p> <img src="/images/day12/1543416825258.png" alt="1543416825258"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saleable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/spu/page"</span>)</span><br><span class="line">    <span class="function">PageResult&lt;SpuBo&gt; <span class="title">querySpuByPage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)</span> Integer page,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"rows"</span>, defaultValue = <span class="string">"5"</span>)</span> Integer rows,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"saleable"</span>, defaultValue = <span class="string">"true"</span>)</span> Boolean saleable,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"key"</span>, required = <span class="keyword">false</span>)</span> String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spu商品id查询详情</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/spu/detail/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">SpuDetail <span class="title">querySpuDetailById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spu的id查询sku</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"sku/list"</span>)</span><br><span class="line">    <span class="function">List&lt;Sku&gt; <span class="title">querySkuBySpuId</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上的这些代码直接从商品微服务中拷贝而来，完全一致。差别就是没有方法的具体实现。大家觉得这样有没有问题？</p>
<p>而FeignClient代码遵循SpringMVC的风格，因此与商品微服务的Controller完全一致。这样就存在一定的问题：</p>
<ul>
<li>代码冗余。尽管不用写实现，只是写接口，但服务调用方要写与服务controller一致的代码，有几个消费者就要写几次。</li>
<li>增加开发成本。调用方还得清楚知道接口的路径，才能编写正确的FeignClient。</li>
</ul>
<h4 id="1-3-2-2-解决方案"><a href="#1-3-2-2-解决方案" class="headerlink" title="1.3.2.2.解决方案"></a>1.3.2.2.解决方案</h4><p>因此，一种比较友好的实践是这样的：</p>
<ul>
<li>我们的服务提供方不仅提供实体类，还要提供api接口声明</li>
<li>调用方不用自己编写接口方法声明，直接继承提供方给的Api接口即可，</li>
</ul>
<p>第一步：服务的提供方在<code>leyou-item-interface</code>中提供API接口，并编写接口声明：</p>
<p> <img src="/images/day12/1543416889053.png" alt="1543416889053"></p>
<p>商品分类服务接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"category"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"names"</span>)</span><br><span class="line">    ResponseEntity&lt;List&lt;String&gt;&gt; queryNameByIds(<span class="meta">@RequestParam</span>(<span class="string">"ids"</span>) List&lt;Long&gt; ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>商品服务接口，返回值不再使用ResponseEntity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/goods"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saleable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/spu/page"</span>)</span><br><span class="line">    <span class="function">PageResult&lt;SpuBo&gt; <span class="title">querySpuByPage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)</span> Integer page,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"rows"</span>, defaultValue = <span class="string">"5"</span>)</span> Integer rows,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"saleable"</span>, defaultValue = <span class="string">"true"</span>)</span> Boolean saleable,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"key"</span>, required = <span class="keyword">false</span>)</span> String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spu商品id查询详情</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/spu/detail/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">SpuDetail <span class="title">querySpuDetailById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spu的id查询sku</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"sku/list"</span>)</span><br><span class="line">    <span class="function">List&lt;Sku&gt; <span class="title">querySkuBySpuId</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>品牌的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"brand"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Brand <span class="title">queryBrandById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>规格参数的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"spec"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"params"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SpecParam&gt; <span class="title">queryParams</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"gid"</span>, required = <span class="keyword">false</span>)</span> Long gid,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"cid"</span>, required = <span class="keyword">false</span>)</span> Long cid,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"generic"</span>, required = <span class="keyword">false</span>)</span> Boolean generic,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"searching"</span>, required = <span class="keyword">false</span>)</span> Boolean searching</span></span><br><span class="line"><span class="function">    )</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要引入springMVC及leyou-common的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步：在调用方<code>leyou-search</code>中编写FeignClient，但不要写方法声明了，直接继承<code>leyou-item-interface</code>提供的api接口：</p>
<p> <img src="/images/day12/1543417084636.png" alt="1543417084636"></p>
<p>商品的FeignClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> <span class="keyword">extends</span> <span class="title">GoodsApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>商品分类的FeignClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryClient</span> <span class="keyword">extends</span> <span class="title">CategoryApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>品牌的FeignClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>规格参数的FeignClient:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationClient</span> <span class="keyword">extends</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是不是简单多了？</p>
<h4 id="1-3-2-3-测试"><a href="#1-3-2-3-测试" class="headerlink" title="1.3.2.3.测试"></a>1.3.2.3.测试</h4><p>在leyou-search中引入springtest依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建测试类：</p>
<p>在接口上按快捷键：<code>Ctrl + Shift + T</code></p>
<p> <img src="/images/day12/1532216103709.png" alt="1532216103709"></p>
<p> <img src="/images/day12/1532216169168.png" alt="1532216169168"></p>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= LeyouSearchApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CategoryClientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCategories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">this</span>.categoryClient.queryNamesByIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">        names.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/day12/1532216884221.png" alt="1532216884221"></p>
<h2 id="1-4-导入数据"><a href="#1-4-导入数据" class="headerlink" title="1.4.导入数据"></a>1.4.导入数据</h2><h3 id="1-4-1-创建GoodsRepository"><a href="#1-4-1-创建GoodsRepository" class="headerlink" title="1.4.1.创建GoodsRepository"></a>1.4.1.创建GoodsRepository</h3><p> <img src="/images/day12/1543418137705.png" alt="1543418137705"></p>
<p>java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Goods</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-2-创建索引"><a href="#1-4-2-创建索引" class="headerlink" title="1.4.2.创建索引"></a>1.4.2.创建索引</h3><p>我们新建一个测试类，在里面进行数据的操作：</p>
<p> <img src="/images/day12/1543417536876.png" alt="1543417536876"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= LeyouSearchApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ElasticsearchTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsReponsitory goodsReponsitory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建索引库，以及映射</span></span><br><span class="line">        <span class="keyword">this</span>.template.createIndex(Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">this</span>.template.putMapping(Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过kibana查看：</p>
<p><img src="/images/day12/1532217819818.png" alt="1532217819818"></p>
<h3 id="1-4-3-导入数据"><a href="#1-4-3-导入数据" class="headerlink" title="1.4.3.导入数据"></a>1.4.3.导入数据</h3><p>导入数据其实就是查询数据，然后把查询到的Spu转变为Goods来保存，因此我们先编写一个SearchService，然后在里面定义一个方法， 把Spu转为Goods</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">buildGoods</span><span class="params">(Spu spu)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建goods对象</span></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询品牌</span></span><br><span class="line">        Brand brand = <span class="keyword">this</span>.brandClient.queryBrandById(spu.getBrandId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询分类名称</span></span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">this</span>.categoryClient.queryNamesByIds(Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询spu下的所有sku</span></span><br><span class="line">        List&lt;Sku&gt; skus = <span class="keyword">this</span>.goodsClient.querySkusBySpuId(spu.getId());</span><br><span class="line">        List&lt;Long&gt; prices = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; skuMapList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历skus，获取价格集合</span></span><br><span class="line">        skus.forEach(sku -&gt;&#123;</span><br><span class="line">            prices.add(sku.getPrice());</span><br><span class="line">            Map&lt;String, Object&gt; skuMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            skuMap.put(<span class="string">"id"</span>, sku.getId());</span><br><span class="line">            skuMap.put(<span class="string">"title"</span>, sku.getTitle());</span><br><span class="line">            skuMap.put(<span class="string">"price"</span>, sku.getPrice());</span><br><span class="line">            skuMap.put(<span class="string">"image"</span>, StringUtils.isNotBlank(sku.getImages()) ? StringUtils.split(sku.getImages(), <span class="string">","</span>)[<span class="number">0</span>] : <span class="string">""</span>);</span><br><span class="line">            skuMapList.add(skuMap);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询出所有的搜索规格参数</span></span><br><span class="line">        List&lt;SpecParam&gt; params = <span class="keyword">this</span>.specificationClient.queryParams(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 查询spuDetail。获取规格参数值</span></span><br><span class="line">        SpuDetail spuDetail = <span class="keyword">this</span>.goodsClient.querySpuDetailBySpuId(spu.getId());</span><br><span class="line">        <span class="comment">// 获取通用的规格参数</span></span><br><span class="line">        Map&lt;Long, Object&gt; genericSpecMap = MAPPER.readValue(spuDetail.getGenericSpec(), <span class="keyword">new</span> TypeReference&lt;Map&lt;Long, Object&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 获取特殊的规格参数</span></span><br><span class="line">        Map&lt;Long, List&lt;Object&gt;&gt; specialSpecMap = MAPPER.readValue(spuDetail.getSpecialSpec(), <span class="keyword">new</span> TypeReference&lt;Map&lt;Long, List&lt;Object&gt;&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 定义map接收&#123;规格参数名，规格参数值&#125;</span></span><br><span class="line">        Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.forEach(param -&gt; &#123;</span><br><span class="line">            <span class="comment">// 判断是否通用规格参数</span></span><br><span class="line">            <span class="keyword">if</span> (param.getGeneric()) &#123;</span><br><span class="line">                <span class="comment">// 获取通用规格参数值</span></span><br><span class="line">                String value = genericSpecMap.get(param.getId()).toString();</span><br><span class="line">                <span class="comment">// 判断是否是数值类型</span></span><br><span class="line">                <span class="keyword">if</span> (param.getNumeric())&#123;</span><br><span class="line">                    <span class="comment">// 如果是数值的话，判断该数值落在那个区间</span></span><br><span class="line">                    value = chooseSegment(value, param);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 把参数名和值放入结果集中</span></span><br><span class="line">                paramMap.put(param.getName(), value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                paramMap.put(param.getName(), specialSpecMap.get(param.getId()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        goods.setId(spu.getId());</span><br><span class="line">        goods.setCid1(spu.getCid1());</span><br><span class="line">        goods.setCid2(spu.getCid2());</span><br><span class="line">        goods.setCid3(spu.getCid3());</span><br><span class="line">        goods.setBrandId(spu.getBrandId());</span><br><span class="line">        goods.setCreateTime(spu.getCreateTime());</span><br><span class="line">        goods.setSubTitle(spu.getSubTitle());</span><br><span class="line">        goods.setAll(spu.getTitle() + brand.getName() + StringUtils.join(names, <span class="string">" "</span>));</span><br><span class="line">        goods.setPrice(prices);</span><br><span class="line">        goods.setSkus(MAPPER.writeValueAsString(skuMapList));</span><br><span class="line">        goods.setSpecs(paramMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">chooseSegment</span><span class="params">(String value, SpecParam p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> val = NumberUtils.toDouble(value);</span><br><span class="line">        String result = <span class="string">"其它"</span>;</span><br><span class="line">        <span class="comment">// 保存数值段</span></span><br><span class="line">        <span class="keyword">for</span> (String segment : p.getSegments().split(<span class="string">","</span>)) &#123;</span><br><span class="line">            String[] segs = segment.split(<span class="string">"-"</span>);</span><br><span class="line">            <span class="comment">// 获取数值范围</span></span><br><span class="line">            <span class="keyword">double</span> begin = NumberUtils.toDouble(segs[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">double</span> end = Double.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(segs.length == <span class="number">2</span>)&#123;</span><br><span class="line">                end = NumberUtils.toDouble(segs[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否在范围内</span></span><br><span class="line">            <span class="keyword">if</span>(val &gt;= begin &amp;&amp; val &lt; end)&#123;</span><br><span class="line">                <span class="keyword">if</span>(segs.length == <span class="number">1</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">0</span>] + p.getUnit() + <span class="string">"以上"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(begin == <span class="number">0</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">1</span>] + p.getUnit() + <span class="string">"以下"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result = segment + p.getUnit();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为过滤参数中有一类比较特殊，就是数值区间：</p>
<p> <img src="/images/day12/1526608095471.png" alt="1526608095471"></p>
<p>所以我们在存入时要进行处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">chooseSegment</span><span class="params">(String value, SpecParam p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> val = NumberUtils.toDouble(value);</span><br><span class="line">    String result = <span class="string">"其它"</span>;</span><br><span class="line">    <span class="comment">// 保存数值段</span></span><br><span class="line">    <span class="keyword">for</span> (String segment : p.getSegments().split(<span class="string">","</span>)) &#123;</span><br><span class="line">        String[] segs = segment.split(<span class="string">"-"</span>);</span><br><span class="line">        <span class="comment">// 获取数值范围</span></span><br><span class="line">        <span class="keyword">double</span> begin = NumberUtils.toDouble(segs[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">double</span> end = Double.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(segs.length == <span class="number">2</span>)&#123;</span><br><span class="line">            end = NumberUtils.toDouble(segs[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否在范围内</span></span><br><span class="line">        <span class="keyword">if</span>(val &gt;= begin &amp;&amp; val &lt; end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(segs.length == <span class="number">1</span>)&#123;</span><br><span class="line">                result = segs[<span class="number">0</span>] + p.getUnit() + <span class="string">"以上"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(begin == <span class="number">0</span>)&#123;</span><br><span class="line">                result = segs[<span class="number">1</span>] + p.getUnit() + <span class="string">"以下"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result = segment + p.getUnit();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后编写一个测试类，循环查询Spu，然后调用IndexService中的方法，把SPU变为Goods，然后写入索引库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建索引</span></span><br><span class="line">    <span class="keyword">this</span>.elasticsearchTemplate.createIndex(Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 配置映射</span></span><br><span class="line">    <span class="keyword">this</span>.elasticsearchTemplate.putMapping(Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Integer page = <span class="number">1</span>;</span><br><span class="line">    Integer rows = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 分批查询spuBo</span></span><br><span class="line">        PageResult&lt;SpuBo&gt; pageResult = <span class="keyword">this</span>.goodsClient.querySpuBoByPage(<span class="keyword">null</span>, <span class="keyword">true</span>, page, rows);</span><br><span class="line">        <span class="comment">// 遍历spubo集合转化为List&lt;Goods&gt;</span></span><br><span class="line">        List&lt;Goods&gt; goodsList = pageResult.getItems().stream().map(spuBo -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.searchService.buildGoods((Spu) spuBo);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">this</span>.goodsReponsitory.saveAll(goodsList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前页的数据条数，如果是最后一页，没有100条</span></span><br><span class="line">        rows = pageResult.getItems().size();</span><br><span class="line">        <span class="comment">// 每次循环页码加1</span></span><br><span class="line">        page++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (rows == <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过kibana查询， 可以看到数据成功导入：</p>
<p><img src="/images/day12/1532228358310.png" alt="1532228358310"></p>
<h1 id="2-实现基本搜索"><a href="#2-实现基本搜索" class="headerlink" title="2.实现基本搜索"></a>2.实现基本搜索</h1><h2 id="2-1-页面分析"><a href="#2-1-页面分析" class="headerlink" title="2.1.页面分析"></a>2.1.页面分析</h2><h3 id="2-1-1-页面跳转"><a href="#2-1-1-页面跳转" class="headerlink" title="2.1.1.页面跳转"></a>2.1.1.页面跳转</h3><p>在首页的顶部，有一个输入框：</p>
<p><img src="/images/day12/1526629923970.png" alt="1526629923970"></p>
<p>当我们输入任何文本，点击搜索，就会跳转到搜索页<code>search.html</code>了：</p>
<p>并且将搜索关键字以请求参数携带过来：</p>
<p><img src="/images/day12/1532229236516.png" alt="1532229236516"></p>
<p>我们打开<code>search.html</code>，在最下面会有提前定义好的Vue实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#searchApp"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 加载页面顶部组件</span></span></span><br><span class="line"><span class="javascript">            lyTop: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./js/pages/top.js"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个Vue实例中，通过import导入的方式，加载了另外一个js：top.js并作为一个局部组件。top其实是页面顶部导航组件，我们暂时不管</p>
<h3 id="2-1-2-发起异步请求"><a href="#2-1-2-发起异步请求" class="headerlink" title="2.1.2.发起异步请求"></a>2.1.2.发起异步请求</h3><p>要想在页面加载后，就展示出搜索结果。我们应该在页面加载时，获取地址栏请求参数，并发起异步请求，查询后台数据，然后在页面渲染。</p>
<p>我们在data中定义一个对象，记录请求的参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    search:&#123;</span><br><span class="line">        key:<span class="string">""</span>, <span class="comment">// 搜索页面的关键字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们通过钩子函数created，在页面加载时获取请求参数，并记录下来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    <span class="comment">// 判断是否有请求参数</span></span><br><span class="line">    <span class="keyword">if</span>(!location.search)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将请求参数转为对象</span></span><br><span class="line">    <span class="keyword">const</span> search = ly.parse(location.search.substring(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 记录在data的search对象中</span></span><br><span class="line">    <span class="keyword">this</span>.search = search;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发起请求，根据条件搜索</span></span><br><span class="line">    <span class="keyword">this</span>.loadData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后发起请求，搜索数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    loadData()&#123;</span><br><span class="line">        <span class="comment">// ly.http.post("/search/page", ly.stringify(this.search)).then(resp=&gt;&#123;</span></span><br><span class="line">        ly.http.post(<span class="string">"/search/page"</span>, <span class="keyword">this</span>.search).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(resp);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>我们这里使用<code>ly</code>是common.js中定义的工具对象。</li>
<li>这里使用的是post请求，这样可以携带更多参数，并且以json格式发送</li>
</ul>
<p>在leyou-gateway中的CORS配置类中，添加允许信任域名：</p>
<p><img src="/images/day12/1532233280898.png" alt="1532233280898"></p>
<p>并在leyou-gateway工程的Application.yml中添加网关映射：</p>
<p><img src="/images/day12/1532233247824.png" alt="1532233247824"></p>
<p>刷新页面试试：</p>
<p><img src="/images/day12/1532233086523.png" alt="1532233086523"></p>
<p>因为后台没有提供接口，所以无法访问。没关系，接下来我们实现后台接口</p>
<h2 id="2-2-后台提供搜索接口"><a href="#2-2-后台提供搜索接口" class="headerlink" title="2.2.后台提供搜索接口"></a>2.2.后台提供搜索接口</h2><h3 id="2-2-1-controller"><a href="#2-2-1-controller" class="headerlink" title="2.2.1.controller"></a>2.2.1.controller</h3><p> <img src="/images/day12/1543418199310.png" alt="1543418199310"></p>
<p>首先分析几个问题：</p>
<ul>
<li><p>请求方式：Post</p>
</li>
<li><p>请求路径：/search/page，不过前面的/search应该是网关的映射路径，因此真实映射路径page，代表分页查询</p>
</li>
<li><p>请求参数：json格式，目前只有一个属性：key-搜索关键字，但是搜索结果页一定是带有分页查询的，所以将来肯定会有page属性，因此我们可以用一个对象来接收请求的json数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;<span class="comment">// 搜索条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer page;<span class="comment">// 当前页</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_SIZE = <span class="number">20</span>;<span class="comment">// 每页大小，不从页面接收，而是固定大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_PAGE = <span class="number">1</span>;<span class="comment">// 默认页</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(page == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> DEFAULT_PAGE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取页码时做一些校验，不能小于1</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_PAGE, page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(Integer page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page = page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回结果：作为分页结果，一般都两个属性：当前页数据、总条数信息，我们可以使用之前定义的PageResult类</p>
</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;Goods&gt;&gt; search(<span class="meta">@RequestBody</span> SearchRequest request) &#123;</span><br><span class="line">        PageResult&lt;Goods&gt; result = <span class="keyword">this</span>.searchService.search(request);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-service"><a href="#2-2-2-service" class="headerlink" title="2.2.2.service"></a>2.2.2.service</h3><p> <img src="/images/day12/1543418304067.png" alt="1543418304067"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsRepository goodsRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult&lt;Goods&gt; <span class="title">search</span><span class="params">(SearchRequest request)</span> </span>&#123;</span><br><span class="line">        String key = request.getKey();</span><br><span class="line">        <span class="comment">// 判断是否有搜索条件，如果没有，直接返回null。不允许搜索全部商品</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建查询条件</span></span><br><span class="line">        NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1、对key进行全文检索查询</span></span><br><span class="line">        queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">"all"</span>, key).operator(Operator.AND));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2、通过sourceFilter设置返回的结果字段,我们只需要id、skus、subTitle</span></span><br><span class="line">        queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"skus"</span>,<span class="string">"subTitle"</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3、分页</span></span><br><span class="line">        <span class="comment">// 准备分页参数</span></span><br><span class="line">        <span class="keyword">int</span> page = request.getPage();</span><br><span class="line">        <span class="keyword">int</span> size = request.getSize();</span><br><span class="line">        queryBuilder.withPageable(PageRequest.of(page - <span class="number">1</span>, size));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、查询，获取结果</span></span><br><span class="line">        Page&lt;Goods&gt; pageInfo = <span class="keyword">this</span>.goodsRepository.search(queryBuilder.build());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装结果并返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(goodsPage.getTotalElements(), goodsPage.getTotalPages(), goodsPage.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点：我们要设置SourceFilter，来选择要返回的结果，否则返回一堆没用的数据，影响查询效率。</p>
<h3 id="2-2-3-测试"><a href="#2-2-3-测试" class="headerlink" title="2.2.3.测试"></a>2.2.3.测试</h3><p>刷新页面测试：</p>
<p><img src="/images/day12/1532237344249.png" alt="1532237344249"></p>
<p><img src="/images/day12/1532237401249.png" alt="1532237401249"></p>
<p>数据是查到了，但是因为我们只查询部分字段，所以结果json 数据中有很多null，这很不优雅。</p>
<p>解决办法很简单，在leyou-search的application.yml中添加一行配置，json处理时忽略空值：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span> <span class="comment"># 配置json处理时忽略空值</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/day12/1532237986819.png" alt="1532237986819"></p>
<h2 id="2-3-页面渲染"><a href="#2-3-页面渲染" class="headerlink" title="2.3.页面渲染"></a>2.3.页面渲染</h2><p>页面已经拿到了结果，接下来就要渲染样式了。</p>
<h3 id="2-3-1-保存搜索结果"><a href="#2-3-1-保存搜索结果" class="headerlink" title="2.3.1.保存搜索结果"></a>2.3.1.保存搜索结果</h3><p>首先，在data中定义属性，保存搜索的结果：</p>
<p><img src="/images/day12/1532239032197.png" alt="1532239032197"></p>
<p>在<code>loadData</code>的异步查询中，将结果赋值给<code>goodsList</code>：</p>
<p><img src="/images/day12/1532239117076.png" alt="1532239117076"></p>
<h3 id="2-3-2-循环展示商品"><a href="#2-3-2-循环展示商品" class="headerlink" title="2.3.2.循环展示商品"></a>2.3.2.循环展示商品</h3><p>在search.html的中部，有一个<code>div</code>，用来展示所有搜索到的商品：</p>
<p><img src="/images/day12/1532238893722.png" alt="1532238893722"></p>
<p>可以看到，<code>div</code>中有一个无序列表<code>ul</code>，内部的每一个<code>li</code>就是一个商品spu了。</p>
<p>我们删除多余的，只保留一个<code>li</code>，然后利用vue的循环来展示搜索到的结果：</p>
<p><img src="/images/day12/1532239244410.png" alt="1532239244410"></p>
<h3 id="2-3-3-多sku展示"><a href="#2-3-3-多sku展示" class="headerlink" title="2.3.3.多sku展示"></a>2.3.3.多sku展示</h3><h4 id="2-3-3-1-分析"><a href="#2-3-3-1-分析" class="headerlink" title="2.3.3.1.分析"></a>2.3.3.1.分析</h4><p>接下来展示具体的商品信息，来看图：</p>
<p> <img src="/images/day12/1526607712207.png" alt="1526607712207"></p>
<p>这里我们可以发现，一个商品位置，是多个sku的信息集合。<strong>当用户鼠标选择某个sku，对应的图片、价格、标题会随之改变！</strong></p>
<p>我们先来实现sku的选择，才能去展示不同sku的数据。</p>
<p> <img src="/images/day12/1526654252710.png" alt="1526654252710"></p>
<p>可以看到，在列表中默认第一个是被选中的，那我们就需要做两件事情：</p>
<ul>
<li><p>在搜索到数据时，先默认把第一个sku作为被选中的，记录下来</p>
</li>
<li><p>记录当前被选中的是哪一个sku，记录在哪里比较合适呢？显然是遍历到的goods对象自己内部，因为每一个goods都会有自己的sku信息。</p>
</li>
</ul>
<h4 id="2-3-3-2-初始化sku"><a href="#2-3-3-2-初始化sku" class="headerlink" title="2.3.3.2.初始化sku"></a>2.3.3.2.初始化sku</h4><p>查询出的结果集skus是一个json类型的字符串，不是js对象</p>
<p><img src="/images/day12/1532240220800.png" alt="1532240220800"></p>
<p>我们在查询成功的回调函数中，对goods进行遍历，把skus转化成json对象集合，并添加一个selected属性保存被选中的sku：</p>
<p><img src="/images/day12/1532240609206.png" alt="1532240609206"></p>
<p><img src="/images/day12/1532240586769.png" alt="1532240586769"></p>
<h4 id="2-3-3-3-多sku图片列表"><a href="#2-3-3-3-多sku图片列表" class="headerlink" title="2.3.3.3.多sku图片列表"></a>2.3.3.3.多sku图片列表</h4><p>接下来，我们看看多个sku的图片列表位置：</p>
<p><img src="/images/day12/1532240706261.png" alt="1532240706261"></p>
<p>看到又是一个无序列表，这里我们也一样删掉多余的，保留一个<code>li</code>，需要注意选中的项有一个样式类：selected</p>
<p>我们的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--多sku图片列表--&gt;</span><br><span class="line">&lt;ul class=&quot;skus&quot;&gt;</span><br><span class="line">    &lt;li :class=&quot;&#123;selected: sku.id == goods.selected.id&#125;&quot; v-for=&quot;sku in goods.skus&quot; :key=&quot;sku.id&quot;</span><br><span class="line">        @mouseOver=&quot;goods.selected=sku&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;sku.image&quot;&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>class样式通过 goods.selected的id是否与当前sku的id一致来判断</li>
<li>绑定了鼠标事件，鼠标进入后把当前sku赋值到goods.selected</li>
</ul>
<h3 id="2-3-4-展示sku其它属性"><a href="#2-3-4-展示sku其它属性" class="headerlink" title="2.3.4.展示sku其它属性"></a>2.3.4.展示sku其它属性</h3><p>现在，我们已经可以通过<code>goods.selected获取</code>用户选中的sku，那么我们就可以在页面展示了：</p>
<p><img src="/images/day12/1526656197524.png" alt="1526656197524"></p>
<p>刷新页面：</p>
<p> <img src="/images/day12/1526656243166.png" alt="1526656243166"></p>
<p>看起来很完美是吧！</p>
<p>但其实有一些瑕疵</p>
<h3 id="2-3-5-几个问题"><a href="#2-3-5-几个问题" class="headerlink" title="2.3.5.几个问题"></a>2.3.5.几个问题</h3><h4 id="2-3-5-1-价格显示的是分"><a href="#2-3-5-1-价格显示的是分" class="headerlink" title="2.3.5.1.价格显示的是分"></a>2.3.5.1.价格显示的是分</h4><p>首先价格显示就不正确，我们数据库中存放的是以分为单位，所以这里要格式化。</p>
<p>好在我们之前common.js中定义了工具类，可以帮我们转换。</p>
<p>改造：</p>
<p><img src="/images/day12/1532242831006.png" alt="1532242831006"></p>
<p>结果报错：</p>
<p><img src="/images/day12/1532242950035.png" alt="1532242950035"></p>
<p>为啥？</p>
<p>因为在Vue范围内使用任何变量，都会默认去Vue实例中寻找，我们使用ly，但是Vue实例中没有这个变量。所以解决办法就是把ly记录到Vue实例：</p>
<p><img src="/images/day12/1532242983324.png" alt="1532242983324"></p>
<p>然后刷新页面：</p>
<p><img src="/images/day12/1532243052100.png" alt="1532243052100"></p>
<h4 id="2-3-5-2-标题过长"><a href="#2-3-5-2-标题过长" class="headerlink" title="2.3.5.2.标题过长"></a>2.3.5.2.标题过长</h4><p>标题内容太长了，已经无法完全显示，怎么办？</p>
<p>截取一下：</p>
<p><img src="/images/day12/1526656959487.png" alt="1526656959487"></p>
<p>最好在加个悬停展示所有内容的效果</p>
<h4 id="2-3-5-3-sku点击不切换"><a href="#2-3-5-3-sku点击不切换" class="headerlink" title="2.3.5.3.sku点击不切换"></a>2.3.5.3.sku点击不切换</h4><p>还有一个错误比较隐蔽，不容易被发现。我们点击sku 的图片列表，发现没有任何变化。</p>
<p>这不科学啊，为什么？</p>
<p>这是因为Vue的自动渲染是基于对象的属性变化的。比如页面使用GoodsList进行渲染，如果GoodsList变化，或者其内部的任何子对象变化，都会Vue感知，从而从新渲染页面。</p>
<p>然而，这一切有一个前提，那就是当你第一次渲染时，对象中有哪些属性，Vue就只监视这些属性，后来添加的属性发生改变，是不会被监视到的。</p>
<p>而我们的goods对象中，本身是没有selected属性的，是我们后来才添加进去的：</p>
<p><img src="/images/day12/1532243182104.png" alt="1532243182104"></p>
<p>这段代码稍微改造一下，即可：</p>
<p><img src="/images/day12/1532243275078.png" alt="1532243275078"></p>
<p>也就是说，我们先把selected属性初始化完毕，然后才把整个对象赋值给goodsList，这样，goodsList已初始化时就有selected属性，以后就会被正常监控了。</p>
<p> <img src="/images/day12/skus.gif" alt></p>
<h1 id="3-页面分页效果"><a href="#3-页面分页效果" class="headerlink" title="3.页面分页效果"></a>3.页面分页效果</h1><p>刚才的查询中，我们默认了查询的页码和每页大小，因此所有的分页功能都无法使用，接下来我们一起看看<code>分页功能条</code>该如何制作。</p>
<p>这里要分两步，</p>
<ul>
<li>第一步：如何生成分页条</li>
<li>第二步：点击分页按钮，我们做什么</li>
</ul>
<h2 id="3-1-如何生成分页条"><a href="#3-1-如何生成分页条" class="headerlink" title="3.1.如何生成分页条"></a>3.1.如何生成分页条</h2><p>先看下页面关于分页部分的代码：</p>
<p> <img src="/images/day12/1526692249371.png" alt="1526692249371"></p>
<p>可以看到所有的分页栏内容都是写死的。</p>
<h3 id="3-1-1-需要的数据"><a href="#3-1-1-需要的数据" class="headerlink" title="3.1.1.需要的数据"></a>3.1.1.需要的数据</h3><p>分页数据应该是根据<strong>总页数</strong>、<strong>当前页</strong>、<strong>总条数</strong>等信息来计算得出。</p>
<ul>
<li>当前页：肯定是由页面来决定的，点击按钮会切换到对应的页</li>
<li>总页数：需要后台传递给我们</li>
<li>总条数：需要后台传递给我们</li>
</ul>
<p>我们首先在data中记录下这几个值：page-当前页，total-总条数，totalPage-总页数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    ly,</span><br><span class="line">    search:&#123;</span><br><span class="line">        key: <span class="string">""</span>,</span><br><span class="line">        page: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    goodsList:[], <span class="comment">// 接收搜索得到的结果</span></span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">    totalPage: <span class="number">0</span> <span class="comment">// 总页数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为page是搜索条件之一，所以记录在search对象中。</p>
<p>要注意：我们在created钩子函数中，会读取url路径的参数，然后赋值给search。如果是第一次请求页面，page是不存在的。因此为了避免page被覆盖，我们应该这么做：</p>
<p><img src="/images/day12/1532243978471.png" alt="1532243978471"></p>
<p>不过，这个时候我们自己的search对象中的值就可有可无了</p>
<h3 id="3-1-2-后台提供数据"><a href="#3-1-2-后台提供数据" class="headerlink" title="3.1.2.后台提供数据"></a>3.1.2.后台提供数据</h3><p>后台返回的结果中，要包含total和totalPage，我们改造下刚才的接口：</p>
<p>在我们返回的PageResult对象中，其实是有totalPage字段的：</p>
<p>  <img src="/images/day12/1526695144476.png" alt="1526695144476"></p>
<p>我们在返回时，把这个值填上：</p>
<p> <img src="/images/day12/1526695592422.png" alt="1526695592422"></p>
<p>页面测试一下：</p>
<p><img src="/images/day12/1532244453375.png" alt="1532244453375"></p>
<p>OK</p>
<h3 id="3-1-3-页面计算分页条"><a href="#3-1-3-页面计算分页条" class="headerlink" title="3.1.3.页面计算分页条"></a>3.1.3.页面计算分页条</h3><p>首先，把后台提供的数据保存在data中：</p>
<p> <img src="/images/day12/1526695967230.png" alt="1526695967230"></p>
<p>然后看下我们要实现的效果：</p>
<p><img src="/images/day12/1526695821870.png" alt="1526695821870"></p>
<p>这里最复杂的是中间的1~5的分页按钮，它需要动态变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">思路分析：</span><br></pre></td></tr></table></figure>

<ul>
<li>最多有5个按钮，因此我们可以用<code>v-for</code>循环从1到5即可</li>
<li>但是分页条不一定是从1开始：<ul>
<li>如果当前页值小于等于3的时候，分页条位置从1开始到5结束</li>
<li>如果总页数小于等于5的时候，分页条位置从1开始到总页数结束</li>
<li>如果当前页码大于3，应该从page-3开始</li>
<li>但是如果当前页码大于totalPage-3，应该从totalPage-5开始</li>
</ul>
</li>
</ul>
<p>所以，我们的页面这样来做：</p>
<p><img src="/images/day12/1532246481241.png" alt="1532246481241"></p>
<p>a标签中的分页数字通过<code>index</code>函数来计算，需要把<code>i</code>传递过去：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">index(i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &lt;= <span class="number">3</span> || <span class="keyword">this</span>.totalPage &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果当前页小于等于3或者总页数小于等于5</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果当前页大于3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.search.page - <span class="number">3</span> + i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.totalPage - <span class="number">5</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，如果总页数不足5页，我们就不应该遍历1<del>5，而是1</del>总页数，稍作改进：</p>
<p><img src="/images/day12/1526698842013.png" alt="1526698842013"></p>
<p>分页条的其它部分就比较简单了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;sui-pagination pagination-large&quot;&gt;</span><br><span class="line">    &lt;ul style=&quot;width: 550px&quot;&gt;</span><br><span class="line">        &lt;li :class=&quot;&#123;prev:true,disabled:search.page === 1&#125;&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;«上一页&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li :class=&quot;&#123;active: index(i) === search.page&#125;&quot; v-for=&quot;i in Math.min(5,totalPage)&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;&#123;&#123;index(i)&#125;&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;dotted&quot; v-show=&quot;totalPage &gt; 5&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li :class=&quot;&#123;next:true,disabled:search.page === totalPage&#125;&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;下一页»&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;共&#123;&#123;totalPage&#125;&#125;页&amp;nbsp;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            到第</span><br><span class="line">            &lt;input type=&quot;text&quot; class=&quot;page-num&quot; :value=&quot;search.page&quot;&gt;</span><br><span class="line">            页 &lt;button class=&quot;page-confirm&quot; onclick=&quot;alert(1)&quot;&gt;确定&lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-点击分页做什么"><a href="#3-2-点击分页做什么" class="headerlink" title="3.2.点击分页做什么"></a>3.2.点击分页做什么</h2><p>点击分页按钮后，自然是要修改<code>page</code>的值</p>
<p>所以，我们在<code>上一页</code>、<code>下一页</code>按钮添加点击事件，对page进行修改，在数字按钮上绑定点击事件，点击直接修改page：</p>
<p><img src="/images/day12/1532248549662.png" alt="1532248549662"></p>
<p>翻页事件的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">prevPage()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.search.page--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">nextPage()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &lt; <span class="keyword">this</span>.totalPage)&#123;</span><br><span class="line">        <span class="keyword">this</span>.search.page++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当<code>page</code>发生变化，我们应该去后台重新查询数据。</p>
<p>不过，如果我们直接发起ajax请求，那么浏览器的地址栏中是不会有变化的，没有记录下分页信息。如果用户刷新页面，那么就会回到第一页。</p>
<p>这样不太友好，我们应该把<strong>搜索条件记录在地址栏的查询参数中</strong>。</p>
<p>因此，我们监听search的变化，然后把search的过滤字段拼接在url路径后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    search:&#123;</span><br><span class="line">        deep:<span class="literal">true</span>,</span><br><span class="line">        handler(val)&#123;</span><br><span class="line">            <span class="comment">// 把search对象变成请求参数，拼接在url路径</span></span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">"http://www.leyou.com/search.html?"</span> + ly.stringify(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>刷新页面测试，然后就出现重大bug：页面无限刷新！为什么？</p>
<p>因为Vue实例初始化的钩子函数中，我们读取请求参数，赋值给search的时候，也触发了watch监视！也就是说，每次页面创建完成，都会触发watch，然后就会去修改window.location路径，然后页面被刷新，再次触发created钩子，又触发watch，周而复始，无限循环。</p>
<p>所以，我们需要在watch中进行监控，如果发现是第一次初始化，则不继续向下执行。</p>
<p>那么问题是，如何判断是不是第一次？</p>
<p>第一次初始化时，search中的key值肯定是空的，所以，我们这么做：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    search:&#123;</span><br><span class="line">        deep:<span class="literal">true</span>,</span><br><span class="line">        handler(val,old)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!old || !old.key)&#123;</span><br><span class="line">                <span class="comment">// 如果旧的search值为空，或者search中的key为空，证明是第一次</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把search对象变成请求参数，拼接在url路径</span></span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">"http://www.leyou.com/search.html?"</span> + ly.stringify(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次刷新，OK了！</p>
<h2 id="3-3-页面顶部分页条"><a href="#3-3-页面顶部分页条" class="headerlink" title="3.3.页面顶部分页条"></a>3.3.页面顶部分页条</h2><p>在页面商品列表的顶部，也有一个分页条：</p>
<p> <img src="/images/day12/1526716212704.png" alt="1526716212704"></p>
<p>我们把这一部分，也加上点击事件：</p>
<p><img src="/images/day12/1532248435097.png" alt="1532248435097"></p>
<h1 id="4-排序-作业"><a href="#4-排序-作业" class="headerlink" title="4.排序(作业)"></a>4.排序(作业)</h1><h2 id="4-1-页面搜索排序条件"><a href="#4-1-页面搜索排序条件" class="headerlink" title="4.1.页面搜索排序条件"></a>4.1.页面搜索排序条件</h2><p>在搜索商品列表的顶部，有这么一部分内容：</p>
<p> <img src="/images/day12/1526716565293.png" alt="1526716565293"></p>
<p>这是用来做排序的，默认按照综合排序。点击新品，应该按照商品创建时间排序，点击价格应该按照价格排序。因为我们没有统计销量和评价，这里咱们以<code>新品</code>和<code>价格</code>为例，进行讲解，做法是想通的。</p>
<p>排序需要知道两个内容：</p>
<ul>
<li>排序的字段</li>
<li>排序的方式</li>
</ul>
<p>因此，我们首先在<code>search</code>中记录这两个信息，因为created钩子函数会对search进行覆盖，因此我们在钩子函数中对这两个信息进行初始化即可：</p>
<p> <img src="/images/day12/1526717586493.png" alt="1526717586493"></p>
<p>然后，在页面上给按钮绑定点击事件，修改<code>sortBy</code>和<code>descending</code>的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--排序字段--&gt;</span><br><span class="line">&lt;ul class=&quot;sui-nav&quot;&gt;</span><br><span class="line">    &lt;li :class=&quot;&#123;active:!search.sortBy&#125;&quot; @click=&quot;search.sortBy=&apos;&apos;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;综合&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;销量&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li @click=&quot;search.sortBy=&apos;createTime&apos;&quot; :class=&quot;&#123;active: search.sortBy===&apos;createTime&apos;&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;新品&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;评价&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li @click=&quot;search.sortBy=&apos;price&apos;; search.descending = !search.descending&quot;</span><br><span class="line">        :class=&quot;&#123;active: search.sortBy===&apos;price&apos;&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;</span><br><span class="line">            价格</span><br><span class="line">            &lt;v-icon v-show=&quot;search.descending&quot;&gt;arrow_drop_down&lt;/v-icon&gt;</span><br><span class="line">            &lt;v-icon v-show=&quot;!search.descending&quot;&gt;arrow_drop_up&lt;/v-icon&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，页面请求参数中已经有了排序字段了：</p>
<p> <img src="/images/day12/1526718252315.png" alt="1526718252315"></p>
<h2 id="4-2-后台添加排序逻辑"><a href="#4-2-后台添加排序逻辑" class="headerlink" title="4.2.后台添加排序逻辑"></a>4.2.后台添加排序逻辑</h2><p>接下来，后台需要接收请求参数中的排序信息，然后在搜索中加入排序的逻辑。</p>
<p>现在，我们的请求参数对象<code>SearchRequest</code>中，只有page、key两个字段。需要进行扩展：</p>
<p> <img src="/images/day12/1526718448918.png" alt="1526718448918"></p>
<p>然后在搜索业务逻辑中，添加排序条件：</p>
<p><img src="/images/day12/1526718637618.png" alt="1526718637618"></p>
<p>注意，因为我们存储在索引库中的的价格是一个数组，因此在按照价格排序时，会进行智能处理：</p>
<ul>
<li>如果是价格降序，则会把数组中的最大值拿来排序</li>
<li>如果是价格升序，则会把数组中的最小值拿来排序</li>
</ul>
<p><img src="/images/day12/1526719415219.png" alt="1526719415219"></p>

    <div id="aplayer-VrZsrcCC" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="83596600" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>



]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题（8）</title>
    <url>/2019/12/15/leetcodeDay8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="今天就两题"><a href="#今天就两题" class="headerlink" title="今天就两题"></a>今天就两题</h2><p>学项目学累了，看他不停的取数据，渲染，es聚合什么的，真心累</p>
<a id="more"></a>
<h2 id="盛最多水的容器（中等）"><a href="#盛最多水的容器（中等）" class="headerlink" title="盛最多水的容器（中等）"></a>盛最多水的容器（中等）</h2><p><img src="/images/leetcode/1576414826(1).jpg" alt="示例图"><br>双指针法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxarea = <span class="number">0</span>, l = <span class="number">0</span>, r = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            maxarea = Math.max(maxarea, Math.min(height[l], height[r]) * (r - l));</span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt; height[r])</span><br><span class="line">                l++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxarea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p><img src="/images/leetcode/1576416455(1).jpg" alt="示例图"><br><img src="/images/leetcode/1576416535(1).jpg" alt="示例图"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || len &lt; <span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        Arrays.sort(nums); <span class="comment">// 排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">int</span> L = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> R = len-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(L &lt; R)&#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[i] + nums[L] + nums[R];</span><br><span class="line">                <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">                    ans.add(Arrays.asList(nums[i],nums[L],nums[R]));</span><br><span class="line">                    <span class="keyword">while</span> (L&lt;R &amp;&amp; nums[L] == nums[L+<span class="number">1</span>]) L++; <span class="comment">// 去重</span></span><br><span class="line">                    <span class="keyword">while</span> (L&lt;R &amp;&amp; nums[R] == nums[R-<span class="number">1</span>]) R--; <span class="comment">// 去重</span></span><br><span class="line">                    L++;</span><br><span class="line">                    R--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) L++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) R--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题（7）</title>
    <url>/2019/12/14/leetcodeDay7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="昨天偷懒了"><a href="#昨天偷懒了" class="headerlink" title="昨天偷懒了"></a>昨天偷懒了</h2><p>有个人昨天没有做算法题哦，就是我，今天考四六级小伙伴们，祝你们好运，加油</p>
<a id="more"></a>
<h2 id="两数相加（中等）"><a href="#两数相加（中等）" class="headerlink" title="两数相加（中等）"></a>两数相加（中等）</h2><p><img src="/images/leetcode/1576313574(1).jpg" alt="示例图"><br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">            ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            ListNode p = l1,q = l2,cur = head;</span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="keyword">null</span> || q != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = (p != <span class="keyword">null</span>)?p.val : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> y = (q != <span class="keyword">null</span>)?q.val : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">                carry = sum / <span class="number">10</span>;</span><br><span class="line">                cur.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                <span class="keyword">if</span>(p != <span class="keyword">null</span>) p = p.next;</span><br><span class="line">                <span class="keyword">if</span>(q != <span class="keyword">null</span>) q = q.next;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                  cur.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">                         &#125;</span><br><span class="line">                       <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="螺旋数组（中等）"><a href="#螺旋数组（中等）" class="headerlink" title="螺旋数组（中等）"></a>螺旋数组（中等）</h2><p><img src="/images/leetcode/1576335209(1).jpg" alt="示例图"><br>假设数组有 \text{R}R 行 \text{C}C 列，\text{seen[r][c]}seen[r][c] 表示第 r 行第 c 列的单元格之前已经被访问过了。当前所在位置为 \text{(r, c)}(r, c)，前进方向是 \text{di}di。我们希望访问所有 \text{R}R x \text{C}C 个单元格。<br>当我们遍历整个矩阵，下一步候选移动位置是 \text{(cr, cc)}(cr, cc)。如果这个候选位置在矩阵范围内并且没有被访问过，那么它将会变成下一步移动的位置；否则，我们将前进方向顺时针旋转之后再计算下一步的移动位置</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">int</span> R = matrix.length, C = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[][] seen = <span class="keyword">new</span> <span class="keyword">boolean</span>[R][C];</span><br><span class="line">        <span class="keyword">int</span>[] dr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dc = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>, di = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R * C; i++) &#123;</span><br><span class="line">            ans.add(matrix[r][c]);</span><br><span class="line">            seen[r][c] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> cr = r + dr[di];</span><br><span class="line">            <span class="keyword">int</span> cc = c + dc[di];</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt;= cr &amp;&amp; cr &lt; R &amp;&amp; <span class="number">0</span> &lt;= cc &amp;&amp; cc &lt; C &amp;&amp; !seen[cr][cc])&#123;</span><br><span class="line">                r = cr;</span><br><span class="line">                c = cc;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                di = (di + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">                r += dr[di];</span><br><span class="line">                c += dc[di];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/2019/12/13/day11-elasticsearch/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>独立安装Elasticsearch</li>
<li>会使用Rest的API操作索引</li>
<li>会使用Rest的API查询数据</li>
<li>会使用Rest的API聚合数据</li>
<li>掌握Spring Data Elasticsearch使用</li>
</ul>
<a id="more"></a>
<h1 id="1-Elasticsearch介绍和安装"><a href="#1-Elasticsearch介绍和安装" class="headerlink" title="1.Elasticsearch介绍和安装"></a>1.Elasticsearch介绍和安装</h1><p>用户访问我们的首页，一般都会直接搜索来寻找自己想要购买的商品。</p>
<p>而商品的数量非常多，而且分类繁杂。如何能正确的显示出用户想要的商品，并进行合理的过滤，尽快促成交易，是搜索系统要研究的核心。</p>
<p>面对这样复杂的搜索业务和数据量，使用传统数据库搜索就显得力不从心，一般我们都会使用全文检索技术，比如之前大家学习过的Solr。</p>
<p>不过今天，我们要讲的是另一个全文检索技术：Elasticsearch。</p>
<h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1.简介"></a>1.1.简介</h2><h3 id="1-1-1-Elastic"><a href="#1-1-1-Elastic" class="headerlink" title="1.1.1.Elastic"></a>1.1.1.Elastic</h3><p>Elastic官网：<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a></p>
<p><img src="/images/day11/1528546351055.png" alt="1528546351055"></p>
<p>Elastic有一条完整的产品线及解决方案：Elasticsearch、Kibana、Logstash等，前面说的三个就是大家常说的ELK技术栈。</p>
<p><img src="/images/day11/1528546493105.png" alt="1528546493105"></p>
<h3 id="1-1-2-Elasticsearch"><a href="#1-1-2-Elasticsearch" class="headerlink" title="1.1.2.Elasticsearch"></a>1.1.2.Elasticsearch</h3><p>Elasticsearch官网：<a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/products/elasticsearch</a></p>
<p><img src="/images/day11/1528547087016.png" alt="1528547087016"></p>
<p>如上所述，Elasticsearch具备以下特点：</p>
<ul>
<li>分布式，无需人工搭建集群（solr就需要人为配置，使用Zookeeper作为注册中心）</li>
<li>Restful风格，一切API都遵循Rest原则，容易上手</li>
<li>近实时搜索，数据更新在Elasticsearch中几乎是完全同步的。</li>
</ul>
<h3 id="1-1-3-版本"><a href="#1-1-3-版本" class="headerlink" title="1.1.3.版本"></a>1.1.3.版本</h3><p>目前Elasticsearch最新的版本是6.3.1，我们就使用6.3.0</p>
<p><img src="/images/day11/1528547283102.png" alt="1528547283102"></p>
<p>需要虚拟机JDK1.8及以上</p>
<h2 id="1-2-安装和配置"><a href="#1-2-安装和配置" class="headerlink" title="1.2.安装和配置"></a>1.2.安装和配置</h2><p>为了模拟真实场景，我们将在linux下安装Elasticsearch。</p>
<h3 id="1-2-1-新建一个用户leyou"><a href="#1-2-1-新建一个用户leyou" class="headerlink" title="1.2.1.新建一个用户leyou"></a>1.2.1.新建一个用户leyou</h3><p>出于安全考虑，elasticsearch默认不允许以root账号运行。</p>
<p>创建用户：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd leyou</span><br></pre></td></tr></table></figure>

<p>设置密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd leyou</span><br></pre></td></tr></table></figure>

<p>切换用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - leyou</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-上传安装包-并解压"><a href="#1-2-2-上传安装包-并解压" class="headerlink" title="1.2.2.上传安装包,并解压"></a>1.2.2.上传安装包,并解压</h3><p>我们将安装包上传到：/home/leyou目录</p>
<p><img src="/images/day11/1528610258461.png" alt="1528610258461"></p>
<p><img src="/images/day11/1528551162835.png" alt="1528551162835"></p>
<p>解压缩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf elasticsearch-6.2.4.tar.gz</span><br></pre></td></tr></table></figure>

<p>我们把目录重命名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv elasticsearch-6.3.0/ elasticsearch</span><br></pre></td></tr></table></figure>

<p><img src="/images/day11/1528610397414.png" alt="1528610397414"></p>
<p>进入，查看目录结构：</p>
<p><img src="/images/day11/1528551465373.png" alt="1528551465373"></p>
<h3 id="1-2-3-修改配置"><a href="#1-2-3-修改配置" class="headerlink" title="1.2.3.修改配置"></a>1.2.3.修改配置</h3><p>我们进入config目录：<code>cd config</code></p>
<p>需要修改的配置文件有两个：</p>
<p><img src="/images/day11/1528551598931.png" alt="1528551598931"></p>
<ol>
<li><strong>jvm.options</strong></li>
</ol>
<p>Elasticsearch基于Lucene的，而Lucene底层是java实现，因此我们需要配置jvm参数。</p>
<p>编辑jvm.options：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim jvm.options</span><br></pre></td></tr></table></figure>

<p>默认配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms1g</span><br><span class="line">-Xmx1g</span><br></pre></td></tr></table></figure>

<p>内存占用太多了，我们调小一些：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>elasticsearch.yml</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>

<ul>
<li>修改数据和日志目录：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">path.data:</span> <span class="string">/home/leyou/elasticsearch/data</span> <span class="comment"># 数据目录位置</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/home/leyou/elasticsearch/logs</span> <span class="comment"># 日志目录位置</span></span><br></pre></td></tr></table></figure>

<p>我们把data和logs目录修改指向了elasticsearch的安装目录。但是这两个目录并不存在，因此我们需要创建出来。</p>
<p>进入elasticsearch的根目录，然后创建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure>

<p><img src="/images/day11/1528552839032.png" alt="1528552839032"></p>
<ul>
<li>修改绑定的ip：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.host: 0.0.0.0 # 绑定到0.0.0.0，允许任何ip来访问</span><br></pre></td></tr></table></figure>

<p>默认只允许本机访问，修改为0.0.0.0后则可以远程访问</p>
<p>目前我们是做的单机安装，如果要做集群，只需要在这个配置文件中添加其它节点信息即可。</p>
<blockquote>
<p>elasticsearch.yml的其它可配置信息：</p>
</blockquote>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>cluster.name</td>
<td>配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称。</td>
</tr>
<tr>
<td>node.name</td>
<td>节点名，es会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</td>
</tr>
<tr>
<td>path.conf</td>
<td>设置配置文件的存储路径，tar或zip包安装默认在es根目录下的config文件夹，rpm安装默认在/etc/ elasticsearch</td>
</tr>
<tr>
<td>path.data</td>
<td>设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开</td>
</tr>
<tr>
<td>path.logs</td>
<td>设置日志文件的存储路径，默认是es根目录下的logs文件夹</td>
</tr>
<tr>
<td>path.plugins</td>
<td>设置插件的存放路径，默认是es根目录下的plugins文件夹</td>
</tr>
<tr>
<td>bootstrap.memory_lock</td>
<td>设置为true可以锁住ES使用的内存，避免内存进行swap</td>
</tr>
<tr>
<td>network.host</td>
<td>设置bind_host和publish_host，设置为0.0.0.0允许外网访问</td>
</tr>
<tr>
<td>http.port</td>
<td>设置对外服务的http端口，默认为9200。</td>
</tr>
<tr>
<td>transport.tcp.port</td>
<td>集群结点之间通信端口</td>
</tr>
<tr>
<td>discovery.zen.ping.timeout</td>
<td>设置ES自动发现节点连接超时的时间，默认为3秒，如果网络延迟高可设置大些</td>
</tr>
<tr>
<td>discovery.zen.minimum_master_nodes</td>
<td>主结点数量的最少值 ,此值的公式为：(master_eligible_nodes / 2) + 1 ，比如：有3个符合要求的主结点，那么这里要设置为2</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h2><p>进入elasticsearch/bin目录，可以看到下面的执行文件：</p>
<p><img src="/images/day11/1528553103468.png" alt="1528553103468"></p>
<p>然后输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure>

<p>发现报错了，启动失败。</p>
<h3 id="1-3-1-错误1：内核过低"><a href="#1-3-1-错误1：内核过低" class="headerlink" title="1.3.1.错误1：内核过低"></a>1.3.1.错误1：内核过低</h3><p><img src="/images/day11/1528598315714.png" alt="1528598315714"></p>
<p>我们使用的是centos6，其linux内核版本为2.6。而Elasticsearch的插件要求至少3.5以上版本。不过没关系，我们禁用这个插件即可。</p>
<p>修改elasticsearch.yml文件，在最下面添加如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure>

<p>然后重启</p>
<h3 id="1-3-2-错误2：文件权限不足"><a href="#1-3-2-错误2：文件权限不足" class="headerlink" title="1.3.2.错误2：文件权限不足"></a>1.3.2.错误2：文件权限不足</h3><p>再次启动，又出错了：</p>
<p><img src="/images/day11/1528599116836.png" alt="1528599116836"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1]: max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</span><br></pre></td></tr></table></figure>

<p>我们用的是leyou用户，而不是root，所以文件权限不足。</p>
<p><strong>首先用root用户登录。</strong></p>
<p>然后修改配置文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure>

<p>添加下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line"></span><br><span class="line">* hard nofile 131072</span><br><span class="line"></span><br><span class="line">* soft nproc 4096</span><br><span class="line"></span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-错误3：线程数不够"><a href="#1-3-3-错误3：线程数不够" class="headerlink" title="1.3.3.错误3：线程数不够"></a>1.3.3.错误3：线程数不够</h3><p>刚才报错中，还有一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1]: max number of threads [1024] for user [leyou] is too low, increase to at least [4096]</span><br></pre></td></tr></table></figure>

<p>这是线程数不够。</p>
<p>继续修改配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.d/90-nproc.conf</span><br></pre></td></tr></table></figure>

<p>修改下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* soft nproc 1024</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* soft nproc 4096</span><br></pre></td></tr></table></figure>

<h3 id="1-3-4-错误4：进程虚拟内存"><a href="#1-3-4-错误4：进程虚拟内存" class="headerlink" title="1.3.4.错误4：进程虚拟内存"></a>1.3.4.错误4：进程虚拟内存</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[3]: max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>

<p>vm.max_map_count：限制一个进程可以拥有的VMA(虚拟内存区域)的数量，继续修改配置文件， ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>添加下面内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure>

<p>然后执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="1-3-5-重启终端窗口"><a href="#1-3-5-重启终端窗口" class="headerlink" title="1.3.5.重启终端窗口"></a>1.3.5.重启终端窗口</h3><p>所有错误修改完毕，一定要重启你的 Xshell终端，否则配置无效。</p>
<h3 id="1-3-6-启动"><a href="#1-3-6-启动" class="headerlink" title="1.3.6.启动"></a>1.3.6.启动</h3><p>再次启动，终于成功了！</p>
<p><img src="/images/day11/1528603044862.png" alt="1528603044862"></p>
<p>可以看到绑定了两个端口:</p>
<ul>
<li>9300：集群节点间通讯接口</li>
<li>9200：客户端访问接口</li>
</ul>
<p>我们在浏览器中访问：<a href="http://192.168.56.101:9200" target="_blank" rel="noopener">http://192.168.56.101:9200</a></p>
<p><img src="/images/day11/1528611090621.png" alt="1528611090621"></p>
<h2 id="1-4-安装kibana"><a href="#1-4-安装kibana" class="headerlink" title="1.4.安装kibana"></a>1.4.安装kibana</h2><h3 id="1-4-1-什么是Kibana？"><a href="#1-4-1-什么是Kibana？" class="headerlink" title="1.4.1.什么是Kibana？"></a>1.4.1.什么是Kibana？</h3><p><img src="/images/day11/1528603530298.png" alt="1528603530298"></p>
<p>Kibana是一个基于Node.js的Elasticsearch索引库数据统计工具，可以利用Elasticsearch的聚合功能，生成各种图表，如柱形图，线状图，饼图等。</p>
<p>而且还提供了操作Elasticsearch索引数据的控制台，并且提供了一定的API提示，非常有利于我们学习Elasticsearch的语法。</p>
<h3 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2.安装"></a>1.4.2.安装</h3><p>因为Kibana依赖于node，我们的虚拟机没有安装node，而window中安装过。所以我们选择在window下使用kibana。</p>
<p>最新版本与elasticsearch保持一致，也是6.3.0</p>
<p><img src="/images/day11/1528611218599.png" alt="1528611218599"></p>
<p>解压到特定目录即可</p>
<h3 id="1-4-3-配置运行"><a href="#1-4-3-配置运行" class="headerlink" title="1.4.3.配置运行"></a>1.4.3.配置运行</h3><blockquote>
<p>配置</p>
</blockquote>
<p>进入安装目录下的config目录，修改kibana.yml文件：</p>
<p>修改elasticsearch服务器的地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elasticsearch.url: &quot;http://192.168.56.101:9200&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<p>进入安装目录下的bin目录：</p>
<p><img src="/images/day11/1528612108406.png" alt="1528612108406"></p>
<p>双击运行：</p>
<p><img src="/images/day11/1528612216033.png" alt="1528612216033"></p>
<p>发现kibana的监听端口是5601</p>
<p>我们访问：<a href="http://127.0.0.1:5601" target="_blank" rel="noopener">http://127.0.0.1:5601</a></p>
<p><img src="/images/day11/1528612265677.png" alt="1528612265677"></p>
<h3 id="1-4-4-控制台"><a href="#1-4-4-控制台" class="headerlink" title="1.4.4.控制台"></a>1.4.4.控制台</h3><p>选择左侧的DevTools菜单，即可进入控制台页面：</p>
<p><img src="/images/day11/1528612350020.png" alt="1528612350020"></p>
<p>在页面右侧，我们就可以输入请求，访问Elasticsearch了。</p>
<p><img src="/images/day11/1528612514556.png" alt="1528612514556"></p>
<h2 id="1-5-安装ik分词器"><a href="#1-5-安装ik分词器" class="headerlink" title="1.5.安装ik分词器"></a>1.5.安装ik分词器</h2><p>Lucene的IK分词器早在2012年已经没有维护了，现在我们要使用的是在其基础上维护升级的版本，并且开发为ElasticSearch的集成插件了，与Elasticsearch一起维护升级，版本也保持一致，最新版本：6.3.0</p>
<h3 id="1-5-1-安装"><a href="#1-5-1-安装" class="headerlink" title="1.5.1.安装"></a>1.5.1.安装</h3><p>上传课前资料中的zip包，解压到Elasticsearch目录的plugins目录中：</p>
<p><img src="/images/day11/1528612654570.png" alt="1526482432181"></p>
<p>使用unzip命令解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip elasticsearch-analysis-ik-6.3.0.zip -d ik-analyzer</span><br></pre></td></tr></table></figure>

<p>然后重启elasticsearch：</p>
<p><img src="/images/day11/1528612928524.png" alt="1528612928524"></p>
<h3 id="1-5-2-测试"><a href="#1-5-2-测试" class="headerlink" title="1.5.2.测试"></a>1.5.2.测试</h3><p>大家先不管语法，我们先测试一波。</p>
<p>在kibana控制台输入下面的请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">  &quot;text&quot;:     &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行得到结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;我&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 0,</span><br><span class="line">      &quot;end_offset&quot;: 1,</span><br><span class="line">      &quot;type&quot;: &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;是&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 1,</span><br><span class="line">      &quot;end_offset&quot;: 2,</span><br><span class="line">      &quot;type&quot;: &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;中国人&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 2,</span><br><span class="line">      &quot;end_offset&quot;: 5,</span><br><span class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;中国&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 2,</span><br><span class="line">      &quot;end_offset&quot;: 4,</span><br><span class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot;: 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;国人&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 3,</span><br><span class="line">      &quot;end_offset&quot;: 5,</span><br><span class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot;: 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-7-API"><a href="#1-7-API" class="headerlink" title="1.7.API"></a>1.7.API</h2><p>Elasticsearch提供了Rest风格的API，即http请求接口，而且也提供了各种语言的客户端API</p>
<h3 id="1-7-1-Rest风格API"><a href="#1-7-1-Rest风格API" class="headerlink" title="1.7.1.Rest风格API"></a>1.7.1.Rest风格API</h3><p>文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p>
<p><img src="/images/day11/1526518410240.png" alt="1526518410240"></p>
<h3 id="1-7-2-客户端API"><a href="#1-7-2-客户端API" class="headerlink" title="1.7.2.客户端API"></a>1.7.2.客户端API</h3><p>Elasticsearch支持的客户端非常多：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p>
<p><img src="/images/day11/1528613714338.png" alt="1528613714338"></p>
<p>点击Java Rest Client后，你会发现又有两个：</p>
<p><img src="/images/day11/1528613788606.png" alt="1528613788606"></p>
<p>Low Level Rest Client是低级别封装，提供一些基础功能，但更灵活</p>
<p>High Level Rest Client，是在Low  Level Rest Client基础上进行的高级别封装，功能更丰富和完善，而且API会变的简单</p>
<p> <img src="/images/day11/1526518875072.png" alt="1526518875072"></p>
<h3 id="1-7-3-如何学习"><a href="#1-7-3-如何学习" class="headerlink" title="1.7.3.如何学习"></a>1.7.3.如何学习</h3><p>建议先学习Rest风格API，了解发起请求的底层实现，请求体格式等。</p>
<h1 id="2-操作索引"><a href="#2-操作索引" class="headerlink" title="2.操作索引"></a>2.操作索引</h1><h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1.基本概念"></a>2.1.基本概念</h2><p>Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。</p>
<p>对比关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引（indices）--------------------------------Databases 数据库</span><br><span class="line"></span><br><span class="line">  类型（type）-----------------------------Table 数据表</span><br><span class="line"></span><br><span class="line">     文档（Document）----------------Row 行</span><br><span class="line"></span><br><span class="line">	   字段（Field）-------------------Columns 列</span><br></pre></td></tr></table></figure>

<p>详细说明：</p>
<table>
<thead>
<tr>
<th>概念</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>索引库（indices)</td>
<td>indices是index的复数，代表许多的索引，</td>
</tr>
<tr>
<td>类型（type）</td>
<td>类型是模拟mysql中的table概念，一个索引库下可以有不同类型的索引，比如商品索引，订单索引，其数据格式不同。不过这会导致索引库混乱，因此未来版本中会移除这个概念</td>
</tr>
<tr>
<td>文档（document）</td>
<td>存入索引库原始的数据。比如每一条商品信息，就是一个文档</td>
</tr>
<tr>
<td>字段（field）</td>
<td>文档中的属性</td>
</tr>
<tr>
<td>映射配置（mappings）</td>
<td>字段的数据类型、属性、是否索引、是否存储等特性</td>
</tr>
</tbody></table>
<p>是不是与Lucene和solr中的概念类似。</p>
<p>另外，在SolrCloud中，有一些集群相关的概念，在Elasticsearch也有类似的：</p>
<ul>
<li>索引集（Indices，index的复数）：逻辑上的完整索引 collection1 </li>
<li>分片（shard）：数据拆分后的各个部分</li>
<li>副本（replica）：每个分片的复制</li>
</ul>
<p>要注意的是：Elasticsearch本身就是分布式的，因此即便你只有一个节点，Elasticsearch默认也会对你的数据进行分片和副本操作，当你向集群添加新数据时，数据也会在新加入的节点中进行平衡。</p>
<h2 id="2-2-创建索引"><a href="#2-2-创建索引" class="headerlink" title="2.2.创建索引"></a>2.2.创建索引</h2><h3 id="2-2-1-语法"><a href="#2-2-1-语法" class="headerlink" title="2.2.1.语法"></a>2.2.1.语法</h3><p>Elasticsearch采用Rest风格API，因此其API就是一次http请求，你可以用任何工具发起http请求</p>
<p>创建索引的请求格式：</p>
<ul>
<li><p>请求方式：PUT</p>
</li>
<li><p>请求路径：/索引库名</p>
</li>
<li><p>请求参数：json格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>settings：索引库的设置<ul>
<li>number_of_shards：分片数量</li>
<li>number_of_replicas：副本数量</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2-2-测试"><a href="#2-2-2-测试" class="headerlink" title="2.2.2.测试"></a>2.2.2.测试</h3><p>我们先用RestClient来试试</p>
<p><img src="/images/day11/1528615921930.png" alt="1528615921930"></p>
<p>响应：</p>
<p><img src="/images/day11/1528615945473.png" alt="1528615945473"></p>
<p>可以看到索引创建成功了。</p>
<h3 id="2-2-3-使用kibana创建"><a href="#2-2-3-使用kibana创建" class="headerlink" title="2.2.3.使用kibana创建"></a>2.2.3.使用kibana创建</h3><p>kibana的控制台，可以对http请求进行简化，示例：</p>
<p><img src="/images/day11/1528616088691.png" alt="1528616088691"></p>
<p>相当于是省去了elasticsearch的服务器地址</p>
<p>而且还有语法提示，非常舒服。</p>
<h2 id="2-3-查看索引设置"><a href="#2-3-查看索引设置" class="headerlink" title="2.3.查看索引设置"></a>2.3.查看索引设置</h2><blockquote>
<p>语法</p>
</blockquote>
<p>Get请求可以帮我们查看索引信息，格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /索引库名</span><br></pre></td></tr></table></figure>

<p><img src="/images/day11/1528616233409.png" alt="1528616233409"></p>
<p>或者，我们可以使用*来查询所有索引库配置：</p>
<p><img src="/images/day11/1528616305800.png" alt="1528616305800"></p>
<h2 id="2-4-删除索引"><a href="#2-4-删除索引" class="headerlink" title="2.4.删除索引"></a>2.4.删除索引</h2><p>删除索引使用DELETE请求</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE /索引库名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p><img src="/images/day11/1528616383952.png" alt="1528616383952"></p>
<p>再次查看heima2：</p>
<p><img src="/images/day11/1528616452713.png" alt="1528616452713"></p>
<p>当然，我们也可以用HEAD请求，查看索引是否存在：</p>
<p><img src="/images/day11/1528616489638.png" alt="1528616489638"></p>
<h2 id="2-5-映射配置"><a href="#2-5-映射配置" class="headerlink" title="2.5.映射配置"></a>2.5.映射配置</h2><p>索引有了，接下来肯定是添加数据。但是，在添加数据之前必须定义映射。</p>
<p>什么是映射？</p>
<blockquote>
<p>映射是定义文档的过程，文档包含哪些字段，这些字段是否保存，是否索引，是否分词等</p>
</blockquote>
<p>只有配置清楚，Elasticsearch才会帮我们进行索引库的创建（不一定）</p>
<h3 id="2-5-1-创建映射字段"><a href="#2-5-1-创建映射字段" class="headerlink" title="2.5.1.创建映射字段"></a>2.5.1.创建映射字段</h3><blockquote>
<p>语法</p>
</blockquote>
<p>请求方式依然是PUT </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT /索引库名/_mapping/类型名称</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;字段名&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;类型&quot;,</span><br><span class="line">      &quot;index&quot;: true，</span><br><span class="line">      &quot;store&quot;: true，</span><br><span class="line">      &quot;analyzer&quot;: &quot;分词器&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>类型名称：就是前面将的type的概念，类似于数据库中的不同表<br>字段名：任意填写    ，可以指定许多属性，例如：</li>
<li>type：类型，可以是text、long、short、date、integer、object等</li>
<li>index：是否索引，默认为true</li>
<li>store：是否存储，默认为false</li>
<li>analyzer：分词器，这里的<code>ik_max_word</code>即使用ik分词器</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>发起请求：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT heima/_mapping/goods</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"images"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">      <span class="attr">"index"</span>: <span class="string">"false"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"price"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-2-查看映射关系"><a href="#2-5-2-查看映射关系" class="headerlink" title="2.5.2.查看映射关系"></a>2.5.2.查看映射关系</h3><blockquote>
<p>语法：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /索引库名/_mapping</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /heima/_mapping</span><br></pre></td></tr></table></figure>

<blockquote>
<p>响应：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"heima"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"goods"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-3-字段属性详解"><a href="#2-5-3-字段属性详解" class="headerlink" title="2.5.3.字段属性详解"></a>2.5.3.字段属性详解</h3><h4 id="2-5-3-1-type"><a href="#2-5-3-1-type" class="headerlink" title="2.5.3.1.type"></a>2.5.3.1.type</h4><p>Elasticsearch中支持的数据类型非常丰富：</p>
<p><img src="/images/day11/1531712631982.png" alt="1531712631982"></p>
<p>我们说几个关键的：</p>
<ul>
<li><p>String类型，又分两种：</p>
<ul>
<li>text：可分词，不可参与聚合</li>
<li>keyword：不可分词，数据会作为完整字段进行匹配，可以参与聚合</li>
</ul>
</li>
<li><p>Numerical：数值类型，分两类</p>
<ul>
<li>基本数据类型：long、interger、short、byte、double、float、half_float</li>
<li>浮点数的高精度类型：scaled_float<ul>
<li>需要指定一个精度因子，比如10或100。elasticsearch会把真实值乘以这个因子后存储，取出时再还原。</li>
</ul>
</li>
</ul>
</li>
<li><p>Date：日期类型</p>
<p>elasticsearch可以对日期格式化为字符串存储，但是建议我们存储为毫秒值，存储为long，节省空间。</p>
</li>
</ul>
<h4 id="2-5-3-2-index"><a href="#2-5-3-2-index" class="headerlink" title="2.5.3.2.index"></a>2.5.3.2.index</h4><p>index影响字段的索引情况。</p>
<ul>
<li>true：字段会被索引，则可以用来进行搜索。默认值就是true</li>
<li>false：字段不会被索引，不能用来搜索</li>
</ul>
<p>index的默认值就是true，也就是说你不进行任何配置，所有字段都会被索引。</p>
<p>但是有些字段是我们不希望被索引的，比如商品的图片信息，就需要手动设置index为false。</p>
<h4 id="2-5-3-3-store"><a href="#2-5-3-3-store" class="headerlink" title="2.5.3.3.store"></a>2.5.3.3.store</h4><p>是否将数据进行额外存储。</p>
<p>在学习lucene和solr时，我们知道如果一个字段的store设置为false，那么在文档列表中就不会有这个字段的值，用户的搜索结果中不会显示出来。</p>
<p>但是在Elasticsearch中，即便store设置为false，也可以搜索到结果。</p>
<p>原因是Elasticsearch在创建文档索引时，会将文档中的原始数据备份，保存到一个叫做<code>_source</code>的属性中。而且我们可以通过过滤<code>_source</code>来选择哪些要显示，哪些不显示。</p>
<p>而如果设置store为true，就会在<code>_source</code>以外额外存储一份数据，多余，因此一般我们都会将store设置为false，事实上，<strong>store的默认值就是false。</strong></p>
<h4 id="2-5-3-4-boost"><a href="#2-5-3-4-boost" class="headerlink" title="2.5.3.4.boost"></a>2.5.3.4.boost</h4><p>激励因子，这个与lucene中一样</p>
<p>其它的不再一一讲解，用的不多，大家参考官方文档：</p>
<p><img src="/images/day11/1531713176079.png" alt="1531713176079"></p>
<h2 id="2-6-新增数据"><a href="#2-6-新增数据" class="headerlink" title="2.6.新增数据"></a>2.6.新增数据</h2><h3 id="2-6-1-随机生成id"><a href="#2-6-1-随机生成id" class="headerlink" title="2.6.1.随机生成id"></a>2.6.1.随机生成id</h3><p>通过POST请求，可以向一个已经存在的索引库中添加数据。</p>
<blockquote>
<p>语法：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /索引库名/类型名</span><br><span class="line">&#123;</span><br><span class="line">    &quot;key&quot;:&quot;value&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/goods/</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"小米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2699.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过kibana查看数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> _search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>:&#123;</span><br><span class="line">        <span class="string">"match_all"</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>_source</code>：源文档信息，所有的数据都在里面。</li>
<li><code>_id</code>：这条文档的唯一标示，与文档自己的id字段没有关联</li>
</ul>
<h3 id="2-6-2-自定义id"><a href="#2-6-2-自定义id" class="headerlink" title="2.6.2.自定义id"></a>2.6.2.自定义id</h3><p>如果我们想要自己新增的时候指定id，可以这么做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /索引库名/类型/id值</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/goods/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2899.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到的数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="number">2899</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-3-智能判断"><a href="#2-6-3-智能判断" class="headerlink" title="2.6.3.智能判断"></a>2.6.3.智能判断</h3><p>在学习Solr时我们发现，我们在新增数据时，只能使用提前配置好映射属性的字段，否则就会报错。</p>
<p>不过在Elasticsearch中并没有这样的规定。</p>
<p>事实上Elasticsearch非常智能，你不需要给索引库设置任何mapping映射，它也可以根据你输入的数据来判断类型，动态添加数据映射。</p>
<p>测试一下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/goods/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"超米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2899.00</span>,</span><br><span class="line">    <span class="attr">"stock"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们额外添加了stock库存，和saleable是否上架两个字段。</p>
<p>来看结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"超米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="number">2899</span>,</span><br><span class="line">    <span class="attr">"stock"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在看下索引库的映射关系:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"heima"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"goods"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"saleable"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"boolean"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"stock"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>stock和saleable都被成功映射了。</p>
<h2 id="2-7-修改数据"><a href="#2-7-修改数据" class="headerlink" title="2.7.修改数据"></a>2.7.修改数据</h2><p>把刚才新增的请求方式改为PUT，就是修改了。不过修改必须指定id，</p>
<ul>
<li>id对应文档存在，则修改</li>
<li>id对应文档不存在，则新增</li>
</ul>
<p>比如，我们把id为3的数据进行修改：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima/goods/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"超大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3899.00</span>,</span><br><span class="line">    <span class="attr">"stock"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"超大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span>,</span><br><span class="line">          <span class="attr">"stock"</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">"saleable"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-8-删除数据"><a href="#2-8-删除数据" class="headerlink" title="2.8.删除数据"></a>2.8.删除数据</h2><p>删除使用DELETE请求，同样，需要根据id进行删除：</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE /索引库名/类型名/id值</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<p><img src="/images/day11/1531727693743.png" alt="1531727693743"></p>
<h1 id="3-查询"><a href="#3-查询" class="headerlink" title="3.查询"></a>3.查询</h1><p>我们从4块来讲查询：</p>
<ul>
<li>基本查询</li>
<li><code>_source</code>过滤</li>
<li>结果过滤</li>
<li>高级查询</li>
<li>排序</li>
</ul>
<h2 id="3-1-基本查询"><a href="#3-1-基本查询" class="headerlink" title="3.1.基本查询"></a>3.1.基本查询</h2><blockquote>
<p>基本语法</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /索引库名/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"查询类型"</span>:&#123;</span><br><span class="line">            <span class="attr">"查询条件"</span>:<span class="string">"查询条件值"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的query代表一个查询对象，里面可以有不同的查询属性</p>
<ul>
<li>查询类型：<ul>
<li>例如：<code>match_all</code>， <code>match</code>，<code>term</code> ， <code>range</code> 等等</li>
</ul>
</li>
<li>查询条件：查询条件会根据类型的不同，写法也有差异，后面详细讲解</li>
</ul>
<h3 id="3-1-1-查询所有（match-all"><a href="#3-1-1-查询所有（match-all" class="headerlink" title="3.1.1 查询所有（match_all)"></a>3.1.1 查询所有（match_all)</h3><blockquote>
<p>示例：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>query</code>：代表查询对象</li>
<li><code>match_all</code>：代表查询所有</li>
</ul>
<blockquote>
<p>结果：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>took：查询花费时间，单位是毫秒</li>
<li>time_out：是否超时</li>
<li>_shards：分片信息</li>
<li>hits：搜索结果总览对象<ul>
<li>total：搜索到的总条数</li>
<li>max_score：所有结果中文档得分的最高分</li>
<li>hits：搜索结果的文档对象数组，每个元素是一条搜索到的文档信息<ul>
<li>_index：索引库</li>
<li>_type：文档类型</li>
<li>_id：文档id</li>
<li>_score：文档得分</li>
<li>_source：文档的源数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-1-2-匹配查询（match）"><a href="#3-1-2-匹配查询（match）" class="headerlink" title="3.1.2 匹配查询（match）"></a>3.1.2 匹配查询（match）</h3><p>我们先加入一条数据，便于测试：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima/goods/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"小米电视4A"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3899.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，索引库中有2部手机，1台电视：</p>
<p> <img src="/images/day11/1531728628406.png" alt="1531728628406"></p>
<ul>
<li>or关系</li>
</ul>
<p><code>match</code>类型查询，会把查询条件进行分词，然后进行查询,多个词条之间是or的关系</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"title"</span>:<span class="string">"小米电视"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"hits": &#123;</span><br><span class="line">    "total": 2,</span><br><span class="line">    "max_score": 0.6931472,</span><br><span class="line">    "hits": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">            <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">            <span class="attr">"_id"</span>: <span class="string">"tmUBomQB_mwm6wH_EC1-"</span>,</span><br><span class="line">            <span class="attr">"_score"</span>: <span class="number">0.6931472</span>,</span><br><span class="line">            <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">                <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">                <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">            <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">            <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">            <span class="attr">"_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">            <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span>,</span><br><span class="line">                <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">                <span class="attr">"price"</span>: <span class="number">3899</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的案例中，不仅会查询到电视，而且与小米相关的都会查询到，多个词之间是<code>or</code>的关系。</p>
<ul>
<li>and关系</li>
</ul>
<p>某些情况下，我们需要更精确查找，我们希望这个关系变成<code>and</code>，可以这样做：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>: <span class="string">"小米电视"</span>,</span><br><span class="line">            <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本例中，只有同时包含<code>小米</code>和<code>电视</code>的词条才会被搜索到。</p>
<ul>
<li>or和and之间？</li>
</ul>
<p>在 <code>or</code> 与 <code>and</code> 间二选一有点过于非黑即白。 如果用户给定的条件分词后有 5 个查询词项，想查找只包含其中 4 个词的文档，该如何处理？将 operator 操作符参数设置成 <code>and</code> 只会将此文档排除。</p>
<p>有时候这正是我们期望的，但在全文搜索的大多数应用场景下，我们既想包含那些可能相关的文档，同时又排除那些不太相关的。换句话说，我们想要处于中间某种结果。</p>
<p><code>match</code> 查询支持 <code>minimum_should_match</code> 最小匹配参数， 这让我们可以指定必须匹配的词项数用来表示一个文档是否相关。我们可以将其设置为某个具体数字，更常用的做法是将其设置为一个<code>百分数</code>，因为我们无法控制用户搜索时输入的单词数量：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"title"</span>:&#123;</span><br><span class="line">            	<span class="attr">"query"</span>:<span class="string">"小米曲面电视"</span>,</span><br><span class="line">            	<span class="attr">"minimum_should_match"</span>: <span class="string">"75%"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本例中，搜索语句可以分为3个词，如果使用and关系，需要同时满足3个词才会被搜索到。这里我们采用最小品牌数：75%，那么也就是说只要匹配到总词条数量的75%即可，这里3*75% 约等于2。所以只要包含2个词条就算满足条件了。</p>
<p>结果：</p>
<p><img src="/images/day11/1531730367614.png" alt="1531730367614"></p>
<h3 id="3-1-3-多字段查询（multi-match）"><a href="#3-1-3-多字段查询（multi-match）" class="headerlink" title="3.1.3 多字段查询（multi_match）"></a>3.1.3 多字段查询（multi_match）</h3><p><code>multi_match</code>与<code>match</code>类似，不同的是它可以在多个字段中查询</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>:    <span class="string">"小米"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>:   [ <span class="string">"title"</span>, <span class="string">"subTitle"</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本例中，我们会在title字段和subtitle字段中查询<code>小米</code>这个词</p>
<h3 id="3-1-4-词条匹配-term"><a href="#3-1-4-词条匹配-term" class="headerlink" title="3.1.4 词条匹配(term)"></a>3.1.4 词条匹配(term)</h3><p><code>term</code> 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些<strong>未分词</strong>的字符串</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"term"</span>:&#123;</span><br><span class="line">            <span class="attr">"price"</span>:<span class="number">2699.00</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-5-多词条精确匹配-terms"><a href="#3-1-5-多词条精确匹配-terms" class="headerlink" title="3.1.5 多词条精确匹配(terms)"></a>3.1.5 多词条精确匹配(terms)</h3><p><code>terms</code> 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"terms"</span>:&#123;</span><br><span class="line">            <span class="attr">"price"</span>:[<span class="number">2699.00</span>,<span class="number">2899.00</span>,<span class="number">3899.00</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-结果过滤"><a href="#3-2-结果过滤" class="headerlink" title="3.2.结果过滤"></a>3.2.结果过滤</h2><p>默认情况下，elasticsearch在搜索的结果中，会把文档中保存在<code>_source</code>的所有字段都返回。</p>
<p>如果我们只想获取其中的部分字段，我们可以添加<code>_source</code>的过滤</p>
<h3 id="3-2-1-直接指定字段"><a href="#3-2-1-直接指定字段" class="headerlink" title="3.2.1.直接指定字段"></a>3.2.1.直接指定字段</h3><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: [<span class="string">"title"</span>,<span class="string">"price"</span>],</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回的结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-指定includes和excludes"><a href="#3-2-2-指定includes和excludes" class="headerlink" title="3.2.2.指定includes和excludes"></a>3.2.2.指定includes和excludes</h3><p>我们也可以通过：</p>
<ul>
<li>includes：来指定想要显示的字段</li>
<li>excludes：来指定不想要显示的字段</li>
</ul>
<p>二者都是可选的。</p>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"includes"</span>:[<span class="string">"title"</span>,<span class="string">"price"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与下面的结果将是一样的：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">     <span class="attr">"excludes"</span>: [<span class="string">"images"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-高级查询"><a href="#3-3-高级查询" class="headerlink" title="3.3 高级查询"></a>3.3 高级查询</h2><h3 id="3-3-1-布尔组合（bool"><a href="#3-3-1-布尔组合（bool" class="headerlink" title="3.3.1 布尔组合（bool)"></a>3.3.1 布尔组合（bool)</h3><p><code>bool</code>把各种其它查询通过<code>must</code>（与）、<code>must_not</code>（非）、<code>should</code>（或）的方式进行组合</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        	<span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"大米"</span> &#125;&#125;,</span><br><span class="line">        	<span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>:  <span class="string">"电视"</span> &#125;&#125;,</span><br><span class="line">        	<span class="attr">"should"</span>:   &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"手机"</span> &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-范围查询-range"><a href="#3-3-2-范围查询-range" class="headerlink" title="3.3.2 范围查询(range)"></a>3.3.2 范围查询(range)</h3><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">            <span class="attr">"price"</span>: &#123;</span><br><span class="line">                <span class="attr">"gte"</span>:  <span class="number">1000.0</span>,</span><br><span class="line">                <span class="attr">"lt"</span>:   <span class="number">2800.00</span></span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>range</code>查询允许以下字符：</p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">gt</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">gte</td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center">lt</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">lte</td>
<td align="center">小于等于</td>
</tr>
</tbody></table>
<h3 id="3-3-3-模糊查询-fuzzy"><a href="#3-3-3-模糊查询-fuzzy" class="headerlink" title="3.3.3 模糊查询(fuzzy)"></a>3.3.3 模糊查询(fuzzy)</h3><p>我们新增一个商品：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/goods/4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"apple手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">6899.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>fuzzy</code> 查询是 <code>term</code> 查询的模糊等价。它允许用户搜索词条与实际词条的拼写出现偏差，但是偏差的编辑距离不得超过2：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"fuzzy"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"appla"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的查询，也能查询到apple手机</p>
<p>我们可以通过<code>fuzziness</code>来指定允许的编辑距离：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"fuzzy"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"appla"</span>,</span><br><span class="line">            <span class="attr">"fuzziness"</span>:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-过滤-filter"><a href="#3-4-过滤-filter" class="headerlink" title="3.4 过滤(filter)"></a>3.4 过滤(filter)</h2><blockquote>
<p><strong>条件查询中进行过滤</strong></p>
</blockquote>
<p>所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且不希望过滤条件影响评分，那么就不要把过滤条件作为查询条件来用。而是使用<code>filter</code>方式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        	<span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"小米手机"</span> &#125;&#125;,</span><br><span class="line">        	<span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">2000.00</span>,<span class="attr">"lt"</span>:<span class="number">3800.00</span>&#125;&#125;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<code>filter</code>中还可以再次进行<code>bool</code>组合条件过滤。</p>
<blockquote>
<p><strong>无查询条件，直接过滤</strong></p>
</blockquote>
<p>如果一次查询只有过滤，没有查询条件，不希望进行评分，我们可以使用<code>constant_score</code>取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"constant_score"</span>:   &#123;</span><br><span class="line">            <span class="attr">"filter"</span>: &#123;</span><br><span class="line">            	 <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">2000.00</span>,<span class="attr">"lt"</span>:<span class="number">3000.00</span>&#125;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-排序"><a href="#3-5-排序" class="headerlink" title="3.5 排序"></a>3.5 排序</h2><h3 id="3-4-1-单字段排序"><a href="#3-4-1-单字段排序" class="headerlink" title="3.4.1 单字段排序"></a>3.4.1 单字段排序</h3><p><code>sort</code> 可以让我们按照不同的字段进行排序，并且通过<code>order</code>指定排序的方式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"小米手机"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-多字段排序"><a href="#3-4-2-多字段排序" class="headerlink" title="3.4.2 多字段排序"></a>3.4.2 多字段排序</h3><p>假定我们想要结合使用 price和 _score（得分） 进行查询，并且匹配的结果首先按照价格排序，然后按照相关性得分排序：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /goods/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        	<span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"小米手机"</span> &#125;&#125;,</span><br><span class="line">        	<span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">200000</span>,<span class="attr">"lt"</span>:<span class="number">300000</span>&#125;&#125;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [</span><br><span class="line">      &#123; <span class="attr">"price"</span>: &#123; <span class="attr">"order"</span>: <span class="string">"desc"</span> &#125;&#125;,</span><br><span class="line">      &#123; <span class="attr">"_score"</span>: &#123; <span class="attr">"order"</span>: <span class="string">"desc"</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-聚合aggregations"><a href="#4-聚合aggregations" class="headerlink" title="4. 聚合aggregations"></a>4. 聚合aggregations</h1><p>聚合可以让我们极其方便的实现对数据的统计、分析。例如：</p>
<ul>
<li>什么品牌的手机最受欢迎？</li>
<li>这些手机的平均价格、最高价格、最低价格？</li>
<li>这些手机每月的销售情况如何？</li>
</ul>
<p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现实时搜索效果。</p>
<h2 id="4-1-基本概念"><a href="#4-1-基本概念" class="headerlink" title="4.1 基本概念"></a>4.1 基本概念</h2><p>Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫<code>桶</code>，一个叫<code>度量</code>：</p>
<blockquote>
<p><strong>桶（bucket）</strong></p>
</blockquote>
<p>桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个<code>桶</code>，例如我们根据国籍对人划分，可以得到<code>中国桶</code>、<code>英国桶</code>，<code>日本桶</code>……或者我们按照年龄段对人进行划分：0<del>10,10</del>20,20<del>30,30</del>40等。</p>
<p>Elasticsearch中提供的划分桶的方式有很多：</p>
<ul>
<li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li>
<li>Histogram Aggregation：根据数值阶梯分组，与日期类似</li>
<li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组</li>
<li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li>
<li>……</li>
</ul>
<p>bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中往往会嵌套另一种聚合：metrics aggregations即度量</p>
<blockquote>
<p><strong>度量（metrics）</strong></p>
</blockquote>
<p>分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在ES中称为<code>度量</code></p>
<p>比较常用的一些度量聚合方式：</p>
<ul>
<li>Avg Aggregation：求平均值</li>
<li>Max Aggregation：求最大值</li>
<li>Min Aggregation：求最小值</li>
<li>Percentiles Aggregation：求百分比</li>
<li>Stats Aggregation：同时返回avg、max、min、sum、count等</li>
<li>Sum Aggregation：求和</li>
<li>Top hits Aggregation：求前几</li>
<li>Value Count Aggregation：求总数</li>
<li>……</li>
</ul>
<p>为了测试聚合，我们先批量导入一些数据</p>
<p>创建索引：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /cars</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"transactions"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"color"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"make"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：在ES中，需要进行聚合、排序、过滤的字段其处理方式比较特殊，因此不能被分词。这里我们将color和make这两个文字类型的字段设置为keyword类型，这个类型不会被分词，将来就可以参与聚合</p>
<p>导入数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /cars/transactions/_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">10000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-10-28"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">20000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-11-05"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">30000</span>, <span class="attr">"color"</span> : <span class="string">"green"</span>, <span class="attr">"make"</span> : <span class="string">"ford"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-05-18"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">15000</span>, <span class="attr">"color"</span> : <span class="string">"blue"</span>, <span class="attr">"make"</span> : <span class="string">"toyota"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-07-02"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">12000</span>, <span class="attr">"color"</span> : <span class="string">"green"</span>, <span class="attr">"make"</span> : <span class="string">"toyota"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-08-19"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">20000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-11-05"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">80000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"bmw"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-01-01"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">25000</span>, <span class="attr">"color"</span> : <span class="string">"blue"</span>, <span class="attr">"make"</span> : <span class="string">"ford"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-02-12"</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-聚合为桶"><a href="#4-2-聚合为桶" class="headerlink" title="4.2 聚合为桶"></a>4.2 聚合为桶</h2><p>首先，我们按照 汽车的颜色<code>color</code>来划分<code>桶</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123; </span><br><span class="line">        <span class="attr">"popular_colors"</span> : &#123; </span><br><span class="line">            <span class="attr">"terms"</span> : &#123; </span><br><span class="line">              <span class="attr">"field"</span> : <span class="string">"color"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>size： 查询条数，这里设置为0，因为我们不关心搜索到的数据，只关心聚合结果，提高效率</li>
<li>aggs：声明这是一个聚合查询，是aggregations的缩写<ul>
<li>popular_colors：给这次聚合起一个名字，任意。<ul>
<li>terms：划分桶的方式，这里是根据词条划分<ul>
<li>field：划分桶的字段</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"red"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"blue"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"green"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>hits：查询结果为空，因为我们设置了size为0</li>
<li>aggregations：聚合的结果</li>
<li>popular_colors：我们定义的聚合名称</li>
<li>buckets：查找到的桶，每个不同的color字段值都会形成一个桶<ul>
<li>key：这个桶对应的color字段的值</li>
<li>doc_count：这个桶中的文档数量</li>
</ul>
</li>
</ul>
<p>通过聚合的结果我们发现，目前红色的小车比较畅销！</p>
<h2 id="4-3-桶内度量"><a href="#4-3-桶内度量" class="headerlink" title="4.3 桶内度量"></a>4.3 桶内度量</h2><p>前面的例子告诉我们每个桶里面的文档数量，这很有用。 但通常，我们的应用需要提供更复杂的文档度量。 例如，每种颜色汽车的平均价格是多少？</p>
<p>因此，我们需要告诉Elasticsearch<code>使用哪个字段</code>，<code>使用何种度量方式</code>进行运算，这些信息要嵌套在<code>桶</code>内，<code>度量</code>的运算会基于<code>桶</code>内的文档进行</p>
<p>现在，我们为刚刚的聚合结果添加 求价格平均值的度量：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123; </span><br><span class="line">        <span class="attr">"popular_colors"</span> : &#123; </span><br><span class="line">            <span class="attr">"terms"</span> : &#123; </span><br><span class="line">              <span class="attr">"field"</span> : <span class="string">"color"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">                <span class="attr">"avg_price"</span>: &#123; </span><br><span class="line">                   <span class="attr">"avg"</span>: &#123;</span><br><span class="line">                      <span class="attr">"field"</span>: <span class="string">"price"</span> </span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>aggs：我们在上一个aggs(popular_colors)中添加新的aggs。可见<code>度量</code>也是一个聚合</li>
<li>avg_price：聚合的名称</li>
<li>avg：度量的类型，这里是求平均值</li>
<li>field：度量运算的字段</li>
</ul>
<p>结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">    "popular_colors": &#123;</span><br><span class="line">      "doc_count_error_upper_bound": 0,</span><br><span class="line">      "sum_other_doc_count": 0,</span><br><span class="line">      "buckets": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"red"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">32500</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"blue"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">20000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"green"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">21000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以看到每个桶中都有自己的<code>avg_price</code>字段，这是度量聚合的结果</p>
<h2 id="4-4-桶内嵌套桶"><a href="#4-4-桶内嵌套桶" class="headerlink" title="4.4 桶内嵌套桶"></a>4.4 桶内嵌套桶</h2><p>刚刚的案例中，我们在桶内嵌套度量运算。事实上桶不仅可以嵌套运算， 还可以再嵌套其它桶。也就是说在每个分组中，再分更多组。</p>
<p>比如：我们想统计每种颜色的汽车中，分别属于哪个制造商，按照<code>make</code>字段再进行分桶</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123; </span><br><span class="line">        <span class="attr">"popular_colors"</span> : &#123; </span><br><span class="line">            <span class="attr">"terms"</span> : &#123; </span><br><span class="line">              <span class="attr">"field"</span> : <span class="string">"color"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">                <span class="attr">"avg_price"</span>: &#123; </span><br><span class="line">                   <span class="attr">"avg"</span>: &#123;</span><br><span class="line">                      <span class="attr">"field"</span>: <span class="string">"price"</span> </span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"maker"</span>:&#123;</span><br><span class="line">                    <span class="attr">"terms"</span>:&#123;</span><br><span class="line">                        <span class="attr">"field"</span>:<span class="string">"make"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原来的color桶和avg计算我们不变</li>
<li>maker：在嵌套的aggs下新添一个桶，叫做maker</li>
<li>terms：桶的划分类型依然是词条</li>
<li>filed：这里根据make字段进行划分</li>
</ul>
<p>部分结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;<span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"red"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"maker"</span>: &#123;</span><br><span class="line">            <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"buckets"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"honda"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">3</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"bmw"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">32500</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"blue"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"maker"</span>: &#123;</span><br><span class="line">            <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"buckets"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"ford"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"toyota"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">20000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"green"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"maker"</span>: &#123;</span><br><span class="line">            <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"buckets"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"ford"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"toyota"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">21000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>我们可以看到，新的聚合<code>maker</code>被嵌套在原来每一个<code>color</code>的桶中。</li>
<li>每个颜色下面都根据 <code>make</code>字段进行了分组</li>
<li>我们能读取到的信息：<ul>
<li>红色车共有4辆</li>
<li>红色车的平均售价是 $32，500 美元。</li>
<li>其中3辆是 Honda 本田制造，1辆是 BMW 宝马制造。</li>
</ul>
</li>
</ul>
<h2 id="4-5-划分桶的其它方式"><a href="#4-5-划分桶的其它方式" class="headerlink" title="4.5.划分桶的其它方式"></a>4.5.划分桶的其它方式</h2><p>前面讲了，划分桶的方式有很多，例如：</p>
<ul>
<li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li>
<li>Histogram Aggregation：根据数值阶梯分组，与日期类似</li>
<li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组</li>
<li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li>
</ul>
<p>刚刚的案例中，我们采用的是Terms Aggregation，即根据词条划分桶。</p>
<p>接下来，我们再学习几个比较实用的：</p>
<h3 id="4-5-1-阶梯分桶Histogram"><a href="#4-5-1-阶梯分桶Histogram" class="headerlink" title="4.5.1.阶梯分桶Histogram"></a>4.5.1.阶梯分桶Histogram</h3><blockquote>
<p>原理：</p>
</blockquote>
<p>histogram是把数值类型的字段，按照一定的阶梯大小进行分组。你需要指定一个阶梯值（interval）来划分阶梯大小。</p>
<p>举例：</p>
<p>比如你有价格字段，如果你设定interval的值为200，那么阶梯就会是这样的：</p>
<p>0，200，400，600，…</p>
<p>上面列出的是每个阶梯的key，也是区间的启点。</p>
<p>如果一件商品的价格是450，会落入哪个阶梯区间呢？计算公式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bucket_key = Math.floor((value - offset) / interval) * interval + offset</span><br></pre></td></tr></table></figure>

<p>value：就是当前数据的值，本例中是450</p>
<p>offset：起始偏移量，默认为0</p>
<p>interval：阶梯间隔，比如200</p>
<p>因此你得到的key = Math.floor((450 - 0) / 200) * 200 + 0 = 400</p>
<blockquote>
<p>操作一下：</p>
</blockquote>
<p>比如，我们对汽车的价格进行分组，指定间隔interval为5000：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">    <span class="attr">"price"</span>:&#123;</span><br><span class="line">      <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"price"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="number">5000</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"price"</span>: &#123;</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">10000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">15000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">20000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">25000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">30000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">35000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">40000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">45000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">50000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">55000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">60000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">65000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">70000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">75000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">80000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你会发现，中间有大量的文档数量为0 的桶，看起来很丑。</p>
<p>我们可以增加一个参数min_doc_count为1，来约束最少文档数量为1，这样文档数量为0的桶会被过滤</p>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">    <span class="attr">"price"</span>:&#123;</span><br><span class="line">      <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"price"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="number">5000</span>,</span><br><span class="line">        <span class="attr">"min_doc_count"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"price"</span>: &#123;</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">10000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">15000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">20000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">25000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">30000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">80000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完美，！</p>
<p>如果你用kibana将结果变为柱形图，会更好看：</p>
<p><img src="/images/day11/1531752558505.png" alt="1531752558505"></p>
<h3 id="4-5-2-范围分桶range"><a href="#4-5-2-范围分桶range" class="headerlink" title="4.5.2.范围分桶range"></a>4.5.2.范围分桶range</h3><p>范围分桶与阶梯分桶类似，也是把数字按照阶段进行分组，只不过range方式需要你自己指定每一组的起始和结束大小。</p>
<h1 id="5-Spring-Data-Elasticsearch"><a href="#5-Spring-Data-Elasticsearch" class="headerlink" title="5.Spring Data Elasticsearch"></a>5.Spring Data Elasticsearch</h1><p>Elasticsearch提供的Java客户端有一些不太方便的地方：</p>
<ul>
<li>很多地方需要拼接Json字符串，在java中拼接字符串有多恐怖你应该懂的</li>
<li>需要自己把对象序列化为json存储</li>
<li>查询到结果也需要自己反序列化为对象</li>
</ul>
<p>因此，我们这里就不讲解原生的Elasticsearch客户端API了。</p>
<p>而是学习Spring提供的套件：Spring Data Elasticsearch。</p>
<h2 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1.简介"></a>5.1.简介</h2><p>Spring Data Elasticsearch是Spring Data项目下的一个子模块。</p>
<p>查看 Spring Data的官网：<a href="http://projects.spring.io/spring-data/" target="_blank" rel="noopener">http://projects.spring.io/spring-data/</a></p>
<p><img src="/images/day11/1531753066475.png" alt="1531753066475"></p>
<blockquote>
<p>Spring Data的使命是为数据访问提供熟悉且一致的基于Spring的编程模型，同时仍保留底层数据存储的特殊特性。</p>
<p>它使得使用数据访问技术，关系数据库和非关系数据库，map-reduce框架和基于云的数据服务变得容易。这是一个总括项目，其中包含许多特定于给定数据库的子项目。这些令人兴奋的技术项目背后，是由许多公司和开发人员合作开发的。</p>
</blockquote>
<p>Spring Data 的使命是给各种数据访问提供统一的编程接口，不管是关系型数据库（如MySQL），还是非关系数据库（如Redis），或者类似Elasticsearch这样的索引数据库。从而简化开发人员的代码，提高开发效率。</p>
<p>包含很多不同数据操作的模块：</p>
<p><img src="/images/day11/1531753715580.png" alt="1531753715580"></p>
<p>Spring Data Elasticsearch的页面：<a href="https://projects.spring.io/spring-data-elasticsearch/" target="_blank" rel="noopener">https://projects.spring.io/spring-data-elasticsearch/</a></p>
<p> <img src="/images/day11/1531754111583.png" alt="1531754111583"></p>
<p>特征：</p>
<ul>
<li>支持Spring的基于<code>@Configuration</code>的java配置方式，或者XML配置方式</li>
<li>提供了用于操作ES的便捷工具类<strong><code>ElasticsearchTemplate</code></strong>。包括实现文档到POJO之间的自动智能映射。</li>
<li>利用Spring的数据转换服务实现的功能丰富的对象映射</li>
<li>基于注解的元数据映射方式，而且可扩展以支持更多不同的数据格式</li>
<li>根据持久层接口自动生成对应实现方法，无需人工编写基本操作代码（类似mybatis，根据接口自动得到实现）。当然，也支持人工定制查询</li>
</ul>
<h2 id="5-2-创建Demo工程"><a href="#5-2-创建Demo工程" class="headerlink" title="5.2.创建Demo工程"></a>5.2.创建Demo工程</h2><p>我们使用spring脚手架新建一个demo，学习Elasticsearch</p>
<p><img src="/images/day11/1531973082475.png" alt="1531973082475"></p>
<p><img src="/images/day11/1531974312212.png" alt="1531974312212"></p>
<p>pom依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml文件配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span><span class="string">:9300</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3-实体类及注解"><a href="#5-3-实体类及注解" class="headerlink" title="5.3.实体类及注解"></a>5.3.实体类及注解</h2><p>首先我们准备好实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    Long id;</span><br><span class="line">    String title; <span class="comment">//标题</span></span><br><span class="line">    String category;<span class="comment">// 分类</span></span><br><span class="line">    String brand; <span class="comment">// 品牌</span></span><br><span class="line">    Double price; <span class="comment">// 价格</span></span><br><span class="line">    String images; <span class="comment">// 图片地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>映射</p>
</blockquote>
<p>Spring Data通过注解来声明字段的映射属性，有下面的三个注解：</p>
<ul>
<li><code>@Document</code> 作用在类，标记实体类为文档对象，一般有四个属性<ul>
<li>indexName：对应索引库名称</li>
<li>type：对应在索引库中的类型</li>
<li>shards：分片数量，默认5</li>
<li>replicas：副本数量，默认1</li>
</ul>
</li>
<li><code>@Id</code> 作用在成员变量，标记一个字段作为id主键</li>
<li><code>@Field</code> 作用在成员变量，标记为文档的字段，并指定字段映射属性：<ul>
<li>type：字段类型，取值是枚举：FieldType</li>
<li>index：是否索引，布尔类型，默认是true</li>
<li>store：是否存储，布尔类型，默认是false</li>
<li>analyzer：分词器名称：ik_max_word</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"item"</span>,type = <span class="string">"docs"</span>, shards = <span class="number">1</span>, replicas = <span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, analyzer = <span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title; <span class="comment">//标题</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">// 分类</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Double)</span><br><span class="line">    <span class="keyword">private</span> Double price; <span class="comment">// 价格</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">false</span>, type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String images; <span class="comment">// 图片地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-Template索引操作"><a href="#5-4-Template索引操作" class="headerlink" title="5.4.Template索引操作"></a>5.4.Template索引操作</h2><h3 id="5-4-1-创建索引和映射"><a href="#5-4-1-创建索引和映射" class="headerlink" title="5.4.1.创建索引和映射"></a>5.4.1.创建索引和映射</h3><blockquote>
<p>创建索引</p>
</blockquote>
<p> <img src="/images/day11/1531985485904.png" alt="1531985485904"></p>
<p>ElasticsearchTemplate中提供了创建索引的API：</p>
<p><img src="/images/day11/1531984923727.png" alt="1531984923727"></p>
<p>可以根据类的信息自动生成，也可以手动指定indexName和Settings</p>
<blockquote>
<p>映射</p>
</blockquote>
<p>映射相关的API：</p>
<p><img src="/images/day11/1531985337698.png" alt="1531985337698"></p>
<p>可以根据类的字节码信息（注解配置）来生成映射，或者手动编写映射</p>
<p>我们这里采用类的字节码信息创建索引并映射：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= ItcastElasticsearchApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">IndexTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建索引，会根据Item类的@Document注解信息来创建</span></span><br><span class="line">        elasticsearchTemplate.createIndex(Item<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 配置映射，会根据Item类中的id、Field等字段来自动完成映射</span></span><br><span class="line">        elasticsearchTemplate.putMapping(Item<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /item</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"item"</span>: &#123;</span><br><span class="line">    <span class="attr">"aliases"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"docs"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"brand"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"category"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"index"</span>: &#123;</span><br><span class="line">        <span class="attr">"refresh_interval"</span>: <span class="string">"1s"</span>,</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"provided_name"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"creation_date"</span>: <span class="string">"1525405022589"</span>,</span><br><span class="line">        <span class="attr">"store"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"fs"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="string">"0"</span>,</span><br><span class="line">        <span class="attr">"uuid"</span>: <span class="string">"4sE9SAw3Sqq1aAPz5F6OEg"</span>,</span><br><span class="line">        <span class="attr">"version"</span>: &#123;</span><br><span class="line">          <span class="attr">"created"</span>: <span class="string">"6020499"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-2-删除索引"><a href="#5-3-2-删除索引" class="headerlink" title="5.3.2.删除索引"></a>5.3.2.删除索引</h3><p>删除索引的API：</p>
<p><img src="/images/day11/1531986474606.png" alt="1526544759120"></p>
<p>可以根据类名或索引名删除。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    elasticsearchTemplate.deleteIndex(<span class="string">"heima"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p> <img src="/images/day11/1531986618059.png" alt="1531986618059"></p>
<h2 id="5-4-Repository文档操作"><a href="#5-4-Repository文档操作" class="headerlink" title="5.4.Repository文档操作"></a>5.4.Repository文档操作</h2><p>Spring Data 的强大之处，就在于你不用写任何DAO处理，自动根据方法名或类的信息进行CRUD操作。只要你定义一个接口，然后继承Repository提供的一些子接口，就能具备各种基本的CRUD功能。</p>
<p>我们只需要定义接口，然后继承它就OK了。</p>
<p> <img src="/images/day11/1531987244855.png" alt="1531987244855"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Item</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来看下Repository的继承关系：</p>
<p> <img src="/images/day11/1531986965570.png" alt="1531986965570"></p>
<p>我们看到有一个ElasticsearchRepository接口：</p>
<p><img src="/images/day11/1531987044693.png" alt="1531987044693"></p>
<h3 id="5-4-1-新增文档"><a href="#5-4-1-新增文档" class="headerlink" title="5.4.1.新增文档"></a>5.4.1.新增文档</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemRepository itemRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Item item = <span class="keyword">new</span> Item(<span class="number">1L</span>, <span class="string">"小米手机7"</span>, <span class="string">" 手机"</span>,</span><br><span class="line">                         <span class="string">"小米"</span>, <span class="number">3499.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>);</span><br><span class="line">    itemRepository.save(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>去页面查询看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /item/_search</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"docs"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机7"</span>,</span><br><span class="line">          <span class="attr">"category"</span>: <span class="string">" 手机"</span>,</span><br><span class="line">          <span class="attr">"brand"</span>: <span class="string">"小米"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3499</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/13123.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-2-批量新增"><a href="#5-4-2-批量新增" class="headerlink" title="5.4.2.批量新增"></a>5.4.2.批量新增</h3><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">2L</span>, <span class="string">"坚果手机R1"</span>, <span class="string">" 手机"</span>, <span class="string">"锤子"</span>, <span class="number">3699.00</span>, <span class="string">"http://image.leyou.com/123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">3L</span>, <span class="string">"华为META10"</span>, <span class="string">" 手机"</span>, <span class="string">"华为"</span>, <span class="number">4499.00</span>, <span class="string">"http://image.leyou.com/3.jpg"</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    itemRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次去页面查询：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"docs"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"坚果手机R1"</span>,</span><br><span class="line">          <span class="attr">"category"</span>: <span class="string">" 手机"</span>,</span><br><span class="line">          <span class="attr">"brand"</span>: <span class="string">"锤子"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/13123.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"docs"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"华为META10"</span>,</span><br><span class="line">          <span class="attr">"category"</span>: <span class="string">" 手机"</span>,</span><br><span class="line">          <span class="attr">"brand"</span>: <span class="string">"华为"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">4499</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/13123.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"docs"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机7"</span>,</span><br><span class="line">          <span class="attr">"category"</span>: <span class="string">" 手机"</span>,</span><br><span class="line">          <span class="attr">"brand"</span>: <span class="string">"小米"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3499</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/13123.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-3-修改文档"><a href="#5-4-3-修改文档" class="headerlink" title="5.4.3.修改文档"></a>5.4.3.修改文档</h3><p>修改和新增是同一个接口，区分的依据就是id，这一点跟我们在页面发起PUT请求是类似的。</p>
<h3 id="5-4-4-基本查询"><a href="#5-4-4-基本查询" class="headerlink" title="5.4.4.基本查询"></a>5.4.4.基本查询</h3><p>ElasticsearchRepository提供了一些基本的查询方法：</p>
<p><img src="/images/day11/1531989728869.png" alt="1531989728869"></p>
<p>我们来试试查询所有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Item&gt; optional = <span class="keyword">this</span>.itemRepository.findById(<span class="number">1l</span>);</span><br><span class="line">    System.out.println(optional.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 查询全部，并按照价格降序排序</span></span><br><span class="line">    Iterable&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.findAll(Sort.by(Sort.Direction.DESC, <span class="string">"price"</span>));</span><br><span class="line">    items.forEach(item-&gt; System.out.println(item));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/day11/1531990510740.png" alt="1531990510740"></p>
<h3 id="5-4-5-自定义方法"><a href="#5-4-5-自定义方法" class="headerlink" title="5.4.5.自定义方法"></a>5.4.5.自定义方法</h3><p>Spring Data 的另一个强大功能，是根据方法名称自动实现功能。</p>
<p>比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。</p>
<p>当然，方法名称要符合一定的约定：</p>
<table>
<thead>
<tr>
<th>Keyword</th>
<th>Sample</th>
<th>Elasticsearch Query String</th>
</tr>
</thead>
<tbody><tr>
<td><code>And</code></td>
<td><code>findByNameAndPrice</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></td>
</tr>
<tr>
<td><code>Or</code></td>
<td><code>findByNameOrPrice</code></td>
<td><code>{&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></td>
</tr>
<tr>
<td><code>Is</code></td>
<td><code>findByName</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td>
</tr>
<tr>
<td><code>Not</code></td>
<td><code>findByNameNot</code></td>
<td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td>
</tr>
<tr>
<td><code>Between</code></td>
<td><code>findByPriceBetween</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>LessThanEqual</code></td>
<td><code>findByPriceLessThan</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>GreaterThanEqual</code></td>
<td><code>findByPriceGreaterThan</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Before</code></td>
<td><code>findByPriceBefore</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>After</code></td>
<td><code>findByPriceAfter</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Like</code></td>
<td><code>findByNameLike</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>StartingWith</code></td>
<td><code>findByNameStartingWith</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>EndingWith</code></td>
<td><code>findByNameEndingWith</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Contains/Containing</code></td>
<td><code>findByNameContaining</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>In</code></td>
<td><code>findByNameIn(Collection&lt;String&gt;names)</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}} ]}}}}</code></td>
</tr>
<tr>
<td><code>NotIn</code></td>
<td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td>
<td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;bool&quot; : {&quot;should&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}}}</code></td>
</tr>
<tr>
<td><code>Near</code></td>
<td><code>findByStoreNear</code></td>
<td><code>Not Supported Yet !</code></td>
</tr>
<tr>
<td><code>True</code></td>
<td><code>findByAvailableTrue</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td>
</tr>
<tr>
<td><code>False</code></td>
<td><code>findByAvailableFalse</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : false}}}}</code></td>
</tr>
<tr>
<td><code>OrderBy</code></td>
<td><code>findByAvailableTrueOrderByNameDesc</code></td>
<td><code>{&quot;sort&quot; : [{ &quot;name&quot; : {&quot;order&quot; : &quot;desc&quot;} }],&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td>
</tr>
</tbody></table>
<p>例如，我们来按照价格区间查询，定义这样的一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Item</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据价格区间查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Item&gt; <span class="title">findByPriceBetween</span><span class="params">(<span class="keyword">double</span> price1, <span class="keyword">double</span> price2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后添加一些测试数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">1L</span>, <span class="string">"小米手机7"</span>, <span class="string">"手机"</span>, <span class="string">"小米"</span>, <span class="number">3299.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">2L</span>, <span class="string">"坚果手机R1"</span>, <span class="string">"手机"</span>, <span class="string">"锤子"</span>, <span class="number">3699.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">3L</span>, <span class="string">"华为META10"</span>, <span class="string">"手机"</span>, <span class="string">"华为"</span>, <span class="number">4499.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">4L</span>, <span class="string">"小米Mix2S"</span>, <span class="string">"手机"</span>, <span class="string">"小米"</span>, <span class="number">4299.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">5L</span>, <span class="string">"荣耀V10"</span>, <span class="string">"手机"</span>, <span class="string">"华为"</span>, <span class="number">2799.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    itemRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不需要写实现类，然后我们直接去运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryByPriceBetween</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">this</span>.itemRepository.findByPriceBetween(<span class="number">2000.00</span>, <span class="number">3500.00</span>);</span><br><span class="line">    <span class="keyword">for</span> (Item item : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">"item = "</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/day11/1531993518230.png" alt="1531993518230"></p>
<p>虽然基本查询和自定义方法已经很强大了，但是如果是复杂查询（模糊、通配符、词条查询等）就显得力不从心了。此时，我们只能使用原生查询。</p>
<h2 id="5-5-高级查询"><a href="#5-5-高级查询" class="headerlink" title="5.5.高级查询"></a>5.5.高级查询</h2><h3 id="5-5-1-基本查询"><a href="#5-5-1-基本查询" class="headerlink" title="5.5.1.基本查询"></a>5.5.1.基本查询</h3><p>先看看基本玩法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 词条查询</span></span><br><span class="line">    MatchQueryBuilder queryBuilder = QueryBuilders.matchQuery(<span class="string">"title"</span>, <span class="string">"小米"</span>);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    Iterable&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder);</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Repository的search方法需要QueryBuilder参数，elasticSearch为我们提供了一个对象QueryBuilders：</p>
<p> <img src="/images/day11/1532008212626.png" alt="1532008212626"></p>
<p>QueryBuilders提供了大量的静态方法，用于生成各种不同类型的查询对象，例如：词条、模糊、通配符等QueryBuilder对象。</p>
<p>结果：</p>
<p><img src="/images/day11/1532008415257.png" alt="1532008415257"></p>
<p>elasticsearch提供很多可用的查询方式，但是不够灵活。如果想玩过滤或者聚合查询等就很难了。</p>
<h3 id="5-5-2-自定义查询"><a href="#5-5-2-自定义查询" class="headerlink" title="5.5.2.自定义查询"></a>5.5.2.自定义查询</h3><p>先来看最基本的match query：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">"title"</span>, <span class="string">"小米"</span>));</span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NativeSearchQueryBuilder：Spring提供的一个查询条件构建器，帮助构建json格式的请求体</p>
<p><code>Page&lt;item&gt;</code>：默认是分页查询，因此返回的是一个分页的结果对象，包含属性：</p>
<ul>
<li>totalElements：总条数</li>
<li>totalPages：总页数</li>
<li>Iterator：迭代器，本身实现了Iterator接口，因此可直接迭代得到当前页的数据</li>
<li>其它属性：</li>
</ul>
<p><img src="/images/day11/1532009679148.png" alt="1532009679148"></p>
<p>结果：<img src="/images/day11/1532009717623.png" alt="1532009717623"></p>
<h3 id="5-5-4-分页查询"><a href="#5-5-4-分页查询" class="headerlink" title="5.5.4.分页查询"></a>5.5.4.分页查询</h3><p>利用<code>NativeSearchQueryBuilder</code>可以方便的实现分页：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">"category"</span>, <span class="string">"手机"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化分页参数</span></span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 设置分页参数</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(page, size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    <span class="comment">// 每页大小</span></span><br><span class="line">    System.out.println(items.getSize());</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    System.out.println(items.getNumber());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/day11/1532011610028.png" alt="1532011610028"></p>
<p>可以发现，<strong>Elasticsearch中的分页是从第0页开始</strong>。</p>
<h3 id="5-5-5-排序"><a href="#5-5-5-排序" class="headerlink" title="5.5.5.排序"></a>5.5.5.排序</h3><p>排序也通用通过<code>NativeSearchQueryBuilder</code>完成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">"category"</span>, <span class="string">"手机"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    queryBuilder.withSort(SortBuilders.fieldSort(<span class="string">"price"</span>).order(SortOrder.DESC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/day11/1532012155435.png" alt="1532012155435"></p>
<h2 id="5-6-聚合"><a href="#5-6-聚合" class="headerlink" title="5.6.聚合"></a>5.6.聚合</h2><h3 id="5-6-1-聚合为桶"><a href="#5-6-1-聚合为桶" class="headerlink" title="5.6.1.聚合为桶"></a>5.6.1.聚合为桶</h3><p>桶就是分组，比如这里我们按照品牌brand进行分组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">""</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">"brands"</span>).field(<span class="string">"brand"</span>));</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">"brands"</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString());</span><br><span class="line">        <span class="comment">// 3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getDocCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显示的结果：</p>
<p><img src="/images/day11/1532012598213.png" alt="1532012598213"></p>
<p>关键API：</p>
<ul>
<li><p><code>AggregationBuilders</code>：聚合的构建工厂类。所有聚合都由这个类来构建，看看他的静态方法：</p>
<p><img src="/images/day11/1526567597724.png" alt="1526567597724"></p>
</li>
<li><p><code>AggregatedPage</code>：聚合查询的结果类。它是<code>Page&lt;T&gt;</code>的子接口：</p>
<p>  <img src="/images/day11/1526567748355.png" alt="1526567748355"></p>
<p><code>AggregatedPage</code>在<code>Page</code>功能的基础上，拓展了与聚合相关的功能，它其实就是对聚合结果的一种封装，大家可以对照聚合结果的JSON结构来看。</p>
<p> <img src="/images/day11/1526567889455.png" alt="1526567889455"></p>
<p>而返回的结果都是Aggregation类型对象，不过根据字段类型不同，又有不同的子类表示</p>
<p> <img src="/images/day11/1526568128210.png" alt="1526568128210"></p>
</li>
</ul>
<p>我们看下页面的查询的JSON结果与Java类的对照关系：</p>
<p> <img src="/images/day11/1526571200130.png" alt="1526571200130"></p>
<h3 id="5-6-2-嵌套聚合，求平均值"><a href="#5-6-2-嵌套聚合，求平均值" class="headerlink" title="5.6.2.嵌套聚合，求平均值"></a>5.6.2.嵌套聚合，求平均值</h3><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">""</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">"brands"</span>).field(<span class="string">"brand"</span>)</span><br><span class="line">        .subAggregation(AggregationBuilders.avg(<span class="string">"priceAvg"</span>).field(<span class="string">"price"</span>)) <span class="comment">// 在品牌聚合桶内进行嵌套聚合，求平均值</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">"brands"</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称  3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString() + <span class="string">"，共"</span> + bucket.getDocCount() + <span class="string">"台"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.6.获取子聚合结果：</span></span><br><span class="line">        InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().get(<span class="string">"priceAvg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"平均售价："</span> + avg.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p> <img src="/images/day11/1526572198447.png" alt="1526572198447"></p>

    <div id="aplayer-XQbInyoa" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="188141" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>品牌管理</title>
    <url>/2019/12/13/day10-%E5%95%86%E5%93%81%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>独立实现商品新增后台</li>
<li>独立实现商品编辑后台</li>
<li>独立搭建前台系统页面</li>
</ul>
<a id="more"></a>
<h1 id="1-商品新增"><a href="#1-商品新增" class="headerlink" title="1.商品新增"></a>1.商品新增</h1><p>当我们点击新增商品按钮：</p>
<p><img src="/images/day10/1528450695946.png" alt="1528450695946"></p>
<p>就会出现一个弹窗：</p>
<p><img src="/images/day10/1528450773322.png" alt="1528450773322"></p>
<p>里面把商品的数据分为了4部分来填写：</p>
<ul>
<li>基本信息：主要是一些简单的文本数据，包含了SPU和SpuDetail的部分数据，如<ul>
<li>商品分类：是SPU中的<code>cid1</code>，<code>cid2</code>，<code>cid3</code>属性</li>
<li>品牌：是spu中的<code>brandId</code>属性</li>
<li>标题：是spu中的<code>title</code>属性</li>
<li>子标题：是spu中的<code>subTitle</code>属性</li>
<li>售后服务：是SpuDetail中的<code>afterService</code>属性</li>
<li>包装列表：是SpuDetail中的<code>packingList</code>属性</li>
</ul>
</li>
<li>商品描述：是SpuDetail中的<code>description</code>属性，数据较多，所以单独放一个页面</li>
<li>规格参数：商品规格信息，对应SpuDetail中的<code>genericSpec</code>属性</li>
<li>SKU属性：spu下的所有Sku信息</li>
</ul>
<p>对应到页面中的四个<code>stepper-content</code>：</p>
<p><img src="/images/day10/1528457410198.png" alt="1528457410198"></p>
<h2 id="1-1-弹窗事件"><a href="#1-1-弹窗事件" class="headerlink" title="1.1.弹窗事件"></a>1.1.弹窗事件</h2><p>弹窗是一个独立组件：</p>
<p> <img src="/images/day10/1528084394245.png" alt="1528084394245"></p>
<p>并且在Goods组件中已经引用它：</p>
<p><img src="/images/day10/1528457758806.png" alt="1528457758806"></p>
<p>并且在页面中渲染：</p>
<p><img src="/images/day10/1528457859739.png" alt="1528457859739"></p>
<p>在<code>新增商品</code>按钮的点击事件中，改变这个<code>dialog</code>的<code>show</code>属性：</p>
<p><img src="/images/day10/1528457992959.png" alt="1528457992959"></p>
<p><img src="/images/day10/1528458037693.png" alt="1528458037693"></p>
<h2 id="1-2-基本数据"><a href="#1-2-基本数据" class="headerlink" title="1.2.基本数据"></a>1.2.基本数据</h2><p>我们先来看下基本数据：</p>
<p><img src="/images/day10/1528086595597.png" alt="1528086595597"></p>
<h3 id="1-2-1-商品分类"><a href="#1-2-1-商品分类" class="headerlink" title="1.2.1.商品分类"></a>1.2.1.商品分类</h3><p>商品分类信息查询我们之前已经做过，所以这里的级联选框已经实现完成：</p>
<p><img src="/images/day10/1528459846644.png" alt="1528459846644"></p>
<p>刷新页面，可以看到请求已经发出：</p>
<p><img src="/images/day10/1528460001803.png" alt="1528460001803"></p>
<p><img src="/images/day10/1528460054188.png" alt="1528460054188"></p>
<p>效果：</p>
<p><img src="/images/day10/1528460159541.png" alt="1528460159541"></p>
<h3 id="1-2-2-品牌选择"><a href="#1-2-2-品牌选择" class="headerlink" title="1.2.2.品牌选择"></a>1.2.2.品牌选择</h3><h4 id="1-2-2-1页面"><a href="#1-2-2-1页面" class="headerlink" title="1.2.2.1页面"></a>1.2.2.1页面</h4><p>品牌也是一个下拉选框，不过其选项是不确定的，只有当用户选择了商品分类，才会把这个分类下的所有品牌展示出来。</p>
<p>所以页面编写了watch函数，监控商品分类的变化，每当商品分类值有变化，就会发起请求，查询品牌列表：</p>
<p><img src="/images/day10/1528460401582.png" alt="1528460401582"></p>
<p>选择商品分类后，可以看到请求发起：</p>
<p><img src="/images/day10/1528460607735.png" alt="1528460607735"></p>
<p>接下来，我们只要编写后台接口，根据商品分类id，查询对应品牌即可。</p>
<h4 id="1-2-2-2后台接口"><a href="#1-2-2-2后台接口" class="headerlink" title="1.2.2.2后台接口"></a>1.2.2.2后台接口</h4><p>页面需要去后台查询品牌信息，我们自然需要提供：</p>
<p>请求方式：GET</p>
<p>请求路径：/brand/cid/{cid}</p>
<p>请求参数：cid</p>
<p>响应数据：品牌集合</p>
<blockquote>
<p>BrandController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"cid/&#123;cid&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Brand&gt;&gt; queryBrandsByCid(<span class="meta">@PathVariable</span>(<span class="string">"cid"</span>)Long cid)&#123;</span><br><span class="line">    List&lt;Brand&gt; brands = <span class="keyword">this</span>.brandService.queryBrandsByCid(cid);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(brands)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(brands);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>BrandService</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">queryBrandsByCid</span><span class="params">(Long cid)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.brandMapper.selectBrandByCid(cid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>BrandMapper</p>
</blockquote>
<p>根据分类查询品牌有中间表，需要自己编写Sql：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT b.* from tb_brand b INNER JOIN tb_category_brand cb on b.id=cb.brand_id where cb.category_id=#&#123;cid&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectBrandByCid</span><span class="params">(Long cid)</span></span>;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/day10/1528462393536.png" alt="1528462393536"></p>
<h3 id="1-2-3-其它文本框"><a href="#1-2-3-其它文本框" class="headerlink" title="1.2.3.其它文本框"></a>1.2.3.其它文本框</h3><p>剩余的几个属性：标题、子标题等都是普通文本框，我们直接填写即可，没有需要特别注意的。</p>
<p><img src="/images/day10/1528462474512.png" alt="1528462474512"></p>
<h2 id="1-3-商品描述"><a href="#1-3-商品描述" class="headerlink" title="1.3.商品描述"></a>1.3.商品描述</h2><p>商品描述信息比较复杂，而且图文并茂，甚至包括视频。</p>
<p>这样的内容，一般都会使用富文本编辑器。</p>
<h3 id="1-3-1-什么是富文本编辑器"><a href="#1-3-1-什么是富文本编辑器" class="headerlink" title="1.3.1.什么是富文本编辑器"></a>1.3.1.什么是富文本编辑器</h3><p>百度百科：</p>
<p><img src="/images/day10/1526290914491.png" alt="1526290914491"></p>
<p>通俗来说：富文本，就是比较丰富的文本编辑器。普通的框只能输入文字，而富文本还能给文字加颜色样式等。</p>
<p>富文本编辑器有很多，例如：KindEditor、Ueditor。但并不原生支持vue</p>
<p>但是我们今天要说的，是一款支持Vue的富文本编辑器：<code>vue-quill-editor</code></p>
<h3 id="1-3-2-Vue-Quill-Editor"><a href="#1-3-2-Vue-Quill-Editor" class="headerlink" title="1.3.2.Vue-Quill-Editor"></a>1.3.2.Vue-Quill-Editor</h3><p>GitHub的主页：<a href="https://github.com/surmon-china/vue-quill-editor" target="_blank" rel="noopener">https://github.com/surmon-china/vue-quill-editor</a></p>
<p>Vue-Quill-Editor是一个基于Quill的富文本编辑器：<a href="https://quilljs.com/" target="_blank" rel="noopener">Quill的官网</a></p>
<p><img src="/images/day10/1526291232678.png" alt="1526291232678"></p>
<h3 id="1-3-3-使用指南"><a href="#1-3-3-使用指南" class="headerlink" title="1.3.3.使用指南"></a>1.3.3.使用指南</h3><p>使用非常简单：已经在项目中集成。以下步骤不需操作，仅供参考</p>
<p>第一步：安装，使用npm命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-quill-editor --save</span><br></pre></td></tr></table></figure>

<p>第二步：加载，在js中引入：</p>
<p>全局引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueQuillEditor <span class="keyword">from</span> <span class="string">'vue-quill-editor'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;; <span class="comment">/* &#123; default global options &#125; */</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueQuillEditor, options); <span class="comment">// options可选</span></span><br></pre></td></tr></table></figure>

<p>局部引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'quill/dist/quill.core.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'quill/dist/quill.snow.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'quill/dist/quill.bubble.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;quillEditor&#125; <span class="keyword">from</span> <span class="string">'vue-quill-editor'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        quillEditor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们这里采用局部引用：</p>
<p><img src="/images/day10/1528465859061.png" alt="1528465859061"></p>
<p>第三步：页面使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">quill-editor</span> <span class="attr">v-model</span>=<span class="string">"goods.spuDetail.description"</span> <span class="attr">:options</span>=<span class="string">"editorOption"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-4-自定义的富文本编辑器"><a href="#1-3-4-自定义的富文本编辑器" class="headerlink" title="1.3.4.自定义的富文本编辑器"></a>1.3.4.自定义的富文本编辑器</h3><p>不过这个组件有个小问题，就是图片上传的无法直接上传到后台，因此我们对其进行了封装，支持了图片的上传。</p>
<p> <img src="/images/day10/1526296083605.png" alt="1526296083605.png"></p>
<p>使用也非常简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-stepper-content</span> <span class="attr">step</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-editor</span> <span class="attr">v-model</span>=<span class="string">"goods.spuDetail.description"</span> <span class="attr">upload-url</span>=<span class="string">"/upload/image"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-stepper-content</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>upload-url：是图片上传的路径</li>
<li>v-model：双向绑定，将富文本编辑器的内容绑定到goods.spuDetail.description</li>
</ul>
<h3 id="1-3-5-效果"><a href="#1-3-5-效果" class="headerlink" title="1.3.5.效果"></a>1.3.5.效果</h3><p><img src="/images/day10/1528469209005.png" alt="1528469209005"></p>
<h2 id="1-4-商品规格参数"><a href="#1-4-商品规格参数" class="headerlink" title="1.4.商品规格参数"></a>1.4.商品规格参数</h2><p>规格参数的查询我们之前也已经编写过接口，因为商品规格参数也是与商品分类绑定，所以需要在商品分类变化后去查询，我们也是通过watch监控来实现：</p>
<p><img src="/images/day10/1528469560330.png" alt="1528469560330"></p>
<p>可以看到这里是根据商品分类id查询规格参数：SpecParam。我们之前写过一个根据gid（分组id）来查询规格参数的接口，我们接下来完成根据分类id查询规格参数。</p>
<blockquote>
<h3 id="改造查询规格参数接口"><a href="#改造查询规格参数接口" class="headerlink" title="改造查询规格参数接口"></a>改造查询规格参数接口</h3></blockquote>
<p><img src="/images/day10/1543415396355.png" alt="1543415396355"></p>
<p>我们在原来的根据 gid（规格组id)查询规格参数的接口上，添加一个参数：cid，即商品分类id。</p>
<p>等一下， 考虑到以后可能还会根据是否搜索、是否为通用属性等条件过滤，我们多添加几个过滤条件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"params"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecParam&gt;&gt; queryParams(</span><br><span class="line">        <span class="meta">@RequestParam</span>(value = <span class="string">"gid"</span>, required = <span class="keyword">false</span>)Long gid,</span><br><span class="line">        <span class="meta">@RequestParam</span>(value = <span class="string">"cid"</span>, required = <span class="keyword">false</span>)Long cid,</span><br><span class="line">        <span class="meta">@RequestParam</span>(value = <span class="string">"generic"</span>, required = <span class="keyword">false</span>)Boolean generic,</span><br><span class="line">        <span class="meta">@RequestParam</span>(value = <span class="string">"searching"</span>, required = <span class="keyword">false</span>)Boolean searching</span><br><span class="line">)&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;SpecParam&gt; params = <span class="keyword">this</span>.specificationService.queryParams(gid, cid, generic, searching);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(params))&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改造SpecificationService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据gid查询规格参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> gid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SpecParam&gt; <span class="title">queryParams</span><span class="params">(Long gid, Long cid, Boolean generic, Boolean searching)</span> </span>&#123;</span><br><span class="line">    SpecParam record = <span class="keyword">new</span> SpecParam();</span><br><span class="line">    record.setGroupId(gid);</span><br><span class="line">    record.setCid(cid);</span><br><span class="line">    record.setGeneric(generic);</span><br><span class="line">    record.setSearching(searching);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.specParamMapper.select(record);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果param中有属性为null，则不会把属性作为查询条件，因此该方法具备通用性，即可根据gid查询，也可根据cid查询。</p>
<p>测试：</p>
<p><img src="/images/day10/1528470181643.png" alt="1528470181643"></p>
<p>刷新页面测试：</p>
<p><img src="/images/day10/1528470221970.png" alt="1528470221970"></p>
<h2 id="1-5-SKU信息"><a href="#1-5-SKU信息" class="headerlink" title="1.5.SKU信息"></a>1.5.SKU信息</h2><p>Sku属性是SPU下的每个商品的不同特征，如图：</p>
<p><img src="/images/day10/1528470828296.png" alt="1528470828296"></p>
<p>当我们填写一些属性后，会在页面下方生成一个sku表格，大家可以计算下会生成多少个不同属性的Sku呢？</p>
<p>当你选择了上图中的这些选项时：</p>
<ul>
<li>颜色共2种：迷夜黑，勃艮第红，绚丽蓝</li>
<li>内存共2种：4GB，6GB</li>
<li>机身存储1种：64GB，128GB</li>
</ul>
<p>此时会产生多少种SKU呢？ 应该是 3 * 2 * 2 = 12种，这其实就是在求笛卡尔积。</p>
<p>我们会在页面下方生成一个sku的表格：</p>
<p><img src="/images/day10/1528470876872.png" alt="1528470876872"></p>
<h2 id="1-6-页面表单提交"><a href="#1-6-页面表单提交" class="headerlink" title="1.6.页面表单提交"></a>1.6.页面表单提交</h2><p>在sku列表的下方，有一个提交按钮：</p>
<p><img src="/images/day10/1528470945475.png" alt="1528470945475"></p>
<p>并且绑定了点击事件：</p>
<p><img src="/images/day10/1528471079383.png" alt="1528471079383"></p>
<p>点击后会组织数据并向后台提交：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">submit() &#123;</span><br><span class="line">  <span class="comment">// 表单校验。</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.$refs.basic.validate)&#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(<span class="string">"请先完成表单内容！"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    categories: [&#123; <span class="attr">id</span>: cid1 &#125;, &#123; <span class="attr">id</span>: cid2 &#125;, &#123; <span class="attr">id</span>: cid3 &#125;],</span><br><span class="line">    ...goodsParams</span><br><span class="line">  &#125; = <span class="keyword">this</span>.goods;</span><br><span class="line">  <span class="comment">// 处理规格参数</span></span><br><span class="line">  <span class="keyword">const</span> specs = &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.specs.forEach(<span class="function">(<span class="params">&#123; id,v &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    specs[id] = v;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 处理特有规格参数模板</span></span><br><span class="line">  <span class="keyword">const</span> specTemplate = &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.specialSpecs.forEach(<span class="function">(<span class="params">&#123; id, options &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    specTemplate[id] = options;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 处理sku</span></span><br><span class="line">  <span class="keyword">const</span> skus = <span class="keyword">this</span>.skus</span><br><span class="line">    .filter(<span class="function"><span class="params">s</span> =&gt;</span> s.enable)</span><br><span class="line">    .map(<span class="function">(<span class="params">&#123; price, stock, enable, images, indexes, ...rest &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 标题，在spu的title基础上，拼接特有规格属性值</span></span><br><span class="line">      <span class="keyword">const</span> title = goodsParams.title + <span class="string">" "</span> + <span class="built_in">Object</span>.values(rest).map(<span class="function"><span class="params">v</span> =&gt;</span> v.v).join(<span class="string">" "</span>);</span><br><span class="line">      <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">      <span class="built_in">Object</span>.values(rest).forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        obj[v.id] = v.v;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        price: <span class="keyword">this</span>.$format(price), <span class="comment">// 价格需要格式化</span></span><br><span class="line">        stock,</span><br><span class="line">        indexes,</span><br><span class="line">        enable,</span><br><span class="line">        title, <span class="comment">// 基本属性</span></span><br><span class="line">        images: images ? images.join(<span class="string">","</span>) : <span class="string">''</span>, <span class="comment">// 图片</span></span><br><span class="line">        ownSpec: <span class="built_in">JSON</span>.stringify(obj) <span class="comment">// 特有规格参数</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="built_in">Object</span>.assign(goodsParams, &#123;</span><br><span class="line">    cid1,</span><br><span class="line">    cid2,</span><br><span class="line">    cid3, <span class="comment">// 商品分类</span></span><br><span class="line">    skus <span class="comment">// sku列表</span></span><br><span class="line">  &#125;);</span><br><span class="line">  goodsParams.spuDetail.genericSpec = <span class="built_in">JSON</span>.stringify(specs);</span><br><span class="line">  goodsParams.spuDetail.specialSpec = <span class="built_in">JSON</span>.stringify(specTemplate);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提交到后台</span></span><br><span class="line">  <span class="keyword">this</span>.$http(&#123;</span><br><span class="line">    method: <span class="keyword">this</span>.isEdit ? <span class="string">"put"</span> : <span class="string">"post"</span>,</span><br><span class="line">    url: <span class="string">"/item/goods"</span>,</span><br><span class="line">    data: goodsParams</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 成功，关闭窗口</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"close"</span>);</span><br><span class="line">      <span class="comment">// 提示成功</span></span><br><span class="line">      <span class="keyword">this</span>.$message.success(<span class="string">"保存成功了"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.$message.error(<span class="string">"保存失败！"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击提交，查看控制台提交的数据格式：</p>
<p><img src="/images/day10/1528472289831.png" alt="1528472289831"></p>
<p>整体是一个json格式数据，包含Spu表所有数据：</p>
<ul>
<li>brandId：品牌id</li>
<li>cid1、cid2、cid3：商品分类id</li>
<li>subTitle：副标题</li>
<li>title：标题</li>
<li>spuDetail：是一个json对象，代表商品详情表数据<ul>
<li>afterService：售后服务</li>
<li>description：商品描述</li>
<li>packingList：包装列表</li>
<li>specialSpec：sku规格属性模板</li>
<li>genericSpec：通用规格参数</li>
</ul>
</li>
<li>skus：spu下的所有sku数组，元素是每个sku对象：<ul>
<li>title：标题</li>
<li>images：图片</li>
<li>price：价格</li>
<li>stock：库存</li>
<li>ownSpec：特有规格参数</li>
<li>indexes：特有规格参数的下标</li>
</ul>
</li>
</ul>
<h2 id="1-7-后台实现"><a href="#1-7-后台实现" class="headerlink" title="1.7.后台实现"></a>1.7.后台实现</h2><h3 id="1-7-1-实体类"><a href="#1-7-1-实体类" class="headerlink" title="1.7.1.实体类"></a>1.7.1.实体类</h3><p>SPU和SpuDetail实体类已经添加过，添加Sku和Stock对象：</p>
<p> <img src="/images/day10/1528472531490.png" alt="1528472531490"></p>
<blockquote>
<p>Sku</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_sku"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sku</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long spuId;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String images;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> String ownSpec;<span class="comment">// 商品特殊规格的键值对</span></span><br><span class="line">    <span class="keyword">private</span> String indexes;<span class="comment">// 商品特殊规格的下标</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enable;<span class="comment">// 是否有效，逻辑删除用</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date lastUpdateTime;<span class="comment">// 最后修改时间</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;<span class="comment">// 库存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：这里保存了一个库存字段，在数据库中是另外一张表保存的，方便查询。</p>
<blockquote>
<p>Stock</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_stock"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stock</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long skuId;</span><br><span class="line">    <span class="keyword">private</span> Integer seckillStock;<span class="comment">// 秒杀可用库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer seckillTotal;<span class="comment">// 已秒杀数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;<span class="comment">// 正常库存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-2-GoodsController"><a href="#1-7-2-GoodsController" class="headerlink" title="1.7.2.GoodsController"></a>1.7.2.GoodsController</h3><p>结合浏览器页面控制台，可以发现：</p>
<p>请求方式：POST</p>
<p>请求路径：/goods</p>
<p>请求参数：Spu的json格式的对象，spu中包含spuDetail和Sku集合。这里我们该怎么接收？我们之前定义了一个SpuBo对象，作为业务对象。这里也可以用它，不过需要再扩展spuDetail和skus字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuBo</span> <span class="keyword">extends</span> <span class="title">Spu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String cname;<span class="comment">// 商品分类名称</span></span><br><span class="line">    String bname;<span class="comment">// 品牌名称</span></span><br><span class="line">    SpuDetail spuDetail;<span class="comment">// 商品详情</span></span><br><span class="line">    List&lt;Sku&gt; skus;<span class="comment">// sku列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>返回类型：无</li>
</ul>
<p>在GoodsController中添加新增商品的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"goods"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveGoods</span><span class="params">(@RequestBody SpuBo spuBo)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.goodsService.saveGoods(spuBo);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：通过@RequestBody注解来接收Json请求</p>
<h3 id="1-7-3-GoodsService"><a href="#1-7-3-GoodsService" class="headerlink" title="1.7.3.GoodsService"></a>1.7.3.GoodsService</h3><p>这里的逻辑比较复杂，我们除了要对SPU新增以外，还要对SpuDetail、Sku、Stock进行保存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuBo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveGoods</span><span class="params">(SpuBo spuBo)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新增spu</span></span><br><span class="line">    <span class="comment">// 设置默认字段</span></span><br><span class="line">    spuBo.setId(<span class="keyword">null</span>);</span><br><span class="line">    spuBo.setSaleable(<span class="keyword">true</span>);</span><br><span class="line">    spuBo.setValid(<span class="keyword">true</span>);</span><br><span class="line">    spuBo.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    spuBo.setLastUpdateTime(spuBo.getCreateTime());</span><br><span class="line">    <span class="keyword">this</span>.spuMapper.insertSelective(spuBo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增spuDetail</span></span><br><span class="line">    SpuDetail spuDetail = spuBo.getSpuDetail();</span><br><span class="line">    spuDetail.setSpuId(spuBo.getId());</span><br><span class="line">    <span class="keyword">this</span>.spuDetailMapper.insertSelective(spuDetail);</span><br><span class="line"></span><br><span class="line">    saveSkuAndStock(spuBo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveSkuAndStock</span><span class="params">(SpuBo spuBo)</span> </span>&#123;</span><br><span class="line">    spuBo.getSkus().forEach(sku -&gt; &#123;</span><br><span class="line">        <span class="comment">// 新增sku</span></span><br><span class="line">        sku.setSpuId(spuBo.getId());</span><br><span class="line">        sku.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        sku.setLastUpdateTime(sku.getCreateTime());</span><br><span class="line">        <span class="keyword">this</span>.skuMapper.insertSelective(sku);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增库存</span></span><br><span class="line">        Stock stock = <span class="keyword">new</span> Stock();</span><br><span class="line">        stock.setSkuId(sku.getId());</span><br><span class="line">        stock.setStock(sku.getStock());</span><br><span class="line">        <span class="keyword">this</span>.stockMapper.insertSelective(stock);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-4-Mapper"><a href="#1-7-4-Mapper" class="headerlink" title="1.7.4.Mapper"></a>1.7.4.Mapper</h3><p>都是通用Mapper，略</p>
<p>目录结构：</p>
<p> <img src="/images/day10/1543416129953.png" alt="1543416129953"></p>
<h1 id="2-商品修改"><a href="#2-商品修改" class="headerlink" title="2.商品修改"></a>2.商品修改</h1><h2 id="2-1-编辑按钮点击事件"><a href="#2-1-编辑按钮点击事件" class="headerlink" title="2.1.编辑按钮点击事件"></a>2.1.编辑按钮点击事件</h2><p>在商品详情页，每一个商品后面，都会有一个编辑按钮：</p>
<p><img src="/images/day10/1528476387213.png" alt="1528476387213"></p>
<p>点击这个按钮，就会打开一个商品编辑窗口，我们看下它所绑定的点击事件：（在item/Goods.vue）</p>
<p><img src="/images/day10/1528476530008.png" alt="1528476530008"></p>
<p>对应的方法：</p>
<p><img src="/images/day10/1528476579123.png" alt="1528476579123"></p>
<p>可以看到这里发起了两个请求，在查询商品详情和sku信息。</p>
<p>因为在商品列表页面，只有spu的基本信息：id、标题、品牌、商品分类等。比较复杂的商品详情（spuDetail)和sku信息都没有，编辑页面要回显数据，就需要查询这些内容。</p>
<p>因此，接下来我们就编写后台接口，提供查询服务接口。</p>
<h2 id="2-2-查询SpuDetail接口"><a href="#2-2-查询SpuDetail接口" class="headerlink" title="2.2.查询SpuDetail接口"></a>2.2.查询SpuDetail接口</h2><blockquote>
<p>GoodsController</p>
</blockquote>
<p>需要分析的内容：</p>
<ul>
<li>请求方式：GET</li>
<li>请求路径：/spu/detail/{id}</li>
<li>请求参数：id，应该是spu的id</li>
<li>返回结果：SpuDetail对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/detail/&#123;spuId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;SpuDetail&gt; <span class="title">querySpuDetailBySpuId</span><span class="params">(@PathVariable(<span class="string">"spuId"</span>)</span>Long spuId)</span>&#123;</span><br><span class="line">    SpuDetail spuDetail = <span class="keyword">this</span>.goodsService.querySpuDetailBySpuId(spuId);</span><br><span class="line">    <span class="keyword">if</span> (spuDetail == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(spuDetail);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GoodsService</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuId查询spuDetail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpuDetail <span class="title">querySpuDetailBySpuId</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.spuDetailMapper.selectByPrimaryKey(spuId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p><img src="/images/day10/1528477123640.png" alt="1528477123640"></p>
<h2 id="2-3-查询sku"><a href="#2-3-查询sku" class="headerlink" title="2.3.查询sku"></a>2.3.查询sku</h2><blockquote>
<p>分析</p>
</blockquote>
<ul>
<li>请求方式：Get</li>
<li>请求路径：/sku/list</li>
<li>请求参数：id，应该是spu的id</li>
<li>返回结果：sku的集合</li>
</ul>
<blockquote>
<p>GoodsController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"sku/list"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Sku&gt;&gt; querySkusBySpuId(<span class="meta">@RequestParam</span>(<span class="string">"id"</span>)Long spuId)&#123;</span><br><span class="line">    List&lt;Sku&gt; skus = <span class="keyword">this</span>.goodsService.querySkusBySpuId(spuId);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(skus)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(skus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GoodsService</p>
</blockquote>
<p>需要注意的是，为了页面回显方便，我们一并把sku的库存stock也查询出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuId查询sku的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Sku&gt; <span class="title">querySkusBySpuId</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">    Sku sku = <span class="keyword">new</span> Sku();</span><br><span class="line">    sku.setSpuId(spuId);</span><br><span class="line">    List&lt;Sku&gt; skus = <span class="keyword">this</span>.skuMapper.select(sku);</span><br><span class="line">    skus.forEach(s -&gt; &#123;</span><br><span class="line">        Stock stock = <span class="keyword">this</span>.stockMapper.selectByPrimaryKey(s.getId());</span><br><span class="line">        s.setStock(stock.getStock());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> skus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试：</p>
</blockquote>
<p><img src="/images/day10/1528477189379.png" alt="1528477189379"></p>
<h2 id="2-4-页面回显"><a href="#2-4-页面回显" class="headerlink" title="2.4.页面回显"></a>2.4.页面回显</h2><p>随便点击一个编辑按钮，发现数据回显完成：</p>
<p><img src="/images/day10/1528477890801.png" alt="1528477890801"></p>
<p><img src="/images/day10/1528477928748.png" alt="1528477928748"></p>
<p><img src="/images/day10/1528477970912.png" alt="1528477970912"></p>
<p><img src="/images/day10/1528478019100.png" alt="1528478019100"></p>
<h2 id="2-5-页面提交"><a href="#2-5-页面提交" class="headerlink" title="2.5.页面提交"></a>2.5.页面提交</h2><p>这里的保存按钮与新增其实是同一个，因此提交的逻辑也是一样的，这里不再赘述。</p>
<p>随便修改点数据，然后点击保存，可以看到浏览器已经发出请求：</p>
<p><img src="/images/day10/1528478194128.png" alt="1528478194128"></p>
<h2 id="2-6-后台实现"><a href="#2-6-后台实现" class="headerlink" title="2.6.后台实现"></a>2.6.后台实现</h2><p>接下来，我们编写后台，实现修改商品接口。</p>
<h3 id="2-6-1-GoodsController"><a href="#2-6-1-GoodsController" class="headerlink" title="2.6.1.GoodsController"></a>2.6.1.GoodsController</h3><ul>
<li>请求方式：PUT</li>
<li>请求路径：/</li>
<li>请求参数：Spu对象</li>
<li>返回结果：无</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"goods"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateGoods</span><span class="params">(@RequestBody SpuBo spuBo)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.goodsService.updateGoods(spuBo);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-2-GoodsService"><a href="#2-6-2-GoodsService" class="headerlink" title="2.6.2.GoodsService"></a>2.6.2.GoodsService</h3><p>spu数据可以修改，但是SKU数据无法修改，因为有可能之前存在的SKU现在已经不存在了，或者以前的sku属性都不存在了。比如以前内存有4G，现在没了。</p>
<p>因此这里直接删除以前的SKU，然后新增即可。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(SpuBo spu)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询以前sku</span></span><br><span class="line">    List&lt;Sku&gt; skus = <span class="keyword">this</span>.querySkuBySpuId(spu.getId());</span><br><span class="line">    <span class="comment">// 如果以前存在，则删除</span></span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(skus)) &#123;</span><br><span class="line">        List&lt;Long&gt; ids = skus.stream().map(s -&gt; s.getId()).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 删除以前库存</span></span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Stock<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        example.createCriteria().andIn(<span class="string">"skuId"</span>, ids);</span><br><span class="line">        <span class="keyword">this</span>.stockMapper.deleteByExample(example);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除以前的sku</span></span><br><span class="line">        Sku record = <span class="keyword">new</span> Sku();</span><br><span class="line">        record.setSpuId(spu.getId());</span><br><span class="line">        <span class="keyword">this</span>.skuMapper.delete(record);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新增sku和库存</span></span><br><span class="line">    saveSkuAndStock(spuBo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新spu</span></span><br><span class="line">    spu.setLastUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    spu.setCreateTime(<span class="keyword">null</span>);</span><br><span class="line">    spu.setValid(<span class="keyword">null</span>);</span><br><span class="line">    spu.setSaleable(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.spuMapper.updateByPrimaryKeySelective(spu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新spu详情</span></span><br><span class="line">    <span class="keyword">this</span>.spuDetailMapper.updateByPrimaryKeySelective(spu.getSpuDetail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-3-mapper"><a href="#2-6-3-mapper" class="headerlink" title="2.6.3.mapper"></a>2.6.3.mapper</h3><p>与以前一样。</p>
<h2 id="2-7-其它"><a href="#2-7-其它" class="headerlink" title="2.7.其它"></a>2.7.其它</h2><p>商品的删除、上下架大家自行实现。</p>
<h1 id="3-搭建前台系统"><a href="#3-搭建前台系统" class="headerlink" title="3.搭建前台系统"></a>3.搭建前台系统</h1><p>后台系统的内容暂时告一段落，有了商品，接下来我们就要在页面展示商品，给用户提供浏览和购买的入口，那就是我们的门户系统。</p>
<p>门户系统面向的是用户，安全性很重要，而且搜索引擎对于单页应用并不友好。因此我们的门户系统不再采用与后台系统类似的SPA（单页应用）。</p>
<p>依然是前后端分离，不过前端的页面会使用独立的html，在每个页面中使用vue来做页面渲染。</p>
<h2 id="3-1-静态资源"><a href="#3-1-静态资源" class="headerlink" title="3.1.静态资源"></a>3.1.静态资源</h2><p>webpack打包多页应用配置比较繁琐，项目结构也相对复杂。这里为了简化开发（毕竟我们不是专业的前端人员），我们不再使用webpack，而是直接编写原生的静态HTML。</p>
<h3 id="3-1-1-创建工程"><a href="#3-1-1-创建工程" class="headerlink" title="3.1.1.创建工程"></a>3.1.1.创建工程</h3><p>创建一个新的工程：</p>
<p><img src="/images/day10/1528479807646.png" alt="1528479807646"></p>
<p><img src="/images/day10/1528479863567.png" alt="1528479863567"></p>
<h3 id="3-1-2-导入静态资源"><a href="#3-1-2-导入静态资源" class="headerlink" title="3.1.2.导入静态资源"></a>3.1.2.导入静态资源</h3><p>将课前资料中的leyou-portal解压，并复制到这个项目下</p>
<p><img src="/images/day10/1528479930705.png" alt="1528479930705"></p>
<p>解压缩：</p>
<p><img src="/images/day10/1528479984188.png" alt="1528479984188"></p>
<p>项目结构：</p>
<p> <img src="/images/day10/1528480139441.png" alt="1528480139441"></p>
<h2 id="3-2-live-server"><a href="#3-2-live-server" class="headerlink" title="3.2.live-server"></a>3.2.live-server</h2><p>没有webpack，我们就无法使用webpack-dev-server运行这个项目，实现热部署。</p>
<p>所以，这里我们使用另外一种热部署方式：live-server，</p>
<h3 id="3-2-1-简介"><a href="#3-2-1-简介" class="headerlink" title="3.2.1.简介"></a>3.2.1.简介</h3><p>地址；<a href="https://www.npmjs.com/package/live-server" target="_blank" rel="noopener">https://www.npmjs.com/package/live-server</a></p>
<p> <img src="/images/day10/1526460917348.png" alt="1526460917348"></p>
<p>这是一款带有热加载功能的小型开发服务器。用它来展示你的HTML / JavaScript / CSS，但不能用于部署最终的网站。 </p>
<h3 id="3-2-2-安装和运行参数"><a href="#3-2-2-安装和运行参数" class="headerlink" title="3.2.2.安装和运行参数"></a>3.2.2.安装和运行参数</h3><p>安装，使用npm命令即可，这里建议全局安装，以后任意位置可用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g live-server</span><br></pre></td></tr></table></figure>

<p>运行时，直接输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live-server</span><br></pre></td></tr></table></figure>

<p>另外，你可以在运行命令后，跟上一些参数以配置：</p>
<ul>
<li><code>--port=NUMBER</code> - 选择要使用的端口，默认值：PORT env var或8080</li>
<li><code>--host=ADDRESS</code> - 选择要绑定的主机地址，默认值：IP env var或0.0.0.0（“任意地址”）</li>
<li><code>--no-browser</code> - 禁止自动Web浏览器启动</li>
<li><code>--browser=BROWSER</code> - 指定使用浏览器而不是系统默认值</li>
<li><code>--quiet | -q</code> - 禁止记录</li>
<li><code>--verbose | -V</code> - 更多日志记录（记录所有请求，显示所有侦听的IPv4接口等）</li>
<li><code>--open=PATH</code> - 启动浏览器到PATH而不是服务器root</li>
<li><code>--watch=PATH</code> - 用逗号分隔的路径来专门监视变化（默认值：观看所有内容）</li>
<li><code>--ignore=PATH</code>- 要忽略的逗号分隔的路径字符串（<a href="https://github.com/es128/anymatch" target="_blank" rel="noopener">anymatch</a> -compatible definition）</li>
<li><code>--ignorePattern=RGXP</code>-文件的正则表达式忽略（即<code>.*\.jade</code>）（<strong>不推荐使用</strong>赞成<code>--ignore</code>）</li>
<li><code>--middleware=PATH</code> - 导出要添加的中间件功能的.js文件的路径; 可以是没有路径的名称，也可以是引用<code>middleware</code>文件夹中捆绑的中间件的扩展名</li>
<li><code>--entry-file=PATH</code> - 提供此文件（服务器根目录）代替丢失的文件（对单页应用程序有用）</li>
<li><code>--mount=ROUTE:PATH</code> - 在定义的路线下提供路径内容（可能有多个定义）</li>
<li><code>--spa</code> - 将请求从/ abc转换为/＃/ abc（方便单页应用）</li>
<li><code>--wait=MILLISECONDS</code> - （默认100ms）等待所有更改，然后重新加载</li>
<li><code>--htpasswd=PATH</code> - 启用期待位于PATH的htpasswd文件的http-auth</li>
<li><code>--cors</code> - 为任何来源启用CORS（反映请求源，支持凭证的请求）</li>
<li><code>--https=PATH</code> - 到HTTPS配置模块的路径</li>
<li><code>--proxy=ROUTE:URL</code> - 代理ROUTE到URL的所有请求</li>
<li><code>--help | -h</code> - 显示简洁的使用提示并退出</li>
<li><code>--version | -v</code> - 显示版本并退出</li>
</ul>
<h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3.测试"></a>3.2.3.测试</h3><p>我们进入leyou-portal目录，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live-server --port=9002</span><br></pre></td></tr></table></figure>

<p><img src="/images/day10/1528480541193.png" alt="1528480541193"></p>
<h2 id="3-3-域名访问"><a href="#3-3-域名访问" class="headerlink" title="3.3.域名访问"></a>3.3.域名访问</h2><p>现在我们访问只能通过：<a href="http://127.0.0.1:9002" target="_blank" rel="noopener">http://127.0.0.1:9002</a></p>
<p>我们希望用域名访问：<a href="http://www.leyou.com" target="_blank" rel="noopener">http://www.leyou.com</a></p>
<p>第一步，修改hosts文件，添加一行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 www.leyou.com</span><br></pre></td></tr></table></figure>

<p>第二步，修改nginx配置，将<a href="http://www.leyou.com反向代理到127.0.0.1:9002" target="_blank" rel="noopener">www.leyou.com反向代理到127.0.0.1:9002</a></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:9002;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新加载nginx配置：<code>nginx.exe -s reload</code></p>
<p><img src="/images/day10/1526462774092.png" alt="1526462774092"></p>
<h2 id="3-4-common-js"><a href="#3-4-common-js" class="headerlink" title="3.4.common.js"></a>3.4.common.js</h2><p>为了方便后续的开发，我们在前台系统中定义了一些工具，放在了common.js中：</p>
<p> <img src="/images/day10/1526643361038.png" alt="1526643361038"></p>
<p>部分代码截图：</p>
<p> <img src="/images/day10/1526643526973.png" alt="1526643526973"></p>
<p>首先对axios进行了一些全局配置，请求超时时间，请求的基础路径，是否允许跨域操作cookie等</p>
<p>定义了对象 ly ，也叫leyou，包含了下面的属性：</p>
<ul>
<li>getUrlParam(key)：获取url路径中的参数</li>
<li>http：axios对象的别名。以后发起ajax请求，可以用ly.http.get()</li>
<li>store：localstorage便捷操作，后面用到再详细说明</li>
<li>formatPrice：格式化价格，如果传入的是字符串，则扩大100被并转为数字，如果传入是数字，则缩小100倍并转为字符串</li>
<li>formatDate(val, pattern)：对日期对象val按照指定的pattern模板进行格式化</li>
<li>stringify：将对象转为参数字符串</li>
<li>parse：将参数字符串变为js对象</li>
</ul>

    <div id="aplayer-yRYuTQLW" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1325896427" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>商品规格管理</title>
    <url>/2019/12/13/day09-%E5%95%86%E5%93%81%E8%A7%84%E6%A0%BC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>了解商品规格数据结构设计思路</li>
<li>实现商品规格查询</li>
<li>了解SPU和SKU数据结构设计思路</li>
<li>实现商品查询</li>
<li>了解商品新增的页面实现</li>
<li>独立编写商品新增后台功能</li>
</ul>
<a id="more"></a>
<h1 id="1-商品规格数据结构"><a href="#1-商品规格数据结构" class="headerlink" title="1.商品规格数据结构"></a>1.商品规格数据结构</h1><p>乐优商城是一个全品类的电商网站，因此商品的种类繁多，每一件商品，其属性又有差别。为了更准确描述商品及细分差别，抽象出两个概念：SPU和SKU，了解一下：</p>
<h2 id="1-1-SPU和SKU"><a href="#1-1-SPU和SKU" class="headerlink" title="1.1.SPU和SKU"></a>1.1.SPU和SKU</h2><p>SPU：Standard Product Unit （标准产品单位） ，一组具有共同属性的商品集</p>
<p>SKU：Stock Keeping Unit（库存量单位），SPU商品集因具体特性不同而细分的每个商品</p>
<p>以图为例来看：</p>
<p><img src="/images/day09/1526085541996.png" alt="1526085541996"></p>
<ul>
<li>本页的 华为Mate10 就是一个商品集（SPU）</li>
<li>因为颜色、内存等不同，而细分出不同的Mate10，如亮黑色128G版。（SKU）</li>
</ul>
<p>可以看出：</p>
<ul>
<li>SPU是一个抽象的商品集概念，为了方便后台的管理。</li>
<li>SKU才是具体要销售的商品，每一个SKU的价格、库存可能会不一样，用户购买的是SKU而不是SPU</li>
</ul>
<h2 id="1-2-数据库设计分析"><a href="#1-2-数据库设计分析" class="headerlink" title="1.2.数据库设计分析"></a>1.2.数据库设计分析</h2><h3 id="1-2-1-思考并发现问题"><a href="#1-2-1-思考并发现问题" class="headerlink" title="1.2.1.思考并发现问题"></a>1.2.1.思考并发现问题</h3><p>弄清楚了SPU和SKU的概念区分，接下来我们一起思考一下该如何设计数据库表。</p>
<p>首先来看SPU，大家一起思考下SPU应该有哪些字段来描述？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id:主键</span><br><span class="line">title：标题</span><br><span class="line">description：描述</span><br><span class="line">specification：规格</span><br><span class="line">packaging_list：包装</span><br><span class="line">after_service：售后服务</span><br><span class="line">comment：评价</span><br><span class="line">category_id：商品分类</span><br><span class="line">brand_id：品牌</span><br></pre></td></tr></table></figure>

<p>似乎并不复杂，但是大家仔细思考一下，商品的规格字段你如何填写？</p>
<p> <img src="/images/day09/1526086539789.png" alt="1526086539789"></p>
<p>不同商品的规格不一定相同，数据库中要如何保存？</p>
<p>再看下SKU，大家觉得应该有什么字段？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id：主键</span><br><span class="line">spu_id：关联的spu</span><br><span class="line">price：价格</span><br><span class="line">images：图片</span><br><span class="line">stock：库存</span><br><span class="line">颜色？</span><br><span class="line">内存？</span><br><span class="line">硬盘？</span><br></pre></td></tr></table></figure>

<p>碰到难题了，不同的商品分类，可能属性是不一样的，比如手机有内存，衣服有尺码，我们是全品类的电商网站，这些不同的商品的不同属性，如何设计到一张表中？</p>
<p>其实颜色、内存、硬盘属性都是规格参数中的字段。所以，要解决这个问题，首先要能清楚规格参数。</p>
<h3 id="1-2-2-分析规格参数"><a href="#1-2-2-分析规格参数" class="headerlink" title="1.2.2.分析规格参数"></a>1.2.2.分析规格参数</h3><p>仔细查看每一种商品的规格你会发现：</p>
<p>虽然商品规格千变万化，但是同一类商品（如手机）的规格是统一的，有图为证：</p>
<blockquote>
<p>华为的规格：</p>
</blockquote>
<p> <img src="/images/day09/1526087063700.png" alt="1526087063700"></p>
<blockquote>
<p>三星的规格：</p>
</blockquote>
<p> <img src="/images/day09/1526087142454.png" alt="1526087142454"></p>
<h3 id="1-2-3-SKU的特有属性"><a href="#1-2-3-SKU的特有属性" class="headerlink" title="1.2.3.SKU的特有属性"></a>1.2.3.SKU的特有属性</h3><p>SPU中会有一些特殊属性，用来区分不同的SKU，我们称为SKU特有属性。如华为META10的颜色、内存属性。</p>
<p>不同种类的商品，一个手机，一个衣服，其SKU属性不相同。</p>
<p>同一种类的商品，比如都是衣服，SKU属性基本是一样的，都是颜色、尺码等。</p>
<p>这样说起来，似乎SKU的特有属性也是与分类相关的？事实上，仔细观察你会发现，<strong>SKU的特有属性是商品规格参数的一部分</strong>：</p>
<p><img src="/images/day09/1526088981953.png" alt="1526088981953"></p>
<p>也就是说，我们没必要单独对SKU的特有属性进行设计，它可以看做是规格参数中的一部分。这样规格参数中的属性可以标记成两部分：</p>
<ul>
<li>spu下所有sku共享的规格属性（称为全局属性）</li>
<li>每个sku不同的规格属性（称为特有属性）</li>
</ul>
<h3 id="1-2-4-搜索属性"><a href="#1-2-4-搜索属性" class="headerlink" title="1.2.4.搜索属性"></a>1.2.4.搜索属性</h3><p>打开一个搜索页，我们来看看过滤的条件：</p>
<p><img src="/images/day09/1526090072535.png" alt="1526090072535"></p>
<p>你会发现，过滤条件中的屏幕尺寸、运行内存、网路、机身内存、电池容量、CPU核数等，在规格参数中都能找到：</p>
<p> <img src="/images/day09/1526090228171.png" alt="1526090228171"></p>
<p>也就是说，规格参数中的数据，将来会有一部分作为搜索条件来使用。我们可以在设计时，将这部分属性标记出来，将来做搜索的时候，作为过滤条件。要注意的是，无论是SPU的全局属性，还是SKU的特有属性，都有可能作为搜索过滤条件的，并不冲突，而是有一个交集：</p>
<p> <img src="/images/day09/1526091216124.png" alt="1526091216124"></p>
<h2 id="1-3-规格参数表"><a href="#1-3-规格参数表" class="headerlink" title="1.3.规格参数表"></a>1.3.规格参数表</h2><h3 id="1-3-1-表结构"><a href="#1-3-1-表结构" class="headerlink" title="1.3.1.表结构"></a>1.3.1.表结构</h3><p>我们看下规格参数的格式：</p>
<p> <img src="/images/day09/1526092179381.png" alt="1526092179381"></p>
<p>可以看到规格参数是分组的，每一组都有多个参数键值对。不过对于规格参数的模板而言，其值现在是不确定的，不同的商品值肯定不同，模板中只要保存组信息、组内参数信息即可。</p>
<p>因此我们设计了两张表：</p>
<ul>
<li>tb_spec_group：组，与商品分类关联</li>
<li>tb_spec_param：参数名，与组关联，一对多</li>
</ul>
<h3 id="1-3-2-规格组"><a href="#1-3-2-规格组" class="headerlink" title="1.3.2.规格组"></a>1.3.2.规格组</h3><p>规格参数分组表：tb_spec_group</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_spec_group` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</span><br><span class="line">  `cid` bigint(20) NOT NULL COMMENT &apos;商品分类id，一个分类下有多个规格组&apos;,</span><br><span class="line">  `name` varchar(50) NOT NULL COMMENT &apos;规格组的名称&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `key_category` (`cid`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT=&apos;规格参数的分组表，每个商品分类下有多个规格参数组&apos;;</span><br></pre></td></tr></table></figure>

<p>规格组有3个字段：</p>
<ul>
<li>id：主键</li>
<li>cid：商品分类id，一个分类下有多个模板</li>
<li>name：该规格组的名称。</li>
</ul>
<h3 id="1-3-2-规格参数"><a href="#1-3-2-规格参数" class="headerlink" title="1.3.2.规格参数"></a>1.3.2.规格参数</h3><p>规格参数表：tb_spec_param</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_spec_param` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</span><br><span class="line">  `cid` bigint(20) NOT NULL COMMENT &apos;商品分类id&apos;,</span><br><span class="line">  `group_id` bigint(20) NOT NULL,</span><br><span class="line">  `name` varchar(255) NOT NULL COMMENT &apos;参数名&apos;,</span><br><span class="line">  `numeric` tinyint(1) NOT NULL COMMENT &apos;是否是数字类型参数，true或false&apos;,</span><br><span class="line">  `unit` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;数字类型参数的单位，非数字类型可以为空&apos;,</span><br><span class="line">  `generic` tinyint(1) NOT NULL COMMENT &apos;是否是sku通用属性，true或false&apos;,</span><br><span class="line">  `searching` tinyint(1) NOT NULL COMMENT &apos;是否用于搜索过滤，true或false&apos;,</span><br><span class="line">  `segments` varchar(1000) DEFAULT &apos;&apos; COMMENT &apos;数值类型参数，如果需要搜索，则添加分段间隔值，如CPU频率间隔：0.5-1.0&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `key_group` (`group_id`),</span><br><span class="line">  KEY `key_category` (`cid`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COMMENT=&apos;规格参数组下的参数名&apos;;</span><br></pre></td></tr></table></figure>

<p>按道理来说，我们的规格参数就只需要记录参数名、组id、商品分类id即可。但是这里却多出了很多字段，为什么？</p>
<p>还记得我们之前的分析吧，规格参数中有一部分是 SKU的通用属性，一部分是SKU的特有属性，而且其中会有一些将来用作搜索过滤，这些信息都需要标记出来。</p>
<blockquote>
<p>通用属性</p>
</blockquote>
<p>用一个布尔类型字段来标记是否为通用：</p>
<ul>
<li>generic来标记是否为通用属性：<ul>
<li>true：代表通用属性</li>
<li>false：代表sku特有属性</li>
</ul>
</li>
</ul>
<blockquote>
<p>搜索过滤</p>
</blockquote>
<p>与搜索相关的有两个字段：</p>
<ul>
<li>searching：标记是否用作过滤<ul>
<li>true：用于过滤搜索</li>
<li>false：不用于过滤</li>
</ul>
</li>
<li>segments：某些数值类型的参数，在搜索时需要按区间划分，这里提前确定好划分区间<ul>
<li>比如电池容量，0<del>2000mAh，2000mAh</del>3000mAh，3000mAh~4000mAh<blockquote>
<p>数值类型<br>某些规格参数可能为数值类型，这样的数据才需要划分区间，我们有两个字段来描述：</p>
</blockquote>
</li>
</ul>
</li>
<li>numberic：是否为数值类型<ul>
<li>true：数值类型</li>
<li>false：不是数值类型</li>
</ul>
</li>
<li>unit：参数的单位</li>
</ul>
<h1 id="2-商品规格参数管理"><a href="#2-商品规格参数管理" class="headerlink" title="2.商品规格参数管理"></a>2.商品规格参数管理</h1><h2 id="2-1-页面布局"><a href="#2-1-页面布局" class="headerlink" title="2.1.页面布局"></a>2.1.页面布局</h2><h3 id="2-1-1-整体布局"><a href="#2-1-1-整体布局" class="headerlink" title="2.1.1.整体布局"></a>2.1.1.整体布局</h3><p>打开规格参数页面，看到如下内容：</p>
<p><img src="/images/day09/1529549099049.png" alt="1529549099049"></p>
<p>商品分类树我们之前已经做过，所以这里可以直接展示出来。</p>
<p>因为规格是跟商品分类绑定的，因此首先会展现商品分类树，并且提示你要选择商品分类，才能看到规格参数的模板。一起了解下页面的实现：</p>
<p> <img src="/images/day09/1529549521623.png" alt="1529549521623"></p>
<p>页面结构：</p>
<p><img src="/images/day09/1528423299102.png" alt="1528423299102"></p>
<p>这里使用了<code>v-layout</code>来完成页面布局，并且添加了row属性，代表接下来的内容是行布局（左右）。</p>
<p>可以看出页面分成2个部分：</p>
<ul>
<li><code>&lt;v-flex xs3&gt;</code>：左侧，内部又分上下两部分：商品分类树及标题<ul>
<li><code>v-card-title</code>：标题部分，这里是提示信息，告诉用户要先选择分类，才能看到模板</li>
<li><code>v-tree</code>：这里用到的是我们之前讲过的树组件，展示商品分类树，</li>
</ul>
</li>
<li><code>&lt;v-flex xs9 class=&quot;px-1&quot;&gt;</code>：右侧：内部是规格参数展示</li>
</ul>
<h3 id="2-1-2-右侧规格"><a href="#2-1-2-右侧规格" class="headerlink" title="2.1.2.右侧规格"></a>2.1.2.右侧规格</h3><p>当我们点击一个分类时，最终要达到的效果：</p>
<p><img src="/images/day09/1529550402376.png" alt="1529550402376"></p>
<p>可以看到右侧分为上下两部分：</p>
<ul>
<li>上部：面包屑，显示当前选中的分类</li>
<li>下部：table，显示规格参数信息</li>
</ul>
<p>页面实现：</p>
<p><img src="/images/day09/1529550694218.png" alt="1529550694218"></p>
<p>可以看到右侧并不是我们熟悉的 <code>v-data-table</code>，而是一个<code>spec-group</code>组件（规格组）和<code>spec-param</code>组件（规格参数），这是我们定义的独立组件：</p>
<p> <img src="/images/day09/1529550775415.png" alt="1529550775415"></p>
<p>在SpecGroup中定义了表格：</p>
<p><img src="/images/day09/1528427514717.png" alt="1528427514717"></p>
<h2 id="2-2-规格组的查询"><a href="#2-2-规格组的查询" class="headerlink" title="2.2.规格组的查询"></a>2.2.规格组的查询</h2><h3 id="2-2-1-树节点的点击事件"><a href="#2-2-1-树节点的点击事件" class="headerlink" title="2.2.1.树节点的点击事件"></a>2.2.1.树节点的点击事件</h3><p>当我们点击树节点时，要将<code>v-dialog</code>打开，因此必须绑定一个点击事件：（Specification.vue）</p>
<p><img src="/images/day09/1528428028513.png" alt="1528428028513"></p>
<p>我们来看下<code>handleClick</code>方法：（Specification.vue）</p>
<p><img src="/images/day09/1528428221957.png" alt="1528428221957"></p>
<p>点击事件发生时，发生了两件事：</p>
<ul>
<li>记录当前选中的节点，选中的就是商品分类</li>
<li><code>showGroup</code>被置为true，则规格组就会显示了。</li>
</ul>
<p>同时，我们把被选中的节点（商品分类）的id传递给了<code>SpecGroup</code>组件：（Specification.vue）</p>
<p><img src="/images/day09/1528428308113.png" alt="1528428308113"></p>
<h3 id="2-2-2-页面查询规格组"><a href="#2-2-2-页面查询规格组" class="headerlink" title="2.2.2.页面查询规格组"></a>2.2.2.页面查询规格组</h3><p>来看下<code>SpecGroup.vue</code>中的实现：</p>
<p><img src="/images/day09/1528428617046.png" alt="1528428617046"></p>
<p>我们查看页面控制台，可以看到请求已经发出：</p>
<p><img src="/images/day09/1528428699027.png" alt="1528428699027"></p>
<h3 id="2-2-3-后端代码"><a href="#2-2-3-后端代码" class="headerlink" title="2.2.3.后端代码"></a>2.2.3.后端代码</h3><blockquote>
<p>实体类</p>
</blockquote>
<p>在<code>leyou-item-interface</code>中添加实体类：</p>
<p> <img src="/images/day09/1528429029149.png" alt="1528429029149"></p>
<p>内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spec_group"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SpecParam&gt; params;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// getter和setter省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spec_param"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecParam</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line">    <span class="keyword">private</span> Long groupId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"`numeric`"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean numeric;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">    <span class="keyword">private</span> Boolean generic;</span><br><span class="line">    <span class="keyword">private</span> Boolean searching;</span><br><span class="line">    <span class="keyword">private</span> String segments;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter和setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>leyou-item-service</code>中编写业务：</p>
<p> <img src="/images/day09/1528433648595.png" alt="1528433648595"></p>
<blockquote>
<p>mapper</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecGroupMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">SpecGroup</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>controller</p>
</blockquote>
<p>先分析下需要的东西，在页面的ajax请求中可以看出：</p>
<ul>
<li><p>请求方式：get</p>
</li>
<li><p>请求路径：/spec/groups/{cid} ，这里通过路径占位符传递商品分类的id</p>
</li>
<li><p>请求参数：商品分类id</p>
</li>
<li><p>返回结果：页面是直接把<code>resp.data</code>赋值给了groups：</p>
<p><img src="/images/day09/1528429342796.png" alt="1528429342796"></p>
<p>那么我们返回的应该是规格组SpecGroup的集合</p>
</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"spec"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecificationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationService specificationService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询分组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"groups/&#123;cid&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroup&gt;&gt; queryGroupsByCid(<span class="meta">@PathVariable</span>(<span class="string">"cid"</span>)Long cid)&#123;</span><br><span class="line">        List&lt;SpecGroup&gt; groups = <span class="keyword">this</span>.specificationService.queryGroupsByCid(cid);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(groups))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(groups);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>service</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecificationService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecGroupMapper groupMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询分组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SpecGroup&gt; <span class="title">queryGroupsByCid</span><span class="params">(Long cid)</span> </span>&#123;</span><br><span class="line">        SpecGroup specGroup = <span class="keyword">new</span> SpecGroup();</span><br><span class="line">        specGroup.setCid(cid);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.groupMapper.select(specGroup);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>页面访问测试：</p>
</blockquote>
<p>目前，我们数据库只为手机分类（76）提供了规格组：</p>
<p><img src="/images/day09/1528433697492.png" alt="1528433697492"></p>
<p>我们访问：<a href="http://api.leyou.com/api/item/spec/groups/76" target="_blank" rel="noopener">http://api.leyou.com/api/item/spec/groups/76</a></p>
<p><img src="/images/day09/1528433733340.png" alt="1528433733340"></p>
<p>然后在后台系统中测试：<br><img src="/images/day09/1528433821121.png" alt="1528433821121"></p>
<h2 id="2-3-规格参数查询"><a href="#2-3-规格参数查询" class="headerlink" title="2.3.规格参数查询"></a>2.3.规格参数查询</h2><h3 id="2-3-1-表格切换"><a href="#2-3-1-表格切换" class="headerlink" title="2.3.1.表格切换"></a>2.3.1.表格切换</h3><p>当我们点击规格组，会切换到规格参数显示，肯定是在规格组中绑定了点击事件：</p>
<p><img src="/images/day09/1528429949504.png" alt="1528429949504"></p>
<p>我们看下事件处理：</p>
<p><img src="/images/day09/1528429988410.png" alt="1528429988410"></p>
<p>可以看到这里是使用了父子通信，子组件触发了select事件：</p>
<p>再来看下父组件的事件绑定：</p>
<p><img src="/images/day09/1528430052736.png" alt="1528430052736"></p>
<p>事件处理：</p>
<p><img src="/images/day09/1528430100166.png" alt="1528430100166"></p>
<p>这里我们记录了选中的分组，并且把标记设置为false，这样规格组就不显示了，而是显示：<code>SpecParam</code></p>
<p>并且，我们把group也传递到<code>spec-param</code>组件：</p>
<p><img src="/images/day09/1528430147829.png" alt="1528430147829"></p>
<h3 id="2-3-2-页面查询规格参数"><a href="#2-3-2-页面查询规格参数" class="headerlink" title="2.3.2.页面查询规格参数"></a>2.3.2.页面查询规格参数</h3><p>我们来看<code>SpecParam.vue</code>的实现：</p>
<p><img src="/images/day09/1528430319461.png" alt="1528430319461"></p>
<p>查看页面控制台，发现请求已经发出：</p>
<p><img src="/images/day09/1528430407298.png" alt="1528430407298"></p>
<p>报404，因为我们还没有实现后台逻辑，接下来就去实现。</p>
<h3 id="2-3-3-后台实现"><a href="#2-3-3-后台实现" class="headerlink" title="2.3.3.后台实现"></a>2.3.3.后台实现</h3><blockquote>
<p>SpecificationController</p>
</blockquote>
<p>分析：</p>
<ul>
<li>请求方式：GET</li>
<li>请求路径：/spec/params</li>
<li>请求参数：gid，分组id</li>
<li>返回结果：该分组下的规格参数集合<code>List&lt;SpecParam&gt;</code></li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询规格参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"params"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecParam&gt;&gt; queryParams(<span class="meta">@RequestParam</span>(<span class="string">"gid"</span>)Long gid)&#123;</span><br><span class="line">    List&lt;SpecParam&gt;  params = <span class="keyword">this</span>.specificationService.queryParams(gid);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(params))&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SpecificationService</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SpecParamMapper paramMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询规格参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SpecParam&gt; <span class="title">queryParams</span><span class="params">(Long gid)</span> </span>&#123;</span><br><span class="line">    SpecParam param = <span class="keyword">new</span> SpecParam();</span><br><span class="line">    param.setGroupId(gid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.paramMapper.select(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SpecParamMapper</p>
</blockquote>
<p> <img src="/images/day09/1543383516456.png" alt="1543383516456"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecParamMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">SpecParam</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="/images/day09/1528442972016.png" alt="1528442972016"></p>
<h2 id="2-4-增、删、改（作业）"><a href="#2-4-增、删、改（作业）" class="headerlink" title="2.4.增、删、改（作业）"></a>2.4.增、删、改（作业）</h2><p>增删改的作业就留给大家去完成了。页面中接口都已定义，你要做的就是实现后台接口。</p>
<h1 id="3-SPU和SKU数据结构"><a href="#3-SPU和SKU数据结构" class="headerlink" title="3.SPU和SKU数据结构"></a>3.SPU和SKU数据结构</h1><p>规格确定以后，就可以添加商品了,先看下数据库表</p>
<h2 id="3-1-SPU表"><a href="#3-1-SPU表" class="headerlink" title="3.1.SPU表"></a>3.1.SPU表</h2><p>SPU表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_spu` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;spu id&apos;,</span><br><span class="line">  `title` varchar(255) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;标题&apos;,</span><br><span class="line">  `sub_title` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;子标题&apos;,</span><br><span class="line">  `cid1` bigint(20) NOT NULL COMMENT &apos;1级类目id&apos;,</span><br><span class="line">  `cid2` bigint(20) NOT NULL COMMENT &apos;2级类目id&apos;,</span><br><span class="line">  `cid3` bigint(20) NOT NULL COMMENT &apos;3级类目id&apos;,</span><br><span class="line">  `brand_id` bigint(20) NOT NULL COMMENT &apos;商品所属品牌id&apos;,</span><br><span class="line">  `saleable` tinyint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;是否上架，0下架，1上架&apos;,</span><br><span class="line">  `valid` tinyint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;是否有效，0已删除，1有效&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &apos;添加时间&apos;,</span><br><span class="line">  `last_update_time` datetime DEFAULT NULL COMMENT &apos;最后修改时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=208 DEFAULT CHARSET=utf8 COMMENT=&apos;spu表，该表描述的是一个抽象的商品，比如 iphone8&apos;;</span><br></pre></td></tr></table></figure>

<p>与我们前面分析的基本类似，但是似乎少了一些字段，比如商品描述。</p>
<p>我们做了表的垂直拆分，将SPU的详情放到了另一张表：tb_spu_detail</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_spu_detail` (</span><br><span class="line">  `spu_id` bigint(20) NOT NULL,</span><br><span class="line">  `description` text COMMENT &apos;商品描述信息&apos;,</span><br><span class="line">  `generic_spec` varchar(10000) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;通用规格参数数据&apos;,</span><br><span class="line">  `special_spec` varchar(1000) NOT NULL COMMENT &apos;特有规格参数及可选值信息，json格式&apos;,</span><br><span class="line">  `packing_list` varchar(3000) DEFAULT &apos;&apos; COMMENT &apos;包装清单&apos;,</span><br><span class="line">  `after_service` varchar(3000) DEFAULT &apos;&apos; COMMENT &apos;售后服务&apos;,</span><br><span class="line">  PRIMARY KEY (`spu_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<p>这张表中的数据都比较大，为了不影响主表的查询效率我们拆分出这张表。</p>
<p>需要注意的是这两个字段：generic_spec和special_spec。</p>
<p>前面讲过规格参数与商品分类绑定，一个分类下的所有SPU具有类似的规格参数。SPU下的SKU可能会有不同的规格参数信息，因此我们计划是这样：</p>
<ul>
<li>SPUDetail中保存通用的规格参数信息。</li>
<li>SKU中保存特有规格参数。</li>
</ul>
<p>来看下我们的表如何存储这些信息。</p>
<h3 id="3-1-1-generic-spec字段"><a href="#3-1-1-generic-spec字段" class="headerlink" title="3.1.1.generic_spec字段"></a>3.1.1.generic_spec字段</h3><p>首先是<code>generic_spec</code>，其中保存通用规格参数信息的值，这里为了方便查询，使用了json格式：</p>
<blockquote>
<p>整体来看：</p>
</blockquote>
<p> <img src="/images/day09/1529554390912.png" alt="1529554390912"></p>
<p>json结构，其中都是键值对：</p>
<ul>
<li>key：对应的规格参数的<code>spec_param</code>的id</li>
<li>value：对应规格参数的值</li>
</ul>
<h3 id="3-1-2-special-spec字段"><a href="#3-1-2-special-spec字段" class="headerlink" title="3.1.2.special_spec字段"></a>3.1.2.special_spec字段</h3><p>我们说spu中只保存通用规格参数，那么为什么有多出了一个<code>special_spec</code>字段呢？</p>
<p>以手机为例，品牌、操作系统等肯定是全局通用属性，内存、颜色等肯定是特有属性。</p>
<p>当你确定了一个SPU，比如小米的：红米4X</p>
<p>全局属性值都是固定的了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">品牌：小米</span><br><span class="line">型号：红米4X</span><br></pre></td></tr></table></figure>

<p>特有属性举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">颜色：[香槟金, 樱花粉, 磨砂黑]</span><br><span class="line">内存：[2G, 3G]</span><br><span class="line">机身存储：[16GB, 32GB]</span><br></pre></td></tr></table></figure>

<p>颜色、内存、机身存储，作为SKU特有属性，key虽然一样，但是SPU下的每一个SKU，其值都不一样，所以值会有很多，形成数组。</p>
<p>我们在SPU中，会把特有属性的所有值都记录下来，形成一个数组：</p>
<p>里面又有哪些内容呢？</p>
<p>来看数据格式：</p>
<p> <img src="/images/day09/1529554916252.png" alt="1529554916252"></p>
<p>也是json结构：</p>
<ul>
<li>key：规格参数id</li>
<li>value：spu属性的数组</li>
</ul>
<p>那么问题来：特有规格参数应该在sku中记录才对，为什么在spu中也要记录一份？</p>
<p>因为我们有时候需要把所有规格参数都查询出来，而不是只查询1个sku的属性。比如，商品详情页展示可选的规格参数时：</p>
<p> <img src="/images/day09/1526267828817.png" alt="1526267828817"></p>
<p>刚好符合我们的结构，这样页面渲染就非常方便了。</p>
<h2 id="3-2-SKU表"><a href="#3-2-SKU表" class="headerlink" title="3.2.SKU表"></a>3.2.SKU表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_sku` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;sku id&apos;,</span><br><span class="line">  `spu_id` bigint(20) NOT NULL COMMENT &apos;spu id&apos;,</span><br><span class="line">  `title` varchar(255) NOT NULL COMMENT &apos;商品标题&apos;,</span><br><span class="line">  `images` varchar(1000) DEFAULT &apos;&apos; COMMENT &apos;商品的图片，多个图片以‘,’分割&apos;,</span><br><span class="line">  `price` bigint(15) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;销售价格，单位为分&apos;,</span><br><span class="line">  `indexes` varchar(100) COMMENT &apos;特有规格属性在spu属性模板中的对应下标组合&apos;,</span><br><span class="line">  `own_spec` varchar(1000) COMMENT &apos;sku的特有规格参数，json格式&apos;,</span><br><span class="line">  `enable` tinyint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;是否有效，0无效，1有效&apos;,</span><br><span class="line">  `create_time` datetime NOT NULL COMMENT &apos;添加时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL COMMENT &apos;最后修改时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `key_spu_id` (`spu_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;sku表,该表表示具体的商品实体,如黑色的64GB的iphone 8&apos;;</span><br></pre></td></tr></table></figure>

<p>还有一张表，代表库存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_stock` (</span><br><span class="line">  `sku_id` bigint(20) NOT NULL COMMENT &apos;库存对应的商品sku id&apos;,</span><br><span class="line">  `seckill_stock` int(9) DEFAULT &apos;0&apos; COMMENT &apos;可秒杀库存&apos;,</span><br><span class="line">  `seckill_total` int(9) DEFAULT &apos;0&apos; COMMENT &apos;秒杀总数量&apos;,</span><br><span class="line">  `stock` int(9) NOT NULL COMMENT &apos;库存数量&apos;,</span><br><span class="line">  PRIMARY KEY (`sku_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;库存表，代表库存，秒杀库存等信息&apos;;</span><br></pre></td></tr></table></figure>

<p>问题：为什么要将库存独立一张表？</p>
<p>因为库存字段写频率较高，而SKU的其它字段以读为主，因此我们将两张表分离，读写不会干扰。</p>
<p>特别需要注意的是sku表中的<code>indexes</code>字段和<code>own_spec</code>字段。sku中应该保存特有规格参数的值，就在这两个字段中。</p>
<h3 id="3-2-1-indexes字段"><a href="#3-2-1-indexes字段" class="headerlink" title="3.2.1.indexes字段"></a>3.2.1.indexes字段</h3><p>在SPU表中，已经对特有规格参数及可选项进行了保存，结构如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"4"</span>: [</span><br><span class="line">        <span class="string">"香槟金"</span>,</span><br><span class="line">        <span class="string">"樱花粉"</span>,</span><br><span class="line">        <span class="string">"磨砂黑"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"12"</span>: [</span><br><span class="line">        <span class="string">"2GB"</span>,</span><br><span class="line">        <span class="string">"3GB"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"13"</span>: [</span><br><span class="line">        <span class="string">"16GB"</span>,</span><br><span class="line">        <span class="string">"32GB"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些特有属性如果排列组合，会产生12个不同的SKU，而不同的SKU，其属性就是上面备选项中的一个。</p>
<p>比如：</p>
<ul>
<li>红米4X，香槟金，2GB内存，16GB存储</li>
<li>红米4X，磨砂黑，2GB内存，32GB存储</li>
</ul>
<p>你会发现，每一个属性值，对应于SPUoptions数组的一个选项，如果我们记录下角标，就是这样：</p>
<ul>
<li>红米4X，0,0,0</li>
<li>红米4X，2,0,1</li>
</ul>
<p>既然如此，我们是不是可以将不同角标串联起来，作为SPU下不同SKU的标示。这就是我们的indexes字段。</p>
<p> <img src="/images/day09/1526266901335.png" alt="1526266901335"></p>
<p>这个设计在商品详情页会特别有用：</p>
<p> <img src="/images/day09/1526267180997.png" alt="1526267180997"></p>
<p>当用户点击选中一个特有属性，你就能根据 角标快速定位到sku。</p>
<h3 id="3-2-2-own-spec字段"><a href="#3-2-2-own-spec字段" class="headerlink" title="3.2.2.own_spec字段"></a>3.2.2.own_spec字段</h3><p>看结构：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"4"</span>:<span class="string">"香槟金"</span>,<span class="attr">"12"</span>:<span class="string">"2GB"</span>,<span class="attr">"13"</span>:<span class="string">"16GB"</span>&#125;</span><br></pre></td></tr></table></figure>

<p>保存的是特有属性的键值对。</p>
<p>SPU中保存的是可选项，但不确定具体的值，而SKU中的保存的就是具体的值。</p>
<h2 id="3-3-导入图片信息"><a href="#3-3-导入图片信息" class="headerlink" title="3.3.导入图片信息"></a>3.3.导入图片信息</h2><p>现在商品表中虽然有数据，但是所有的图片信息都是无法访问的，我们需要把图片导入到虚拟机：</p>
<p>首先，把课前资料提供的数据上传到虚拟机下：<code>/leyou/static</code>目录：在leyou下创建static目录</p>
<p><img src="/images/day09/1528445149890.png" alt="1528445149890"></p>
<p><img src="/images/day09/1528479229165.png" alt="1528479229165"></p>
<p>然后，使用命令解压缩：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">unzip images.zip</span><br></pre></td></tr></table></figure>

<p>修改Nginx配置，使nginx反向代理这些图片地址：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /opt/nginx/config/nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改成如下配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  image.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听域名中带有group的，交给FastDFS模块处理</span></span><br><span class="line">    <span class="attribute">location</span> ~/group([<span class="number">0</span>-<span class="number">9</span>])/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 将其它图片代理指向本地的/leyou/static目录</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /leyou/static/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要忘记重新加载nginx配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h1 id="4-商品查询"><a href="#4-商品查询" class="headerlink" title="4.商品查询"></a>4.商品查询</h1><h2 id="4-1-效果预览"><a href="#4-1-效果预览" class="headerlink" title="4.1.效果预览"></a>4.1.效果预览</h2><p>接下来，我们实现商品管理的页面，先看下我们要实现的效果：</p>
<p><img src="/images/day09/1526268595873.png" alt="1526268595873"></p>
<p>可以看出整体是一个table，然后有新增按钮。是不是跟昨天写品牌管理很像？</p>
<h2 id="4-2-页面请求"><a href="#4-2-页面请求" class="headerlink" title="4.2.页面请求"></a>4.2.页面请求</h2><p>先看整体页面结构（Goods.vue）：</p>
<p><img src="/images/day09/1528447301687.png" alt="1528447301687"></p>
<p>并且在Vue实例挂载后就会发起查询(mounted调用getDataFromServer方法初始化数据)：</p>
<p><img src="/images/day09/1528447431959.png" alt="1528447431959"></p>
<p>我们刷新页面，可以看到浏览器发起已经发起了查询商品数据的请求：</p>
<p><img src="/images/day09/1528447591939.png" alt="1528447591939"></p>
<p>因此接下来，我们编写接口即可。</p>
<h2 id="4-3-后台提供接口"><a href="#4-3-后台提供接口" class="headerlink" title="4.3.后台提供接口"></a>4.3.后台提供接口</h2><p>页面已经准备好，接下来在后台提供分页查询SPU的功能。</p>
<p> <img src="/images/day09/1543414148030.png" alt="1543414148030"></p>
<p> <img src="/images/day09/1543413983147.png" alt="1543413983147"></p>
<h3 id="4-3-1-实体类"><a href="#4-3-1-实体类" class="headerlink" title="4.3.1.实体类"></a>4.3.1.实体类</h3><p>在leyou-item-interface工程中添加实体类：</p>
<blockquote>
<p>SPU</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spu"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spu</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">    <span class="keyword">private</span> Long cid1;<span class="comment">// 1级类目</span></span><br><span class="line">    <span class="keyword">private</span> Long cid2;<span class="comment">// 2级类目</span></span><br><span class="line">    <span class="keyword">private</span> Long cid3;<span class="comment">// 3级类目</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String subTitle;<span class="comment">// 子标题</span></span><br><span class="line">    <span class="keyword">private</span> Boolean saleable;<span class="comment">// 是否上架</span></span><br><span class="line">    <span class="keyword">private</span> Boolean valid;<span class="comment">// 是否有效，逻辑删除用</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date lastUpdateTime;<span class="comment">// 最后修改时间</span></span><br><span class="line">	<span class="comment">// 省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SPU详情</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_spu_detail"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuDetail</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long spuId;<span class="comment">// 对应的SPU的id</span></span><br><span class="line">    <span class="keyword">private</span> String description;<span class="comment">// 商品描述</span></span><br><span class="line">    <span class="keyword">private</span> String specialSpec;<span class="comment">// 商品特殊规格的名称及可选值模板</span></span><br><span class="line">    <span class="keyword">private</span> String genericSpec;<span class="comment">// 商品的全局规格属性</span></span><br><span class="line">    <span class="keyword">private</span> String packingList;<span class="comment">// 包装清单</span></span><br><span class="line">    <span class="keyword">private</span> String afterService;<span class="comment">// 售后服务</span></span><br><span class="line">    <span class="comment">// 省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-2-mapper"><a href="#4-4-2-mapper" class="headerlink" title="4.4.2.mapper"></a>4.4.2.mapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpuMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Spu</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-3-controller"><a href="#4-3-3-controller" class="headerlink" title="4.3.3.controller"></a>4.3.3.controller</h3><p>先分析：</p>
<ul>
<li><p>请求方式：GET</p>
</li>
<li><p>请求路径：/spu/page</p>
</li>
<li><p>请求参数：</p>
<ul>
<li>page：当前页</li>
<li>rows：每页大小</li>
<li>key：过滤条件</li>
<li>saleable：上架或下架</li>
</ul>
</li>
<li><p>返回结果：商品SPU的分页信息。</p>
<ul>
<li><p>要注意，页面展示的是商品分类和品牌名称，而数据库中保存的是id，怎么办？</p>
<p>我们可以新建一个类，继承SPU，并且拓展cname和bname属性，写到<code>leyou-item-interface</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuBo</span> <span class="keyword">extends</span> <span class="title">Spu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String cname;<span class="comment">// 商品分类名称</span></span><br><span class="line">    </span><br><span class="line">    String bname;<span class="comment">// 品牌名称</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 略 。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>编写controller代码：</p>
<p>我们把与商品相关的一切业务接口都放到一起，起名为GoodsController，业务层也是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"spu/page"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;SpuBo&gt;&gt; querySpuBoByPage(</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"key"</span>, required = <span class="keyword">false</span>)String key,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"saleable"</span>, required = <span class="keyword">false</span>)Boolean saleable,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)Integer page,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"rows"</span>, defaultValue = <span class="string">"5"</span>)Integer rows</span><br><span class="line">    )&#123;</span><br><span class="line">        PageResult&lt;SpuBo&gt; pageResult = <span class="keyword">this</span>.goodsService.querySpuBoByPage(key, saleable, page, rows);</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(pageResult.getItems()))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-4-service"><a href="#4-4-4-service" class="headerlink" title="4.4.4.service"></a>4.4.4.service</h3><p>所有商品相关的业务（包括SPU和SKU）放到一个业务下：GoodsService。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpuMapper spuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandMapper brandMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult&lt;SpuBo&gt; <span class="title">querySpuBoByPage</span><span class="params">(String key, Boolean saleable, Integer page, Integer rows)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Spu<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line">        <span class="comment">// 搜索条件</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(key)) &#123;</span><br><span class="line">            criteria.andLike(<span class="string">"title"</span>, <span class="string">"%"</span> + key + <span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (saleable != <span class="keyword">null</span>) &#123;</span><br><span class="line">            criteria.andEqualTo(<span class="string">"saleable"</span>, saleable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页条件</span></span><br><span class="line">        PageHelper.startPage(page, rows);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Spu&gt; spus = <span class="keyword">this</span>.spuMapper.selectByExample(example);</span><br><span class="line">        PageInfo&lt;Spu&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(spus);</span><br><span class="line"></span><br><span class="line">        List&lt;SpuBo&gt; spuBos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        spus.forEach(spu-&gt;&#123;</span><br><span class="line">            SpuBo spuBo = <span class="keyword">new</span> SpuBo();</span><br><span class="line">            <span class="comment">// copy共同属性的值到新的对象</span></span><br><span class="line">            BeanUtils.copyProperties(spu, spuBo);</span><br><span class="line">            <span class="comment">// 查询分类名称</span></span><br><span class="line">            List&lt;String&gt; names = <span class="keyword">this</span>.categoryService.queryNamesByIds(Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));</span><br><span class="line">            spuBo.setCname(StringUtils.join(names, <span class="string">"/"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询品牌的名称</span></span><br><span class="line">            spuBo.setBname(<span class="keyword">this</span>.brandMapper.selectByPrimaryKey(spu.getBrandId()).getName());</span><br><span class="line"></span><br><span class="line">            spuBos.add(spuBo);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(pageInfo.getTotal(), spuBos);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-5-Category中拓展查询名称的功能"><a href="#4-4-5-Category中拓展查询名称的功能" class="headerlink" title="4.4.5.Category中拓展查询名称的功能"></a>4.4.5.Category中拓展查询名称的功能</h3><p>页面需要商品的分类名称需要在这里查询，因此要额外提供查询分类名称的功能，</p>
<p>在CategoryService中添加功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">queryNamesByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">    List&lt;Category&gt; list = <span class="keyword">this</span>.categoryMapper.selectByIdList(ids);</span><br><span class="line">    List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Category category : list) &#123;</span><br><span class="line">        names.add(category.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> names;</span><br><span class="line">    <span class="comment">// return list.stream().map(category -&gt; category.getName()).collect(Collectors.toList());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapper的selectByIdList方法是来自于通用mapper。不过需要我们在mapper上继承一个通用mapper接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Category</span>&gt;, <span class="title">SelectByIdListMapper</span>&lt;<span class="title">Category</span>, <span class="title">Long</span>&gt; </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5.测试"></a>4.5.测试</h2><p>刷新页面，查看效果：</p>
<p><img src="/images/day09/1528450054541.png" alt="1528450054541"></p>
<p>基本与预览的效果一致，OK！</p>

    <div id="aplayer-VJlmzBuh" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1374646027" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>



]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题（6）</title>
    <url>/2019/12/12/leetcodeDay6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="今日杂文"><a href="#今日杂文" class="headerlink" title="今日杂文"></a>今日杂文</h2><p>今天参加了全球捷运物流集团的宣讲会，非常不错的公司，当场做了笔试题，sql查询语句还是得多练啊，好久不练就退化了，加油，今天我们听什么歌呢？</p>
<a id="more"></a>
<h2 id="2的幂（简单）"><a href="#2的幂（简单）" class="headerlink" title="2的幂（简单）"></a>2的幂（简单）</h2><p><img src="/images/leetcode/1576148526(1).jpg" alt="示例图"></p>
<p>先看代码吧，我是服了哈哈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理如下图：<br><img src="/images/leetcode/1576148933(1).jpg" alt="示例图"></p>
<h2 id="二叉搜索树的最近公共祖先（简单）"><a href="#二叉搜索树的最近公共祖先（简单）" class="headerlink" title="二叉搜索树的最近公共祖先（简单）"></a>二叉搜索树的最近公共祖先（简单）</h2><p><img src="/images/leetcode/1576149989(1).jpg" alt="示例图"><br>原理：<br>根结点比两个结点都大 就在左子树找<br>根结点比两个结点都小 就在右子树找<br>否则就返回根结点</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;p.val &amp;&amp; root.val&gt;q.val) <span class="keyword">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="keyword">if</span>(root.val&lt;p.val &amp;&amp; root.val&lt;q.val) <span class="keyword">return</span> lowestCommonAncestor(root.right,p,q);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除链表中的节点（简单）"><a href="#删除链表中的节点（简单）" class="headerlink" title="删除链表中的节点（简单）"></a>删除链表中的节点（简单）</h2><p><img src="/images/leetcode/1576150614(1).jpg" alt="示例图"><br>这题真是脑筋急转弯，我一直在想为什么head都没传进来哈哈，难怪题目说了除去尾部的不删<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Nim游戏（简单）"><a href="#Nim游戏（简单）" class="headerlink" title="Nim游戏（简单）"></a>Nim游戏（简单）</h2><p><img src="/images/leetcode/1576151056(1).jpg" alt="示例图"><br>机智如你，这题就是要避免4<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n % <span class="number">4</span> != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反转字符串中的单词III（简单）"><a href="#反转字符串中的单词III（简单）" class="headerlink" title="反转字符串中的单词III（简单）"></a>反转字符串中的单词III（简单）</h2><p><img src="/images/leetcode/1576151637(1).jpg" alt="示例图"><br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String words[] = s.split(<span class="string">" "</span>);</span><br><span class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String word: words)</span><br><span class="line">            res.append(<span class="keyword">new</span> StringBuffer(word).reverse().toString() + <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-fMFXCGpL" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="7763" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>

]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题（5）</title>
    <url>/2019/12/11/leetcodeDay5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="去他妈的世界"><a href="#去他妈的世界" class="headerlink" title="去他妈的世界"></a>去他妈的世界</h2><p>让一让</p>
<a id="more"></a>
<h2 id="环形链表（简单）"><a href="#环形链表（简单）" class="headerlink" title="环形链表（简单）"></a>环形链表（简单）</h2><p><img src="/images/leetcode/1576069921(1).jpg" alt="示例图"><br>判断有没有环，来两个指针一快一慢，两个运动员，一个速度快，一个速度慢，如果是环形的跑道，快的一定会追上快的<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反转链表（简单）"><a href="#反转链表（简单）" class="headerlink" title="反转链表（简单）"></a>反转链表（简单）</h2><p><img src="/images/leetcode/1576071801(1).jpg" alt="示例图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">       ListNode cur = head;</span><br><span class="line">       ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">           ListNode temp = cur.next;</span><br><span class="line">           cur.next = pre;</span><br><span class="line">           pre = cur;</span><br><span class="line">           cur = temp;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="存在重复元素（简单）"><a href="#存在重复元素（简单）" class="headerlink" title="存在重复元素（简单）"></a>存在重复元素（简单）</h2><p><img src="/images/leetcode/1576072543(1).jpg" alt="示例图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i - <span class="number">1</span>] == nums[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-AgLbdazO" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="784257" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>

]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题（4）</title>
    <url>/2019/12/10/leetcodeDay4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="题做万遍"><a href="#题做万遍" class="headerlink" title="题做万遍"></a>题做万遍</h2><p>昨天看了个程序员大佬说，小白与其费神研究源码，不如多敲几遍代码</p>
<a id="more"></a>
<h2 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h2><p><img src="/images/leetcode/1575977863(1).jpg" alt="示例图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = maxDepth(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left &gt; right?left + <span class="number">1</span> : right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h2><p>很多读者抱怨股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变。</p>
<p>这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。</p>
<p>先随便抽出一道题，看看别人的解法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> s1=-prices[<span class="number">0</span>],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.size();++i) &#123;            </span><br><span class="line">        s1 = max(s1, -prices[i]);</span><br><span class="line">        s2 = max(s2, s1+prices[i]);</span><br><span class="line">        s3 = max(s3, s2-prices[i]);</span><br><span class="line">        s4 = max(s4, s3+prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(<span class="number">0</span>,s4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。</p>
<p>本文就来告诉你这个框架，然后带着你一道一道秒杀。</p>
<p>这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。</p>
<p>第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。</p>
<h3 id="一、穷举框架"><a href="#一、穷举框架" class="headerlink" title="一、穷举框架"></a>一、穷举框架</h3><p>首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。</p>
<p>递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。</p>
<p>而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。</p>
<p>for 状态1 in 状态1的所有取值：<br>    for 状态2 in 状态2的所有取值：<br>        for …<br>            dp[状态1][状态2][…] = 择优(选择1，选择2…)<br>比如说这个问题，每天都有三种「选择」：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k &gt; 0 的前提下操作。</p>
<p>很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span> or <span class="number">1</span>]</span><br><span class="line"><span class="number">0</span> &lt;= i &lt;= n-<span class="number">1</span>, <span class="number">1</span> &lt;= k &lt;= K</span><br><span class="line">n 为天数，大 K 为最多交易数</span><br><span class="line">此问题共 n × K × <span class="number">2</span> 种状态，全部穷举就能搞定。</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt;= i &lt; n:</span><br><span class="line">    <span class="keyword">for</span> <span class="number">1</span> &lt;= k &lt;= K:</span><br><span class="line">        <span class="keyword">for</span> s in &#123;<span class="number">0</span>, <span class="number">1</span>&#125;:</span><br><span class="line">            dp[i][k][s] = max(buy, sell, rest)</span><br></pre></td></tr></table></figure>

<p>而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？</p>
<p>我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。</p>
<p>记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。</p>
<h3 id="二、状态转移框架"><a href="#二、状态转移框架" class="headerlink" title="二、状态转移框架"></a>二、状态转移框架</h3><p>现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。</p>
<p>通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 sell      )</span><br></pre></td></tr></table></figure>

<p>解释：今天我没有持有股票，有两种可能：<br>要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；<br>要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 buy         )</span><br></pre></td></tr></table></figure>

<p>解释：今天我持有着股票，有两种可能：<br>要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；<br>要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。<br>这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。</p>
<p>现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 base case，即最简单的情况。</p>
<p>dp[-1][k][0] = 0<br>解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。<br>dp[-1][k][1] = -infinity<br>解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。<br>dp[i][0][0] = 0<br>解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。<br>dp[i][0][1] = -infinity<br>解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。<br>把上面的状态转移方程总结一下：</p>
<p>base case：<br>dp[-1][k][0] = dp[i][0][0] = 0<br>dp[-1][k][1] = dp[i][0][1] = -infinity</p>
<p>状态转移方程：<br>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。</p>
<h3 id="三、秒杀题目"><a href="#三、秒杀题目" class="headerlink" title="三、秒杀题目"></a>三、秒杀题目</h3><p>第一题，k = 1</p>
<p>直接套状态转移方程，根据 base case，可以做一些化简：</p>
<p>dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])<br>dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i])<br>            = max(dp[i-1][1][1], -prices[i])<br>解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。</p>
<p>现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。<br>可以进行进一步化简去掉所有 k：<br>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], -prices[i])<br>直接写出代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = prices.length;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>return dp[n - 1][0];<br>显然 i = 0 时 dp[i-1] 是不合法的。这是因为我们没有对 i 的 base case 进行处理。可以这样处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 解释：</span></span><br><span class="line">        <span class="comment">//   dp[i][0] </span></span><br><span class="line">        <span class="comment">// = max(dp[-1][0], dp[-1][1] + prices[i])</span></span><br><span class="line">        <span class="comment">// = max(0, -infinity + prices[i]) = 0</span></span><br><span class="line">        dp[i][<span class="number">1</span>] = -prices[i];</span><br><span class="line">        <span class="comment">//解释：</span></span><br><span class="line">        <span class="comment">//   dp[i][1] </span></span><br><span class="line">        <span class="comment">// = max(dp[-1][1], dp[-1][0] - prices[i])</span></span><br><span class="line">        <span class="comment">// = max(-infinity, 0 - prices[i]) </span></span><br><span class="line">        <span class="comment">// = -prices[i]</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，新状态只和相邻的一个状态有关，其实不用整个 dp 数组，只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// k == 1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_k_1</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="comment">// base case: dp[-1][0] = 0, dp[-1][1] = -infinity</span></span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])</span></span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        <span class="comment">// dp[i][1] = max(dp[i-1][1], -prices[i])</span></span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, -prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。</p>
<p>第二题，k = +infinity</p>
<p>如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。可以这样改写框架：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">            = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure>

<p>我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：<br>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])<br>直接翻译成代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_k_inf</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三题，k = +infinity with cooldown</p>
<p>每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：<br>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])<br>解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。<br>翻译成代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_with_cool</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">int</span> dp_pre_0 = <span class="number">0</span>; <span class="comment">// 代表 dp[i-2][0]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);</span><br><span class="line">        dp_pre_0 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四题，k = +infinity with fee<br>每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：<br>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)<br>解释：相当于买入股票的价格升高了。<br>在第一个式子里减也是一样的，相当于卖出股票的价格减小了。<br>直接翻译成代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_with_fee</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五题，k = 2<br>k = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。<br>这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了。我们直接写代码，边写边分析原因。<br>原始的动态转移方程，没有可化简的地方<br>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>按照之前的代码，我们可能想当然这样写代码（错误的）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> k = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123; <span class="comment">/* 处理一下 base case*/</span> &#125;</span><br><span class="line">    dp[i][k][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][k][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>][k][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>为什么错误？我这不是照着状态转移方程写的吗？<br>还记得前面总结的「穷举框架」吗？就是说我们必须穷举所有状态。其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> max_k = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][max_k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123; </span><br><span class="line">            <span class="comment">/* 处理 base case */</span></span><br><span class="line">            dp[i][k][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[i][k][<span class="number">1</span>] = -prices[i];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">        dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>// 穷举了 n × max_k × 2 个状态，正确。<br>return dp[n - 1][max_k][0];<br>这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][<span class="number">2</span>][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">2</span>][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], -prices[i])</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_k_2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dp_i10 = <span class="number">0</span>, dp_i11 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">int</span> dp_i20 = <span class="number">0</span>, dp_i21 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">        dp_i20 = Math.max(dp_i20, dp_i21 + price);</span><br><span class="line">        dp_i21 = Math.max(dp_i21, dp_i10 - price);</span><br><span class="line">        dp_i10 = Math.max(dp_i10, dp_i11 + price);</span><br><span class="line">        dp_i11 = Math.max(dp_i11, -price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i20;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。<br>第六题，k = any integer<br>有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？<br>一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。<br>直接把之前的代码重用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_k_any</span><span class="params">(<span class="keyword">int</span> max_k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">if</span> (max_k &gt; n / <span class="number">2</span>) </span><br><span class="line">        <span class="keyword">return</span> maxProfit_k_inf(prices);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][max_k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123; </span><br><span class="line">                <span class="comment">/* 处理 base case */</span></span><br><span class="line">                dp[i][k][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                dp[i][k][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);     </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>][max_k][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，6 道题目通过一个状态转移方程全部解决。<br>四、最后总结<br>本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。<br>关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？<br>具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「三维 DP」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。<br>所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。<br>作者：labuladong<br>链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/</a><br>来源：力扣（LeetCode）</p>

    <div id="aplayer-NSwcwnZM" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1325711347" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>FastDFS的安装</title>
    <url>/2019/12/09/FastDFS%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-Linux下使用FastDFS"><a href="#1-Linux下使用FastDFS" class="headerlink" title="1.Linux下使用FastDFS"></a>1.Linux下使用FastDFS</h1><p><strong>本教程所有操作均在CentOS 6.x环境下进行。</strong></p>
<p>将课前资料中的所需文件，上传到/usr/local/leyou目录下：</p>
<p><img src="/images/fdfs/1528196363110.png" alt="1528196363110"></p>
<a id="more"></a>
<h2 id="1-1-单节点FastDFS"><a href="#1-1-单节点FastDFS" class="headerlink" title="1.1.单节点FastDFS"></a>1.1.单节点FastDFS</h2><p>整个安装过程非常复杂，很容易出错，建议进行多次备份。</p>
<p>我们这里不打算安装多台虚拟机，因此会把tracker和storage都安装在一起。</p>
<h3 id="1-1-1-安装gcc"><a href="#1-1-1-安装gcc" class="headerlink" title="1.1.1.安装gcc"></a>1.1.1.安装gcc</h3><p>GCC用来对C语言代码进行编译运行，使用yum命令安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure>

<p>后面会用到解压命令（unzip），所以这里可以用yum把unzip 也装一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y unzip zip</span><br></pre></td></tr></table></figure>



<h3 id="1-1-2-安装libevent"><a href="#1-1-2-安装libevent" class="headerlink" title="1.1.2.安装libevent"></a>1.1.2.安装libevent</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install libevent</span><br></pre></td></tr></table></figure>



<h3 id="1-1-3-安装libfastcommon-master"><a href="#1-1-3-安装libfastcommon-master" class="headerlink" title="1.1.3.安装libfastcommon-master"></a>1.1.3.安装libfastcommon-master</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">解压刚刚上传的libfastcommon-master.zip</span><br><span class="line">unzip libfastcommon-master.zip</span><br><span class="line"></span><br><span class="line">进入解压完成的目录</span><br><span class="line">cd libfastcommon-master</span><br><span class="line"></span><br><span class="line">编译并且安装：</span><br><span class="line">./make.sh </span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure>



<h3 id="1-1-4-安装fastdfs"><a href="#1-1-4-安装fastdfs" class="headerlink" title="1.1.4.安装fastdfs"></a>1.1.4.安装fastdfs</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf FastDFS_v5.08.tar.gz</span><br><span class="line"></span><br><span class="line">cd FastDFS</span><br><span class="line"></span><br><span class="line">./make.sh </span><br><span class="line"></span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure>



<p>如果安装成功，会看到/etc/init.d/下看到提供的脚本文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /etc/init.d/ | grep fdfs</span><br></pre></td></tr></table></figure>

<p><img src="/images/fdfs/1528189386508.png" alt="1528189386508"></p>
<ul>
<li><code>fdfs_trackerd</code> 是tracker启动脚本</li>
<li><code>fdfs_storaged</code> 是storage启动脚本</li>
</ul>
<p>能够在 /etc/fdfs/ 目录下看到默认的配置文件模板：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /etc/fdfs/</span><br></pre></td></tr></table></figure>

<p><img src="/images/fdfs/1528189443696.png" alt="1528189443696"></p>
<ul>
<li><code>tarcker.conf.sample</code> 是tracker的配置文件模板</li>
<li><code>storage.conf.sample</code> 是storage的配置文件模板</li>
<li><code>client.conf.sample</code> 是客户端的配置文件模板</li>
</ul>
<h3 id="1-1-5-配置并启动tracker服务"><a href="#1-1-5-配置并启动tracker服务" class="headerlink" title="1.1.5.配置并启动tracker服务"></a>1.1.5.配置并启动tracker服务</h3><p>FastDFS的tracker和storage在刚刚的安装过程中，都已经被安装了，因此我们安装这两种角色的方式是一样的。不同的是，两种需要不同的配置文件。</p>
<p>我们要启动tracker，就修改刚刚看到的<code>tarcker.conf</code>，并且启动<code>fdfs_trackerd</code>脚本即可。</p>
<p>1）首先将模板文件复制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>



<p>2）修改复制后的配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>

<p># 修改的内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/leyou/tracker                 # 存储日志和数据的根目录</span><br></pre></td></tr></table></figure>

<p>3）新建目录：     </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /leyou/tracker</span><br></pre></td></tr></table></figure>



<p>注意：关闭防火墙：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure>



<p>4）启动和停止</p>
<p>启动tracker服务器:     <code>/etc/init.d/fdfs_trackerd start</code></p>
<p>停止tracker服务器:     <code>/etc/init.d/fdfs_trackerd stop</code></p>
<p>不过安装过程中，fdfs已经被设置为系统服务，我们可以采用熟悉的服务启动方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service fdfs_trackerd start # 启动fdfs_trackerd服务，停止用stop</span><br></pre></td></tr></table></figure>

<p>检查FastDFS Tracker Server是否启动成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep fdfs_trackerd</span><br></pre></td></tr></table></figure>

<p>设置tracker服务开机启动:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig fdfs_trackerd on</span><br></pre></td></tr></table></figure>



<h3 id="1-1-6-配置并启动storage服务"><a href="#1-1-6-配置并启动storage服务" class="headerlink" title="1.1.6.配置并启动storage服务"></a>1.1.6.配置并启动storage服务</h3><p>1）首先将模板文件复制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>



<p>2）修改复制后的配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>

<p># 修改的内容如下: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/leyou/storage                 # 数据和日志文件存储根目录 </span><br><span class="line"></span><br><span class="line">store_path0=/leyou/storage           # 第一个存储目录 </span><br><span class="line"></span><br><span class="line">tracker_server=192.168.56.101:22122       #  tracker服务器IP和端口</span><br></pre></td></tr></table></figure>

<p>3）新建目录：     </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /leyou/storage</span><br></pre></td></tr></table></figure>



<p>注意关闭防火墙：   <code>chkconfig iptables off</code></p>
<p>4）启动和停止</p>
<p>启动storage服务器：<code>/etc/init.d/fdfs_storaged start</code></p>
<p>停止storage服务器：<code>/etc/init.d/fdfs_storaged stop</code></p>
<p>推荐使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service fdfs_storaged start  # 启动fdfs_storaged服务，停止用stop</span><br></pre></td></tr></table></figure>

<p>设置storage服务开机启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig fdfs_storaged on</span><br></pre></td></tr></table></figure>

<p>ps -ef | grep fdfs</p>
<p><img src="/images/fdfs/1532866185562.png" alt="1532866185562"></p>
<h1 id="2-使用nginx访问FastDFS"><a href="#2-使用nginx访问FastDFS" class="headerlink" title="2.使用nginx访问FastDFS"></a>2.使用nginx访问FastDFS</h1><h2 id="2-1-为什么需要用Nginx访问？"><a href="#2-1-为什么需要用Nginx访问？" class="headerlink" title="2.1.为什么需要用Nginx访问？"></a>2.1.为什么需要用Nginx访问？</h2><p>FastDFS通过Tracker服务器,将文件放在Storage服务器存储，但是同组存储服务器之间需要进入文件复制，有同步延迟的问题。</p>
<p>假设Tracker服务器将文件上传到了192.168.4.125，上传成功后文件ID已经返回给客户端。此时FastDFS存储集群机制会将这个文件同步到同组存储192.168.4.126，在文件还没有复制完成的情况下，客户端如果用这个文件ID在192.168.4.126上取文件,就会出现文件无法访问的错误。</p>
<p>而fastdfs-nginx-module可以重定向文件连接到文件上传时的源服务器取文件,避免客户端由于复制延迟导致的文件无法访问错误</p>
<h2 id="2-2-安装fastdfs-nginx-module"><a href="#2-2-安装fastdfs-nginx-module" class="headerlink" title="2.2.安装fastdfs-nginx-module"></a>2.2.安装fastdfs-nginx-module</h2><h3 id="2-2-1-解压"><a href="#2-2-1-解压" class="headerlink" title="2.2.1.解压"></a>2.2.1.解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf fastdfs-nginx-module_v1.16.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-修改config"><a href="#2-2-2-修改config" class="headerlink" title="2.2.2.修改config"></a>2.2.2.修改config</h3><p>1）进入src目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd fastdfs-nginx-module/src/</span><br></pre></td></tr></table></figure>



<p>2）编辑config</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim config</span><br></pre></td></tr></table></figure>



<p>使用以下底行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s+/usr/local/+/usr/+g</span><br></pre></td></tr></table></figure>

<p>将所有的/usr/local替换为 /usr，这个才是正确的目录:</p>
<p><img src="/images/fdfs/1528192579209.png" alt="1528192579209"></p>
<h3 id="2-2-3-配置nginx与FastDFS关联配置文件"><a href="#2-2-3-配置nginx与FastDFS关联配置文件" class="headerlink" title="2.2.3.配置nginx与FastDFS关联配置文件"></a>2.2.3.配置nginx与FastDFS关联配置文件</h3><p>复制 fastdfs-nginx-module 源码中的配置文件到/etc/fdfs 目录， 并修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/leyou/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</span><br><span class="line"></span><br><span class="line">vi /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure>

<p>修改以下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">connect_timeout=10                       # 客户端访问文件连接超时时长（单位：秒）</span><br><span class="line"></span><br><span class="line">tracker_server=192.168.56.101:22122    # tracker服务IP和端口</span><br><span class="line"></span><br><span class="line">url_have_group_name=true                # 访问链接前缀加上组名</span><br><span class="line"></span><br><span class="line">store_path0=/leyou/storage            # 文件存储路径</span><br></pre></td></tr></table></figure>

<p>复制 FastDFS 的部分配置文件到/etc/fdfs 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/leyou/FastDFS/conf/</span><br><span class="line">cp http.conf mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure>

<h2 id="2-3-安装Nginx的插件"><a href="#2-3-安装Nginx的插件" class="headerlink" title="2.3.安装Nginx的插件"></a>2.3.安装Nginx的插件</h2><h3 id="2-3-1-如果没有安装过nginx"><a href="#2-3-1-如果没有安装过nginx" class="headerlink" title="2.3.1.如果没有安装过nginx"></a>2.3.1.如果没有安装过nginx</h3><ul>
<li>安装nginx的依赖库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>



<ul>
<li>解压安装包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.10.0.tar.gz</span><br></pre></td></tr></table></figure>



<ul>
<li>配置nginx安装包，并指定fastdfs-nginx-model</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx-1.10.0</span><br><span class="line"></span><br><span class="line">./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx --add-module=/usr/local/leyou/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：在执行./configure配置nginx参数的时候，需要将fastdfs-nginx-moudle源码作为模块编译进去。</p>
<ul>
<li>编译并安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-如果已经安装过nginx"><a href="#2-3-2-如果已经安装过nginx" class="headerlink" title="2.3.2.如果已经安装过nginx"></a>2.3.2.如果已经安装过nginx</h3><p>1） 进入nginx目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/leyou/nginx-1.10.0/</span><br></pre></td></tr></table></figure>



<p>2） 配置FastDFS 模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx --add-module=/usr/local/leyou/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure>

<p>注意：这次配置时，要添加fastdfs-nginx-moudle模块</p>
<p>3） 编译，注意，这次不要安装（install）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>



<p>4） 替换nginx二进制文件:</p>
<p>备份：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /usr/bin/nginx /usr/bin/nginx-bak</span><br></pre></td></tr></table></figure>

<p>用新编译的nginx启动文件替代原来的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp objs/nginx /usr/bin/</span><br></pre></td></tr></table></figure>





<h3 id="2-3-3-启动nginx"><a href="#2-3-3-启动nginx" class="headerlink" title="2.3.3.启动nginx"></a>2.3.3.启动nginx</h3><p>配置nginx整合fastdfs-module模块</p>
<p>我们需要修改nginx配置文件，在/opt/nginx/config/nginx.conf文件中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim  /opt/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<p>将文件中，原来的<code>server 80{ ...}</code> 部分代码替换为如下代码：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  image.leyou.com;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 监听域名中带有group的，交给FastDFS模块处理</span></span><br><span class="line">    <span class="attribute">location</span> ~/group([<span class="number">0</span>-<span class="number">9</span>])/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动nginx：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx	# 启动nginx</span><br><span class="line"></span><br><span class="line">nginx -s stop	# 停止nginx</span><br><span class="line"></span><br><span class="line">nginx -s reload	# 重新载入配置文件</span><br></pre></td></tr></table></figure>

<p># 可通过ps -ef | grep nginx查看nginx是否已启动成功    </p>
<p><img src="/images/fdfs/1528194235317.png" alt="1528194235317"></p>
<h3 id="2-3-4-设置nginx开机启动"><a href="#2-3-4-设置nginx开机启动" class="headerlink" title="2.3.4.设置nginx开机启动"></a>2.3.4.设置nginx开机启动</h3><p>创建一个开机启动的脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/init.d/nginx</span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   - 85 15</span></span><br><span class="line"><span class="comment"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"><span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># config:      /etc/sysconfig/nginx</span></span><br><span class="line"><span class="comment"># pidfile:     /var/run/nginx.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">nginx=<span class="string">"/usr/bin/nginx"</span></span><br><span class="line">prog=$(basename <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=<span class="string">"/opt/nginx/conf/nginx.conf"</span></span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line">   <span class="comment"># make required directories</span></span><br><span class="line">   user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">"configure arguments:.*--user="</span> | sed <span class="string">'s/[^*]*--user=\([^ ]*\).*/\1/g'</span> -`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$user</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [ -z <span class="string">"`grep <span class="variable">$user</span> /etc/passwd`"</span> ]; <span class="keyword">then</span></span><br><span class="line">         useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">'configure arguments:'</span>`</span><br><span class="line">      <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">'.*-temp-path'</span>` ]; <span class="keyword">then</span></span><br><span class="line">              value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | cut -d <span class="string">"="</span> -f 2`</span><br><span class="line">              <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$value</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                  <span class="comment"># echo "creating" $value</span></span><br><span class="line">                  mkdir -p <span class="variable">$value</span> &amp;&amp; chown -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">    [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">    make_dirs</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>修改文件权限，并加入服务列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改权限</span></span><br><span class="line">chmod 777 /etc/init.d/nginx </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加到服务列表</span></span><br><span class="line">chkconfig --add /etc/init.d/nginx</span><br></pre></td></tr></table></figure>

<p>设置开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig nginx on</span><br></pre></td></tr></table></figure>


    <div id="aplayer-nuAWAuWV" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="490595927" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题（3）</title>
    <url>/2019/12/09/leetcodeDay3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Jony-J"><a href="#Jony-J" class="headerlink" title="Jony J"></a>Jony J</h2><p>超喜欢他的Myman，一起来听一下吧！！</p>
<a id="more"></a>
<h2 id="移除元素（简单）"><a href="#移除元素（简单）" class="headerlink" title="移除元素（简单）"></a>移除元素（简单）</h2><p><img src="/images/leetcode/1575857504(1).jpg" alt="示例图"></p>
<p>双指针法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; nums.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] != val)&#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                  i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现strStr-简单"><a href="#实现strStr-简单" class="headerlink" title="实现strStr() (简单)"></a>实现strStr() (简单)</h2><p><img src="/images/leetcode/1575861303(1).jpg" alt="示例图"></p>
<p>自己写的（KMP算法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(needle.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(needle.length() &gt; haystack.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] next1 = next(needle);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;i &lt; haystack.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j))&#123;</span><br><span class="line">                j = next1[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(haystack.charAt(i) == needle.charAt(j))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == needle.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] next(String dest)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[dest.length()];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> , j = <span class="number">0</span>;i &lt; dest.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; dest.charAt(i) != dest.charAt(j))&#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dest.charAt(i) == dest.charAt(j))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/leetcode/1575861580(1).jpg" alt="示例图"></p>
<p>看看人家写的，你说气不气！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> haystack.indexOf(needle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/leetcode/1575861421(1).jpg" alt="示例图"> </p>
<h2 id="搜索插入位置（简单）"><a href="#搜索插入位置（简单）" class="headerlink" title="搜索插入位置（简单）"></a>搜索插入位置（简单）</h2><p><img src="/images/leetcode/1575864697(1).jpg" alt="示例图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt;= target)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="爬楼梯（简单）"><a href="#爬楼梯（简单）" class="headerlink" title="爬楼梯（简单）"></a>爬楼梯（简单）</h2><p><img src="/images/leetcode/1575865741(1).jpg" alt="示例图"></p>
<p>观察得出这是一个斐波那契数列，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> second = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> third = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = third;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="只出现一次的数字（简单）"><a href="#只出现一次的数字（简单）" class="headerlink" title="只出现一次的数字（简单）"></a>只出现一次的数字（简单）</h2><p><img src="/images/leetcode/1575866347(1).jpg" alt="示例图"></p>
<p>异或<br>一个数和0做XOR运算等于本身：a⊕0 = a<br>一个数和其本身做 XOR 运算等于0：a⊕a = 0<br>XOR运算满足交换律和结合律：a⊕b⊕a = (a⊕a)⊕b = 0⊕b = b</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            a ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-SDkwDfhy" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1325896303" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题（2）</title>
    <url>/2019/12/08/leetcodeDay2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="平凡的一天"><a href="#平凡的一天" class="headerlink" title="平凡的一天"></a>平凡的一天</h2><p>Ordinary Day -。-</p>
<a id="more"></a>
<h2 id="有效的括号（简单）"><a href="#有效的括号（简单）" class="headerlink" title="有效的括号（简单）"></a>有效的括号（简单）</h2><p><img src="/images/leetcode/1575799941(1).jpg" alt="示例图"></p>
<p>思路：<br>这个简单，用一个栈来保存(，[,{<br>当遍历到这三个字符的时候，就将其保存到栈中。<br>如果遍历到的是)就从栈中弹出一个元素，检查是否能跟)配对<br>如果遍历到的是]就从栈中弹出一个元素，检查是否能跟]配对<br>如果遍历到的是}就从栈中弹出一个元素，检查是否能跟}配对<br>怎么配对呢？<br>这里用一个map来存储，key和value分别如下：<br>) ：(<br>] ：[<br>} ：{<br>如果遍历到的是)，就可以从map中找到对应的value是(，再跟栈中弹出的元素对比就可以了。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s==<span class="keyword">null</span> || <span class="string">""</span>.equals(s)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//用栈保存 (，[，&#123;</span></span><br><span class="line">		Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">		<span class="comment">//map中保存的是 ):(, ]:[,&#125;:&#123;</span></span><br><span class="line">		<span class="comment">//当遍历到 )时候就会去map中找对应的value，也就是(</span></span><br><span class="line">		<span class="comment">//再用这个value和stack弹出的元素比较，如果相等则匹配上，不等则返回false</span></span><br><span class="line">		<span class="comment">//这里也可以用数组来存，我为了简单就用map表示了</span></span><br><span class="line">		HashMap&lt;Character,Character&gt; map = <span class="keyword">new</span> HashMap&lt;Character,Character&gt;();</span><br><span class="line">		map.put(<span class="string">')'</span>,<span class="string">'('</span>);</span><br><span class="line">		map.put(<span class="string">']'</span>,<span class="string">'['</span>);</span><br><span class="line">		map.put(<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">			<span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">			<span class="comment">//如果map中不包含 (,[,&#123;，就将这个字符放入栈中</span></span><br><span class="line">			<span class="keyword">if</span>(!map.containsKey(c)) &#123;</span><br><span class="line">				stack.add(c);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//如果遍历的字符不再map中，也就是说这个字符是),],&#125;，那么就要跟栈中的元素比较</span></span><br><span class="line">				<span class="comment">//首先要判断栈是否为空，如果输入的字符是 )() ，那么当遍历到第一个)时，栈为空</span></span><br><span class="line">				<span class="keyword">if</span>(stack.size()==<span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//取出栈顶的元素</span></span><br><span class="line">				Character tmp = stack.pop();</span><br><span class="line">				<span class="comment">//假设当前遍历到的元素是 ]，那么从map中取到的value就是 [</span></span><br><span class="line">				<span class="comment">//如果栈顶的元素是 (，则不匹配返回false，否则继续</span></span><br><span class="line">				<span class="keyword">if</span>(map.get(c)!=tmp) &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//返回的时候还要判断栈是否为空</span></span><br><span class="line">		<span class="comment">//如果输入的字符串是 (((，那么最后栈就不为空</span></span><br><span class="line">		<span class="keyword">return</span> (stack.empty()? <span class="keyword">true</span> : <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合并两个有序链表（简单）"><a href="#合并两个有序链表（简单）" class="headerlink" title="合并两个有序链表（简单）"></a>合并两个有序链表（简单）</h2><p><img src="/images/leetcode/1575801075(1).jpg" alt="示例图"><br>采用递归的方式<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合并两个有序数组（简单）"><a href="#合并两个有序数组（简单）" class="headerlink" title="合并两个有序数组（简单）"></a>合并两个有序数组（简单）</h2><p><img src="/images/leetcode/1575801815(1).jpg" alt="示例图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    System.arraycopy(nums2, <span class="number">0</span>, nums1, m, n);</span><br><span class="line">    Arrays.sort(nums1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除排序数组中的重复项（简单）"><a href="#删除排序数组中的重复项（简单）" class="headerlink" title="删除排序数组中的重复项（简单）"></a>删除排序数组中的重复项（简单）</h2><p><img src="/images/leetcode/1575802565(1).jpg" alt="示例图"></p>
<p>思路：数组完成排序后，我们可以放置两个指针i和j，其中i是慢指针，而j是快指针。只要 nums[i] = nums[j]，我们就增加j以跳过重复项。<br>当不等于时，跳过重复项的运行已经结束，因此我们必须把它nums[j]的值复制到nums[i + 1]。然后递增i，接着我们将再次重复相同的过程，直到j 到达数组的末尾为止。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != nums[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反转字符串（简单）"><a href="#反转字符串（简单）" class="headerlink" title="反转字符串（简单）"></a>反转字符串（简单）</h2><p><img src="/images/leetcode/1575803359.jpg" alt="示例图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = s.length;</span><br><span class="line">        <span class="keyword">while</span> (++left &lt; --right) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-wUVommuT" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="239364" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>品牌管理</title>
    <url>/2019/12/07/day08-%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>独立实现品牌新增</li>
<li>实现图片上传</li>
<li>了解FastDFS的安装</li>
<li>使用FastDFS客户端实现上传</li>
</ul>
<a id="more"></a>
<h1 id="1-品牌的新增"><a href="#1-品牌的新增" class="headerlink" title="1.品牌的新增"></a>1.品牌的新增</h1><p>昨天我们完成了品牌的查询，接下来就是新增功能。点击新增品牌按钮</p>
<p><img src="/images/day07/1545222288968.png" alt="1545222288968"></p>
<p>Brand.vue页面有一个提交按钮：</p>
<p><img src="/images/day07/1545222410267.png" alt="1545222410267"></p>
<p>点击触发addBrand方法：</p>
<p><img src="/images/day07/1545222464105.png" alt="1545222464105"></p>
<p>把数据模型之的show置为true，而页面中有一个弹窗与show绑定：</p>
<p><img src="/images/day07/1545222628405.png" alt="1545222628405"></p>
<p>弹窗中有一个表单子组件，并且是一个局部子组件，有页面可以找到该组件：</p>
<p><img src="/images/day07/1545222756536.png" alt="1545222756536"></p>
<h2 id="1-1-页面实现"><a href="#1-1-页面实现" class="headerlink" title="1.1.页面实现"></a>1.1.页面实现</h2><h3 id="1-1-1-重置表单"><a href="#1-1-1-重置表单" class="headerlink" title="1.1.1.重置表单"></a>1.1.1.重置表单</h3><p>重置表单相对简单，因为v-form组件已经提供了reset方法，用来清空表单数据。只要我们拿到表单组件对象，就可以调用方法了。</p>
<p>我们可以通过<code>$refs</code>内置对象来获取表单组件。</p>
<p>首先，在表单上定义<code>ref</code>属性：</p>
<p><img src="/images/day07/1530674011487.png" alt="1530674011487"></p>
<p>然后，在页面查看<code>this.$refs</code>属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">reset()&#123;</span><br><span class="line">  <span class="comment">// 重置表单</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看如下：</p>
<p><img src="/images/day07/1530674402709.png" alt="1530674402709"></p>
<p>看到<code>this.$refs</code>中只有一个属性，就是<code>myBrandForm</code></p>
<p>我们在clear中来获取表单对象并调用reset方法：</p>
<p><img src="/images/day07/1545221936052.png" alt="1545221936052"></p>
<p>要注意的是，这里我们还手动把this.categories清空了，因为我写的级联选择组件并没有跟表单结合起来。需要手动清空。</p>
<h3 id="1-1-2-表单校验"><a href="#1-1-2-表单校验" class="headerlink" title="1.1.2.表单校验"></a>1.1.2.表单校验</h3><h4 id="1-1-2-1-校验规则"><a href="#1-1-2-1-校验规则" class="headerlink" title="1.1.2.1.校验规则"></a>1.1.2.1.校验规则</h4><p>Vuetify的表单校验，是通过rules属性来指定的：</p>
<p><img src="/images/day07/1530687657711.png" alt="1530687657711"></p>
<p>校验规则的写法：</p>
<p><img src="/images/day07/1530688192442.png" alt="1530688192442"></p>
<p>说明：</p>
<ul>
<li>规则是一个数组</li>
<li>数组中的元素是一个函数，该函数接收表单项的值作为参数，函数返回值两种情况：<ul>
<li>返回true，代表成功，</li>
<li>返回错误提示信息，代表失败</li>
</ul>
</li>
</ul>
<h4 id="1-1-2-2-编写校验"><a href="#1-1-2-2-编写校验" class="headerlink" title="1.1.2.2.编写校验"></a>1.1.2.2.编写校验</h4><p>我们有四个字段：</p>
<ul>
<li>name：做非空校验和长度校验，长度必须大于1</li>
<li>letter：首字母，校验长度为1，非空。</li>
<li>image：图片，不做校验，图片可以为空</li>
<li>categories：非空校验，自定义组件已经帮我们完成，不用写了</li>
</ul>
<p>首先，我们定义规则：</p>
<p><img src="/images/day07/1545221873038.png" alt="1545221873038"></p>
<p>然后，在页面标签中指定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">v-model</span>=<span class="string">"brand.name"</span> <span class="attr">label</span>=<span class="string">"请输入品牌名称"</span> <span class="attr">hint</span>=<span class="string">"例如：oppo"</span> <span class="attr">:rules</span>=<span class="string">"[rules.required, rules.nameLength]"</span>&gt;</span><span class="tag">&lt;/<span class="name">v-text-field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">v-model</span>=<span class="string">"brand.letter"</span> <span class="attr">label</span>=<span class="string">"请输入品牌首字母"</span> <span class="attr">hint</span>=<span class="string">"例如：O"</span> <span class="attr">:rules</span>=<span class="string">"[rules.letter]"</span>&gt;</span><span class="tag">&lt;/<span class="name">v-text-field</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p> <img src="/images/day07/1530690428352.png" alt="1530690428352"></p>
<h3 id="1-1-3-表单提交"><a href="#1-1-3-表单提交" class="headerlink" title="1.1.3.表单提交"></a>1.1.3.表单提交</h3><p>在submit方法中添加表单提交的逻辑：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">submit() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$qs);</span><br><span class="line">    <span class="comment">// 表单校验</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$refs.myBrandForm.validate()) &#123;</span><br><span class="line">        <span class="comment">// 定义一个请求参数对象，通过解构表达式来获取brand中的属性&#123;categories letter name image&#125;</span></span><br><span class="line">        <span class="keyword">const</span> &#123;categories, letter, ...params&#125; = <span class="keyword">this</span>.brand; <span class="comment">// params:&#123;name, image, cids, letter&#125;</span></span><br><span class="line">        <span class="comment">// 数据库中只要保存分类的id即可，因此我们对categories的值进行处理,只保留id，并转为字符串</span></span><br><span class="line">        params.cids = categories.map(<span class="function"><span class="params">c</span> =&gt;</span> c.id).join(<span class="string">","</span>);</span><br><span class="line">        <span class="comment">// 将字母都处理为大写</span></span><br><span class="line">        params.letter = letter.toUpperCase();</span><br><span class="line">        <span class="comment">// 将数据提交到后台</span></span><br><span class="line">        <span class="comment">// this.$http.post('/item/brand', this.$qs.stringify(params))</span></span><br><span class="line">        <span class="keyword">this</span>.$http(&#123;</span><br><span class="line">            method: <span class="keyword">this</span>.isEdit ? <span class="string">'put'</span> : <span class="string">'post'</span>,</span><br><span class="line">            url: <span class="string">'/item/brand'</span>,</span><br><span class="line">            data: params</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭窗口</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"close"</span>);</span><br><span class="line">            <span class="keyword">this</span>.$message.success(<span class="string">"保存成功！"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$message.error(<span class="string">"保存失败！"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>通过<code>this.$refs.myBrandForm</code>选中表单，然后调用表单的<code>validate</code>方法，进行表单校验。返回boolean值，true代表校验通过</p>
</li>
<li><p>通过解构表达式来获取brand中的值，categories需要处理，单独获取。其它的存入params对象中</p>
</li>
<li><p>品牌和商品分类的中间表只保存两者的id，而brand.categories中保存的是对象数组，里面有id和name属性，因此这里通过数组的map功能转为id数组，然后通过join方法拼接为字符串</p>
</li>
<li><p>发起请求</p>
</li>
<li><p>弹窗提示成功还是失败，这里用到的是我们的自定义组件功能message组件：</p>
<p><img src="/images/day07/1526140298249.png" alt="1526140298249"></p>
<p>这个插件把<code>$message</code>对象绑定到了Vue的原型上，因此我们可以通过<code>this.$message</code>来直接调用。</p>
<p>包含以下常用方法：</p>
</li>
</ol>
<ul>
<li>info、error、success、warning等，弹出一个带有提示信息的窗口，色调与为普通（灰）、错误（红色）、成功（绿色）和警告（黄色）。使用方法：this.$message.info(“msg”)</li>
<li>confirm：确认框。用法：<code>this.$message.confirm(&quot;确认框的提示信息&quot;)</code>，返回一个Promise。</li>
</ul>
<h2 id="1-2-后台实现新增"><a href="#1-2-后台实现新增" class="headerlink" title="1.2.后台实现新增"></a>1.2.后台实现新增</h2><h3 id="1-2-1-controller"><a href="#1-2-1-controller" class="headerlink" title="1.2.1.controller"></a>1.2.1.controller</h3><p>还是一样，先分析四个内容：</p>
<ul>
<li>请求方式：POST</li>
<li>请求路径：/brand</li>
<li>请求参数：brand对象，外加商品分类的id数组cids</li>
<li>返回值：无，只需要响应状态码</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveBrand</span><span class="params">(Brand brand, @RequestParam(<span class="string">"cids"</span>)</span> List&lt;Long&gt; cids)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.brandService.saveBrand(brand, cids);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-Service"><a href="#1-2-2-Service" class="headerlink" title="1.2.2.Service"></a>1.2.2.Service</h3><p>这里要注意，我们不仅要新增品牌，还要维护品牌和商品分类的中间表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增品牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBrand</span><span class="params">(Brand brand, List&lt;Long&gt; cids)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先新增brand</span></span><br><span class="line">    <span class="keyword">this</span>.brandMapper.insertSelective(brand);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在新增中间表</span></span><br><span class="line">    cids.forEach(cid -&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.brandMapper.insertCategoryAndBrand(cid, brand.getId());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了brandMapper中的一个自定义方法，来实现中间表的数据新增</p>
<h3 id="1-2-3-Mapper"><a href="#1-2-3-Mapper" class="headerlink" title="1.2.3.Mapper"></a>1.2.3.Mapper</h3><p>通用Mapper只能处理单表，也就是Brand的数据，因此我们手动编写一个方法及sql，实现中间表的新增：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增商品分类和品牌中间表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 商品分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid 品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO tb_category_brand(category_id, brand_id) VALUES (#&#123;cid&#125;,#&#123;bid&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertBrandAndCategory</span><span class="params">(@Param(<span class="string">"cid"</span>)</span> Long cid, @<span class="title">Param</span><span class="params">(<span class="string">"bid"</span>)</span> Long bid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-4-测试"><a href="#1-2-4-测试" class="headerlink" title="1.2.4.测试"></a>1.2.4.测试</h3><p><img src="/images/day07/1532827997361.png" alt="1532827997361"></p>
<p>400：请求参数不合法</p>
<h2 id="1-3-解决400"><a href="#1-3-解决400" class="headerlink" title="1.3.解决400"></a>1.3.解决400</h2><h3 id="1-3-1-原因分析"><a href="#1-3-1-原因分析" class="headerlink" title="1.3.1.原因分析"></a>1.3.1.原因分析</h3><p>我们填写表单并提交，发现报错了。查看控制台的请求详情：</p>
<p><img src="/images/day07/1530696121642.png" alt="1530696121642"></p>
<p>发现请求的数据格式是JSON格式。</p>
<blockquote>
<p>原因分析：</p>
</blockquote>
<p>axios处理请求体的原则会根据请求数据的格式来定：</p>
<ul>
<li><p>如果请求体是对象：会转为json发送</p>
</li>
<li><p>如果请求体是String：会作为普通表单请求发送，但需要我们自己保证String的格式是键值对。</p>
<p>如：name=jack&amp;age=12</p>
</li>
</ul>
<h3 id="1-3-2-QS工具"><a href="#1-3-2-QS工具" class="headerlink" title="1.3.2.QS工具"></a>1.3.2.QS工具</h3><p>QS是一个第三方库，我们可以用<code>npm install qs --save</code>来安装。不过我们在项目中已经集成了，大家无需安装：</p>
<p><img src="/images/day07/1530696509189.png" alt="1530696509189"></p>
<p>这个工具的名字：QS，即Query String，请求参数字符串。</p>
<p>什么是请求参数字符串？例如： name=jack&amp;age=21</p>
<p>QS工具可以便捷的实现 JS的Object与QueryString的转换。</p>
<p>在我们的项目中，将QS注入到了Vue的原型对象中，我们可以通过<code>this.$qs</code>来获取这个工具：</p>
<p><img src="/images/day07/1539821449329.png" alt="1539821449329"></p>
<p>我们将<code>this.$qs</code>对象打印到控制台：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$qs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现其中有3个方法：</p>
<p><img src="/images/day07/1532850873556.png" alt="1532850873556"></p>
<p>这里我们要使用的方法是stringify，它可以把Object转为QueryString。</p>
<p>测试一下，使用浏览器工具，把qs对象保存为一个临时变量temp1，然后调用stringify方法：</p>
<p><img src="/images/day07/qs-2.gif" alt="1526182230872"></p>
<p>成功将person对象变成了 name=zhangsan&amp;age=30的字符串了</p>
<h3 id="1-3-3-解决问题"><a href="#1-3-3-解决问题" class="headerlink" title="1.3.3.解决问题"></a>1.3.3.解决问题</h3><p>修改页面，对参数处理后发送：</p>
<p><img src="/images/day07/1545223244002.png" alt="1545223244002"></p>
<p>然后再次发起请求，发现请求成功：</p>
<p><img src="/images/day07/1530698685973.png" alt="1530698685973"></p>
<h2 id="1-4-新增完成后关闭窗口"><a href="#1-4-新增完成后关闭窗口" class="headerlink" title="1.4.新增完成后关闭窗口"></a>1.4.新增完成后关闭窗口</h2><p>我们发现有一个问题：新增不管成功还是失败，窗口都一致在这里，不会关闭。</p>
<p>这样很不友好，我们希望如果新增失败，窗口保持；但是新增成功，窗口关闭才对。</p>
<p>因此，我们需要<strong>在新增的ajax请求完成以后，关闭窗口</strong></p>
<p>但问题在于，控制窗口是否显示的标记在父组件：MyBrand.vue中。子组件如何才能操作父组件的属性？或者告诉父组件该关闭窗口了？</p>
<p>之前我们讲过一个父子组件的通信，有印象吗？</p>
<ul>
<li>第一步：在父组件中定义一个函数，用来关闭窗口，不过之前已经定义过了。父组件在使用子组件时，绑定事件，关联到这个函数：Brand.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对话框的内容，表单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-card-text</span> <span class="attr">class</span>=<span class="string">"px-5"</span> <span class="attr">style</span>=<span class="string">"height:400px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">brand-form</span> @<span class="attr">close</span>=<span class="string">"closeWindow"</span> <span class="attr">:oldBrand</span>=<span class="string">"oldBrand"</span> <span class="attr">:isEdit</span>=<span class="string">"isEdit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-card-text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第二步，子组件通过<code>this.$emit</code>调用父组件的函数：BrandForm.vue</li>
</ul>
<p><img src="/images/day07/1545223341933.png" alt="1545223341933"></p>
<p>测试一下，保存成功：</p>
<p><img src="/images/day07/1530713222558.png" alt="1530713222558"></p>
<p>我们优化一下，关闭的同时重新加载数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">closeWindow()&#123;</span><br><span class="line">    <span class="comment">// 关闭窗口</span></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 重新加载数据</span></span><br><span class="line">    <span class="keyword">this</span>.getDataFromServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-实现图片上传"><a href="#2-实现图片上传" class="headerlink" title="2.实现图片上传"></a>2.实现图片上传</h1><p>刚才的新增实现中，我们并没有上传图片，接下来我们一起完成图片上传逻辑。</p>
<p>文件的上传并不只是在品牌管理中有需求，以后的其它服务也可能需要，因此我们创建一个独立的微服务，专门处理各种上传。</p>
<h2 id="2-1-搭建项目"><a href="#2-1-搭建项目" class="headerlink" title="2.1.搭建项目"></a>2.1.搭建项目</h2><h3 id="2-1-1-创建module"><a href="#2-1-1-创建module" class="headerlink" title="2.1.1.创建module"></a>2.1.1.创建module</h3><p><img src="/images/day07/1530715294772.png" alt="1530715294772"></p>
<p><img src="/images/day07/1530715390747.png" alt="1530715390747"></p>
<p><img src="/images/day07/1530715447962.png" alt="1530715447962"></p>
<p><img src="/images/day07/1530715487863.png" alt="1530715487863"></p>
<h3 id="2-1-2-依赖"><a href="#2-1-2-依赖" class="headerlink" title="2.1.2.依赖"></a>2.1.2.依赖</h3><p>我们需要EurekaClient和web依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.upload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-3-编写配置"><a href="#2-1-3-编写配置" class="headerlink" title="2.1.3.编写配置"></a>2.1.3.编写配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">upload-service</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5MB</span> <span class="comment"># 限制文件上传的大小</span></span><br><span class="line"><span class="comment"># Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，我们应该添加了限制文件大小的配置</p>
<h3 id="2-1-4-引导类"><a href="#2-1-4-引导类" class="headerlink" title="2.1.4.引导类"></a>2.1.4.引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouUploadApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LeyouUploadApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构：</p>
<p> <img src="/images/day07/1530717442747.png" alt="1530717442747"></p>
<h2 id="2-2-编写上传功能"><a href="#2-2-编写上传功能" class="headerlink" title="2.2.编写上传功能"></a>2.2.编写上传功能</h2><p>文件上传功能，也是自定义组件完成的，参照自定义组件用法指南：</p>
<p><img src="/images/day07/1545223629762.png" alt="1545223629762"></p>
<p>在页面中的使用：</p>
<p><img src="/images/day07/1545223731347.png" alt="1545223731347"></p>
<h3 id="2-2-1-controller"><a href="#2-2-1-controller" class="headerlink" title="2.2.1.controller"></a>2.2.1.controller</h3><p>编写controller需要知道4个内容：结合用法指南</p>
<ul>
<li>请求方式：上传肯定是POST</li>
<li>请求路径：/upload/image</li>
<li>请求参数：文件，参数名是file，SpringMVC会封装为一个接口：MultipartFile</li>
<li>返回结果：上传成功后得到的文件的url路径，也就是返回String</li>
</ul>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"image"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadImage</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line">        String url = <span class="keyword">this</span>.uploadService.upload(file);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(url)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-service"><a href="#2-2-2-service" class="headerlink" title="2.2.2.service"></a>2.2.2.service</h3><p>在上传文件过程中，我们需要对上传的内容进行校验：</p>
<ol>
<li>校验文件大小</li>
<li>校验文件的媒体类型</li>
<li>校验文件的内容</li>
</ol>
<p>文件大小在Spring的配置文件中设置，因此已经会被校验，我们不用管。</p>
<p>具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; CONTENT_TYPES = Arrays.asList(<span class="string">"image/jpeg"</span>, <span class="string">"image/gif"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UploadService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 校验文件的类型</span></span><br><span class="line">        String contentType = file.getContentType();</span><br><span class="line">        <span class="keyword">if</span> (!CONTENT_TYPES.contains(contentType))&#123;</span><br><span class="line">            <span class="comment">// 文件类型不合法，直接返回null</span></span><br><span class="line">            LOGGER.info(<span class="string">"文件类型不合法：&#123;&#125;"</span>, originalFilename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 校验文件的内容</span></span><br><span class="line">            BufferedImage bufferedImage = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (bufferedImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">                LOGGER.info(<span class="string">"文件内容不合法：&#123;&#125;"</span>, originalFilename);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存到服务器</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> File(<span class="string">"C:\\leyou\\images\\"</span> + originalFilename));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成url地址，返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"http://image.leyou.com/"</span> + originalFilename;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"服务器内部错误：&#123;&#125;"</span>, originalFilename);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有一个问题：为什么图片地址需要使用另外的url？</p>
<ul>
<li>图片不能保存在服务器内部，这样会对服务器产生额外的加载负担</li>
<li>一般静态资源都应该使用独立域名，这样访问静态资源时不会携带一些不必要的cookie，减小请求的数据量</li>
</ul>
<h3 id="2-2-3-测试上传"><a href="#2-2-3-测试上传" class="headerlink" title="2.2.3.测试上传"></a>2.2.3.测试上传</h3><p>我们通过RestClient工具来测试：</p>
<p><img src="/images/day07/1530720235186.png" alt="1530720235186"></p>
<p>结果：</p>
<p><img src="/images/day07/1530720263937.png" alt="1530720263937"></p>
<p>去目录下查看：</p>
<p><img src="/images/day07/1530720298725.png" alt="1530720298725"></p>
<p>上传成功！</p>
<h2 id="2-3-绕过网关"><a href="#2-3-绕过网关" class="headerlink" title="2.3.绕过网关"></a>2.3.绕过网关</h2><p>图片上传是文件的传输，如果也经过Zuul网关的代理，文件就会经过多次网路传输，造成不必要的网络负担。在高并发时，可能导致网络阻塞，Zuul网关不可用。这样我们的整个系统就瘫痪了。</p>
<p>所以，我们上传文件的请求就不经过网关来处理了。</p>
<h3 id="2-3-1-Zuul的路由过滤"><a href="#2-3-1-Zuul的路由过滤" class="headerlink" title="2.3.1.Zuul的路由过滤"></a>2.3.1.Zuul的路由过滤</h3><p>Zuul中提供了一个ignored-patterns属性，用来忽略不希望路由的URL路径，示例：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">zuul.ignored-patterns</span>: <span class="string">/upload/**</span></span><br></pre></td></tr></table></figure>

<p>路径过滤会对一切微服务进行判定。</p>
<p>Zuul还提供了<code>ignored-services</code>属性，进行服务过滤：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">zuul.ignored-services</span>: <span class="string">upload-servie</span></span><br></pre></td></tr></table></figure>

<p>我们这里采用忽略服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">upload-service</span> <span class="comment"># 忽略upload-service服务</span></span><br></pre></td></tr></table></figure>

<p>上面的配置采用了集合语法，代表可以配置多个。</p>
<h3 id="2-3-2-Nginx的rewrite指令"><a href="#2-3-2-Nginx的rewrite指令" class="headerlink" title="2.3.2.Nginx的rewrite指令"></a>2.3.2.Nginx的rewrite指令</h3><p>现在，我们修改页面的访问路径：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"brand.image"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">url</span>=<span class="string">"/upload/image"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:multiple</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:pic-width</span>=<span class="string">"250"</span> <span class="attr">:pic-height</span>=<span class="string">"90"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看页面的请求路径：</p>
<p><img src="/images/day07/1530722029884.png" alt="1530722029884"></p>
<p>可以看到这个地址不对，依然是去找Zuul网关，因为我们的系统全局配置了URL地址。怎么办？</p>
<p>有同学会想：修改页面请求地址不就好了。</p>
<p>注意：原则上，我们是不能把除了网关以外的服务对外暴露的，不安全。</p>
<p>既然不能修改页面请求，那么就只能在Nginx反向代理上做文章了。</p>
<p>我们修改nginx配置，将以/api/upload开头的请求拦截下来，转交到真实的服务地址:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /api/upload &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样写大家觉得对不对呢？</p>
<p>显然是不对的，因为ip和端口虽然对了，但是路径没变，依然是：<a href="http://127.0.0.1:8002/api/upload/image" target="_blank" rel="noopener">http://127.0.0.1:8002/api/upload/image</a></p>
<p>前面多了一个/api</p>
<p>Nginx提供了rewrite指令，用于对地址进行重写，语法规则：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rewrite</span> <span class="string">"用来匹配路径的正则"</span> 重写后的路径 [指令];</span><br></pre></td></tr></table></figure>

<p>我们的案例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">   	<span class="comment"># 上传路径的映射</span></span><br><span class="line">	<span class="attribute">location</span> /api/upload &#123;	</span><br><span class="line">		<span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line">		<span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">		<span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">rewrite</span> <span class="string">"^/api/(.*)$"</span> /<span class="variable">$1</span> <span class="literal">break</span>; </span><br><span class="line">       &#125;</span><br><span class="line">	</span><br><span class="line">       <span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">proxy_pass</span> http://127.0.0.1:10010;</span><br><span class="line">		<span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">		<span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>首先，我们映射路径是/api/upload，而下面一个映射路径是 / ，根据最长路径匹配原则，/api/upload优先级更高。也就是说，凡是以/api/upload开头的路径，都会被第一个配置处理</p>
</li>
<li><p><code>proxy_pass</code>：反向代理，这次我们代理到8082端口，也就是upload-service服务</p>
</li>
<li><p><code>rewrite &quot;^/api/(.*)$&quot; /$1 break</code>，路径重写：</p>
<ul>
<li><p><code>&quot;^/api/(.*)$&quot;</code>：匹配路径的正则表达式，用了分组语法，把<code>/api/</code>以后的所有部分当做1组</p>
</li>
<li><p><code>/$1</code>：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始），即<code>/api/</code>后面的所有。这样新的路径就是除去<code>/api/</code>以外的所有，就达到了去除<code>/api</code>前缀的目的</p>
</li>
<li><p><code>break</code>：指令，常用的有2个，分别是：last、break</p>
<ul>
<li>last：重写路径结束后，将得到的路径重新进行一次路径匹配</li>
<li>break：重写路径结束后，不再重新匹配路径。</li>
</ul>
<p>我们这里不能选择last，否则以新的路径/upload/image来匹配，就不会被正确的匹配到8082端口了</p>
</li>
</ul>
</li>
</ul>
<p>修改完成，输入<code>nginx -s reload</code>命令重新加载配置。然后再次上传试试。</p>
<h2 id="2-4-跨域问题"><a href="#2-4-跨域问题" class="headerlink" title="2.4.跨域问题"></a>2.4.跨域问题</h2><p>重启nginx，再次上传，发现跟上次的状态码已经不一样了，但是依然报错：</p>
<p><img src="/images/day07/1530722280952.png" alt="1526200471676"></p>
<p>不过庆幸的是，这个错误已经不是第一次见了，跨域问题。</p>
<p>我们在upload-service中添加一个CorsFilter即可：</p>
<p> <img src="/images/day07/1530722617437.png" alt="1530722617437"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouCorsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://manage.leyou.com"</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次测试：</p>
<p><img src="/images/day07/1530722674897.png" alt="1530722674897"></p>
<p>不过，非常遗憾的是，访问图片地址，却没有响应。</p>
<p><img src="/images/day07/1530722728379.png" alt="1530722728379"></p>
<p>这是因为我们并没有任何服务器对应image.leyou.com这个域名。。</p>
<p>这个问题，我们暂时放下，回头再来解决。</p>
<h2 id="2-5-文件上传的缺陷"><a href="#2-5-文件上传的缺陷" class="headerlink" title="2.5.文件上传的缺陷"></a>2.5.文件上传的缺陷</h2><p>先思考一下，现在上传的功能，有没有什么问题？</p>
<p>上传本身没有任何问题，问题出在保存文件的方式，我们是保存在服务器机器，就会有下面的问题：</p>
<ul>
<li>单机器存储，存储能力有限</li>
<li>无法进行水平扩展，因为多台机器的文件无法共享,会出现访问不到的情况</li>
<li>数据没有备份，有单点故障风险</li>
<li>并发能力差</li>
</ul>
<p>这个时候，最好使用分布式文件存储来代替本地文件存储。</p>
<h1 id="3-FastDFS"><a href="#3-FastDFS" class="headerlink" title="3.FastDFS"></a>3.FastDFS</h1><h2 id="3-1-什么是分布式文件系统"><a href="#3-1-什么是分布式文件系统" class="headerlink" title="3.1.什么是分布式文件系统"></a>3.1.什么是分布式文件系统</h2><p>分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 </p>
<p>通俗来讲：</p>
<ul>
<li>传统文件系统管理的文件就存储在本机。</li>
<li>分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问</li>
</ul>
<h2 id="3-2-什么是FastDFS"><a href="#3-2-什么是FastDFS" class="headerlink" title="3.2.什么是FastDFS"></a>3.2.什么是FastDFS</h2><p>FastDFS是由淘宝的余庆先生所开发的一个轻量级、高性能的开源分布式文件系统。用纯C语言开发，功能丰富：</p>
<ul>
<li>文件存储</li>
<li>文件同步</li>
<li>文件访问（上传、下载）</li>
<li>存取负载均衡</li>
<li>在线扩容</li>
</ul>
<p>适合有大容量存储需求的应用或系统。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。</p>
<h2 id="3-3-FastDFS的架构"><a href="#3-3-FastDFS的架构" class="headerlink" title="3.3.FastDFS的架构"></a>3.3.FastDFS的架构</h2><h3 id="3-3-1-架构图"><a href="#3-3-1-架构图" class="headerlink" title="3.3.1.架构图"></a>3.3.1.架构图</h3><p>先上图：</p>
<p> <img src="/images/day07/1526205318630.png" alt="1526205318630"></p>
<p>FastDFS两个主要的角色：Tracker Server 和 Storage Server 。</p>
<ul>
<li>Tracker Server：跟踪服务器，主要负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽。 </li>
<li>Storage Server：存储服务器，保存文件和文件的meta data（元数据），每个storage server会启动一个单独的线程主动向Tracker cluster中每个tracker server报告其状态信息，包括磁盘使用情况，文件同步情况及文件上传下载次数统计等信息</li>
<li>Group：文件组，多台Storage Server的集群。上传一个文件到同组内的一台机器上后，FastDFS会将该文件即时同步到同组内的其它所有机器上，起到备份的作用。不同组的服务器，保存的数据不同，而且相互独立，不进行通信。 </li>
<li>Tracker Cluster：跟踪服务器的集群，有一组Tracker Server（跟踪服务器）组成。</li>
<li>Storage Cluster ：存储集群，有多个Group组成。</li>
</ul>
<h3 id="3-3-2-上传和下载流程"><a href="#3-3-2-上传和下载流程" class="headerlink" title="3.3.2.上传和下载流程"></a>3.3.2.上传和下载流程</h3><blockquote>
<p>上传</p>
</blockquote>
<p> <img src="/images/day07/1526205664373.png" alt="1526205664373"></p>
<ol>
<li>Client通过Tracker server查找可用的Storage server。</li>
<li>Tracker server向Client返回一台可用的Storage server的IP地址和端口号。</li>
<li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并进行文件上传。</li>
<li>上传完成，Storage server返回Client一个文件ID，文件上传结束。</li>
</ol>
<blockquote>
<p>下载</p>
</blockquote>
<p> <img src="/images/day07/1526205705687.png" alt="1526205705687"></p>
<ol>
<li>Client通过Tracker server查找要下载文件所在的的Storage server。</li>
<li>Tracker server向Client返回包含指定文件的某个Storage server的IP地址和端口号。</li>
<li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并指定要下载文件。</li>
<li>下载文件成功。</li>
</ol>
<h2 id="3-4-安装和使用"><a href="#3-4-安装和使用" class="headerlink" title="3.4.安装和使用"></a>3.4.安装和使用</h2><p>参考课前资料的：</p>
<p><img src="/images/day07/1528196441781.png" alt="1528196441781"></p>
<h2 id="3-5-java客户端"><a href="#3-5-java客户端" class="headerlink" title="3.5.java客户端"></a>3.5.java客户端</h2><p>余庆先生提供了一个Java客户端，但是作为一个C程序员，写的java代码可想而知。而且已经很久不维护了。</p>
<p>这里推荐一个开源的FastDFS客户端，支持最新的SpringBoot2.0。</p>
<p>配置使用极为简单，支持连接池，支持自动生成缩略图，狂拽酷炫吊炸天啊，有木有。</p>
<p>地址：<a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">tobato/FastDFS_client</a></p>
<p> <img src="/images/day07/1526206304954.png" alt="1526206304954"></p>
<p>接下来，我们就用FastDFS改造<strong>leyou-upload</strong>工程。</p>
<h3 id="3-5-1-引入依赖"><a href="#3-5-1-引入依赖" class="headerlink" title="3.5.1.引入依赖"></a>3.5.1.引入依赖</h3><p>在父工程中，我们已经管理了依赖，版本为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fastDFS.client.version</span>&gt;</span>1.26.2<span class="tag">&lt;/<span class="name">fastDFS.client.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因此，这里我们直接在taotao-upload工程的pom.xml中引入坐标即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-2-引入配置类"><a href="#3-5-2-引入配置类" class="headerlink" title="3.5.2.引入配置类"></a>3.5.2.引入配置类</h3><p> <img src="/images/day07/1528206263148.png" alt="1528206263148"></p>
<p>纯java配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(FdfsClientConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">// 解决<span class="title">jmx</span>重复注册<span class="title">bean</span>的问题</span></span><br><span class="line"><span class="class">@<span class="title">EnableMBeanExport</span>(<span class="title">registration</span> </span>= RegistrationPolicy.IGNORE_EXISTING)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClientImporter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-3-编写FastDFS属性"><a href="#3-5-3-编写FastDFS属性" class="headerlink" title="3.5.3.编写FastDFS属性"></a>3.5.3.编写FastDFS属性</h3><p>在application.yml配置文件中追加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">1501</span> <span class="comment"># 超时时间</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">601</span> <span class="comment"># 连接超时时间</span></span><br><span class="line">  <span class="attr">thumb-image:</span> <span class="comment"># 缩略图</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">tracker-list:</span> <span class="comment"># tracker地址：你的虚拟机服务器地址+端口（默认是22122）</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span><span class="string">:22122</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-4-配置hosts"><a href="#3-5-4-配置hosts" class="headerlink" title="3.5.4.配置hosts"></a>3.5.4.配置hosts</h3><p>将来通过域名：image.leyou.com这个域名访问fastDFS服务器上的图片资源。所以，需要代理到虚拟机地址：</p>
<p>配置hosts文件，使image.leyou.com可以访问fastDFS服务器</p>
<p> <img src="/images/day07/1543400932873.png" alt="1543400932873"></p>
<h3 id="3-5-5-测试"><a href="#3-5-5-测试" class="headerlink" title="3.5.5.测试"></a>3.5.5.测试</h3><p>创建测试类：</p>
<p> <img src="/images/day07/1528207829275.png" alt="1528207829275"></p>
<p>把以下内容copy进去：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FastDFSTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThumbImageConfig thumbImageConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpload</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 要上传的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\joedy\\Pictures\\xbx1.jpg"</span>);</span><br><span class="line">        <span class="comment">// 上传并保存图片，参数：1-上传的文件流 2-文件的大小 3-文件的后缀 4-可以不管他</span></span><br><span class="line">        StorePath storePath = <span class="keyword">this</span>.storageClient.uploadFile(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(file), file.length(), <span class="string">"jpg"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getFullPath());</span><br><span class="line">        <span class="comment">// 不带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUploadAndCreateThumb</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\joedy\\Pictures\\xbx1.jpg"</span>);</span><br><span class="line">        <span class="comment">// 上传并且生成缩略图</span></span><br><span class="line">        StorePath storePath = <span class="keyword">this</span>.storageClient.uploadImageAndCrtThumbImage(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(file), file.length(), <span class="string">"png"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getFullPath());</span><br><span class="line">        <span class="comment">// 不带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getPath());</span><br><span class="line">        <span class="comment">// 获取缩略图路径</span></span><br><span class="line">        String path = thumbImageConfig.getThumbImagePath(storePath.getPath());</span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group1/M00/00/00/wKg4ZVsWl5eAdLNZAABAhya2V0c424.jpg</span><br><span class="line">M00/00/00/wKg4ZVsWl5eAdLNZAABAhya2V0c424.jpg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group1/M00/00/00/wKg4ZVsWmD-ARnWiAABAhya2V0c772.png</span><br><span class="line">M00/00/00/wKg4ZVsWmD-ARnWiAABAhya2V0c772.png</span><br><span class="line">M00/00/00/wKg4ZVsWmD-ARnWiAABAhya2V0c772_60x60.png</span><br></pre></td></tr></table></figure>

<p>访问第二组第一个路径：</p>
<p><img src="/images/day07/1532920403019.png" alt="1532920403019"></p>
<p>访问最后一个路径（缩略图路径），<strong>注意加组名（group1）</strong>：</p>
<p><img src="/images/day07/1532920492769.png" alt="1532920492769"></p>
<h3 id="3-5-6-改造上传逻辑"><a href="#3-5-6-改造上传逻辑" class="headerlink" title="3.5.6.改造上传逻辑"></a>3.5.6.改造上传逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; CONTENT_TYPES = Arrays.asList(<span class="string">"image/jpeg"</span>, <span class="string">"image/gif"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UploadService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 校验文件的类型</span></span><br><span class="line">        String contentType = file.getContentType();</span><br><span class="line">        <span class="keyword">if</span> (!CONTENT_TYPES.contains(contentType))&#123;</span><br><span class="line">            <span class="comment">// 文件类型不合法，直接返回null</span></span><br><span class="line">            LOGGER.info(<span class="string">"文件类型不合法：&#123;&#125;"</span>, originalFilename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 校验文件的内容</span></span><br><span class="line">            BufferedImage bufferedImage = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (bufferedImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">                LOGGER.info(<span class="string">"文件内容不合法：&#123;&#125;"</span>, originalFilename);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存到服务器</span></span><br><span class="line">            <span class="comment">// file.transferTo(new File("C:\\leyou\\images\\" + originalFilename));</span></span><br><span class="line">            String ext = StringUtils.substringAfterLast(originalFilename, <span class="string">"."</span>);</span><br><span class="line">            StorePath storePath = <span class="keyword">this</span>.storageClient.uploadFile(file.getInputStream(), file.getSize(), ext, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成url地址，返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"http://image.leyou.com/"</span> + storePath.getFullPath();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"服务器内部错误：&#123;&#125;"</span>, originalFilename);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要把原来保存文件的逻辑去掉，然后上传到FastDFS即可。</p>
<h3 id="3-5-7-测试"><a href="#3-5-7-测试" class="headerlink" title="3.5.7.测试"></a>3.5.7.测试</h3><p>通过RestClient测试：</p>
<p><img src="/images/day07/1528208647458.png" alt="1528208647458"></p>
<p><img src="/images/day07/1528208592430.png" alt="1528208592430"></p>
<h2 id="3-6-页面测试上传"><a href="#3-6-页面测试上传" class="headerlink" title="3.6.页面测试上传"></a>3.6.页面测试上传</h2><p>发现上传成功：</p>
<p><img src="/images/day07/1528210076570.png" alt="1528210076570"></p>
<p> <img src="/images/day07/1528210349042.png" alt="1528210349042"></p>
<h1 id="4-修改品牌（作业）"><a href="#4-修改品牌（作业）" class="headerlink" title="4.修改品牌（作业）"></a>4.修改品牌（作业）</h1><p>修改的难点在于回显。</p>
<p>当我们点击编辑按钮，希望弹出窗口的同时，看到原来的数据：</p>
<p><img src="/images/day07/1532923048027.png" alt="1532923048027"></p>
<h2 id="4-1-点击编辑出现弹窗"><a href="#4-1-点击编辑出现弹窗" class="headerlink" title="4.1.点击编辑出现弹窗"></a>4.1.点击编辑出现弹窗</h2><p>这个比较简单，修改show属性为true即可实现，我们绑定一个点击事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-icon</span> <span class="attr">small</span> <span class="attr">class</span>=<span class="string">"mr-2"</span> @<span class="attr">click</span>=<span class="string">"editItem(props.item)"</span>&gt;</span></span><br><span class="line">    edit</span><br><span class="line"><span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后编写事件，改变show 的状态：</p>
<p><img src="/images/day07/1528210800331.png" alt="1528210800331"></p>
<p>如果仅仅是这样，编辑按钮与新增按钮将没有任何区别，关键在于，如何回显呢？</p>
<h2 id="4-2-回显数据"><a href="#4-2-回显数据" class="headerlink" title="4.2.回显数据"></a>4.2.回显数据</h2><p>回显数据，就是把当前点击的品牌数据传递到子组件（MyBrandForm）。而父组件给子组件传递数据，通过props属性。</p>
<ul>
<li><p>第一步：在编辑时获取当前选中的品牌信息，并且记录到data中</p>
<p>先在data中定义属性，用来接收用来编辑的brand数据：</p>
<p><img src="/images/day07/1528210594296.png" alt="1528210594296"></p>
<p>我们在页面触发编辑事件时，把当前的brand传递给editBrand方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">color</span>=<span class="string">"info"</span> @<span class="attr">click</span>=<span class="string">"editBrand(props.item)"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在editBrand中接收数据，赋值给oldBrand：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">editItem(oldBrand)&#123;</span><br><span class="line">    <span class="comment">// 使编辑窗口可见</span></span><br><span class="line">    <span class="keyword">this</span>.dialog = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 初始化编辑的数据</span></span><br><span class="line">    <span class="keyword">this</span>.oldBrand = oldBrand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二步：把获取的brand数据 传递给子组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对话框内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-card-text</span> <span class="attr">class</span>=<span class="string">"px-5"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这是一个表单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-brand-form</span> @<span class="attr">close</span>=<span class="string">"close"</span> <span class="attr">:oldBrand</span>=<span class="string">"oldBrand"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-brand-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-card-text</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步：在子组件（MyBrandForm.vue）中通过props接收要编辑的brand数据，Vue会自动完成回显</p>
<p>接收数据：</p>
<p><img src="/images/day07/1528211066645.png" alt="1528211066645"></p>
<p>通过watch函数监控oldBrand的变化，把值copy到本地的brand：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    oldBrand: &#123;<span class="comment">// 监控oldBrand的变化</span></span><br><span class="line">        handler(val) &#123;</span><br><span class="line">            <span class="keyword">if</span>(val)&#123;</span><br><span class="line">                <span class="comment">// 注意不要直接赋值，否则这边的修改会影响到父组件的数据，copy属性即可</span></span><br><span class="line">                <span class="keyword">this</span>.brand =  <span class="built_in">Object</span>.deepCopy(val)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 为空，初始化brand</span></span><br><span class="line">                <span class="keyword">this</span>.brand = &#123;</span><br><span class="line">                    name: <span class="string">''</span>,</span><br><span class="line">                    letter: <span class="string">''</span>,</span><br><span class="line">                    image: <span class="string">''</span>,</span><br><span class="line">                    categories: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">            deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Object.deepCopy 自定义的对象进行深度复制的方法。</li>
<li>需要判断监听到的是否为空，如果为空，应该进行初始化</li>
</ul>
</li>
</ul>
<p>测试：发现数据回显了，除了商品分类以外：</p>
<p> <img src="/images/day07/1528211235872.png" alt="1528211235872"></p>
<h2 id="4-3-商品分类回显"><a href="#4-3-商品分类回显" class="headerlink" title="4.3.商品分类回显"></a>4.3.商品分类回显</h2><p>为什么商品分类没有回显？</p>
<p>因为品牌中并没有商品分类数据。我们需要在进入编辑页面之前，查询商品分类信息：</p>
<h3 id="4-3-1-后台提供接口"><a href="#4-3-1-后台提供接口" class="headerlink" title="4.3.1.后台提供接口"></a>4.3.1.后台提供接口</h3><blockquote>
<h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过品牌id查询商品分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"bid/&#123;bid&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Category&gt;&gt; queryByBrandId(<span class="meta">@PathVariable</span>(<span class="string">"bid"</span>) Long bid) &#123;</span><br><span class="line">    List&lt;Category&gt; list = <span class="keyword">this</span>.categoryService.queryByBrandId(bid);</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Service</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryByBrandId</span><span class="params">(Long bid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.categoryMapper.queryByBrandId(bid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>mapper</p>
</blockquote>
<p>因为需要通过中间表进行子查询，所以这里要手写Sql：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据品牌id查询商品分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_category WHERE id IN (SELECT category_id FROM tb_category_brand WHERE brand_id = #&#123;bid&#125;)"</span>)</span><br><span class="line"><span class="function">List&lt;Category&gt; <span class="title">queryByBrandId</span><span class="params">(Long bid)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-2-前台查询分类并渲染"><a href="#4-3-2-前台查询分类并渲染" class="headerlink" title="4.3.2.前台查询分类并渲染"></a>4.3.2.前台查询分类并渲染</h3><p>我们在编辑页面打开之前，先把数据查询完毕：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">editBrand(oldBrand)&#123;</span><br><span class="line">    <span class="comment">// 根据品牌信息查询商品分类</span></span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">"/item/category/bid/"</span> + oldBrand.id)</span><br><span class="line">        .then(<span class="function">(<span class="params">&#123;data&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 控制弹窗可见：</span></span><br><span class="line">        <span class="keyword">this</span>.dialog = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 获取要编辑的brand</span></span><br><span class="line">        <span class="keyword">this</span>.oldBrand = oldBrand</span><br><span class="line">        <span class="comment">// 回显商品分类</span></span><br><span class="line">        <span class="keyword">this</span>.oldBrand.categories = data;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次测试：数据成功回显了</p>
<p> <img src="/images/day07/1526222999115.png" alt="1526222999115"></p>
<h3 id="4-3-3-新增窗口数据干扰"><a href="#4-3-3-新增窗口数据干扰" class="headerlink" title="4.3.3.新增窗口数据干扰"></a>4.3.3.新增窗口数据干扰</h3><p>但是，此时却产生了新问题：新增窗口竟然也有数据？</p>
<p>原因：</p>
<pre><code>如果之前打开过编辑，那么在父组件中记录的oldBrand会保留。下次再打开窗口，如果是编辑窗口到没问题，但是新增的话，就会再次显示上次打开的品牌信息了。</code></pre><p>解决：</p>
<pre><code>新增窗口打开前，把数据置空。</code></pre><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addBrand() &#123;</span><br><span class="line">    <span class="comment">// 控制弹窗可见：</span></span><br><span class="line">    <span class="keyword">this</span>.dialog = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 把oldBrand变为null</span></span><br><span class="line">    <span class="keyword">this</span>.oldBrand = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-4-提交表单时判断是新增还是修改"><a href="#4-3-4-提交表单时判断是新增还是修改" class="headerlink" title="4.3.4.提交表单时判断是新增还是修改"></a>4.3.4.提交表单时判断是新增还是修改</h3><p>新增和修改是同一个页面，我们该如何判断？</p>
<p>父组件中点击按钮弹出新增或修改的窗口，因此父组件非常清楚接下来是新增还是修改。</p>
<p>因此，最简单的方案就是，在父组件中定义变量，记录新增或修改状态，当弹出页面时，把这个状态也传递给子组件。</p>
<p>第一步：在父组件中记录状态：</p>
<p> <img src="/images/day07/1526224372366.png" alt="1526224372366"></p>
<p>第二步：在新增和修改前，更改状态：</p>
<p> <img src="/images/day07/1526224447288.png" alt="1526224447288"></p>
<p>第三步：传递给子组件</p>
<p> <img src="/images/day07/1526224495244.png" alt="1526224495244"></p>
<p>第四步，子组件接收标记：</p>
<p> <img src="/images/day07/1526224563838.png" alt="1526224563838"></p>
<p>标题的动态化：</p>
<p> <img src="/images/day07/1526224628514.png" alt="1526224628514"></p>
<p>表单提交动态：</p>
<p>axios除了除了get和post外，还有一个通用的请求方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数据提交到后台</span></span><br><span class="line"><span class="comment">// this.$http.post('/item/brand', this.$qs.stringify(params))</span></span><br><span class="line"><span class="keyword">this</span>.$http(&#123;</span><br><span class="line">    method: <span class="keyword">this</span>.isEdit ? <span class="string">'put'</span> : <span class="string">'post'</span>, <span class="comment">// 动态判断是POST还是PUT</span></span><br><span class="line">    url: <span class="string">'/item/brand'</span>,</span><br><span class="line">    data: <span class="keyword">this</span>.$qs.stringify(<span class="keyword">this</span>.brand)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭窗口</span></span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"close"</span>);</span><br><span class="line">    <span class="keyword">this</span>.$message.success(<span class="string">"保存成功！"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(<span class="string">"保存失败！"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


    <div id="aplayer-sVDRislN" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2944308820" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题（1）</title>
    <url>/2019/12/07/leetcodeDay1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>微服务标签下的那几篇博客不是自己写的，贴上来只是为了方便自己看，这么长的文章</p>
<a id="more"></a>
<h2 id="整数反转（简单）"><a href="#整数反转（简单）" class="headerlink" title="整数反转（简单）"></a>整数反转（简单）</h2><p><img src="/images/leetcode/1575718303(1).jpg" alt="示例图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> rs = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            rs = rs * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (rs&lt;Integer.MIN_VALUE || rs &gt; Integer.MAX_VALUE)?<span class="number">0</span>:(<span class="keyword">int</span>)rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两数之和（简单）"><a href="#两数之和（简单）" class="headerlink" title="两数之和（简单）"></a>两数之和（简单）</h2><p><img src="/images/leetcode/1575718568(1).jpg" alt="示例图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] indexs = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 建立k-v ，一一对应的哈希表</span></span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hash = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash.containsKey(nums[i]))&#123;</span><br><span class="line">                indexs[<span class="number">0</span>] = i;</span><br><span class="line">                indexs[<span class="number">1</span>] = hash.get(nums[i]);</span><br><span class="line">                <span class="keyword">return</span> indexs;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将数据存入 key为补数 ，value为下标</span></span><br><span class="line">            hash.put(target-nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> indexs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="回文数（简单）"><a href="#回文数（简单）" class="headerlink" title="回文数（简单）"></a>回文数（简单）</h2><p><img src="/images/leetcode/1575721011(1).jpg" alt="示例图"></p>
<p>简单版:<br>直接上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        String reversedStr = (<span class="keyword">new</span> StringBuilder(x + <span class="string">""</span>)).reverse().toString();</span><br><span class="line">        <span class="keyword">return</span> (x + <span class="string">""</span>).equals(reversedStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进阶版解题思路：<br>对于数字的末位，直接取余就可以了，对于数字的首位，我们可以这么算。首先用一个变量记录数字的最高位，比如12321，可以标记help为10000，<br>第一个末位为1，第一个首位为 12321/10000=1，<br>接下来我们需要计算 232 是否为回文，怎么计算呢？<br>我们需要去掉首位和末位。<br>可以采用 x % help / 10 的方式<br>12321%10000==2321 可以将最高位去掉，然后 2321/10==232 可以将最低为去掉。<br>最后不要忘记将 help/100。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> help = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> tmp = x;</span><br><span class="line">       <span class="keyword">while</span> (tmp &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">           help *= <span class="number">10</span>;</span><br><span class="line">           tmp /= <span class="number">10</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (x % <span class="number">10</span> != x / help) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           x = x % help / <span class="number">10</span>;</span><br><span class="line">           help /= <span class="number">100</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="罗马数字转整数（简单）"><a href="#罗马数字转整数（简单）" class="headerlink" title="罗马数字转整数（简单）"></a>罗马数字转整数（简单）</h2><p><img src="/images/leetcode/1575729911.jpg" alt="示例图"><br>其实只要每次比较后一个和前一个的值的大小关系即可：<br>1.前值小于后值，减去前值<br>2.前值大于或等于后值，加上前值<br>3.最后一个值必然是加上的</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> preNum = getValue(s.charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; s.length(); i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = getValue(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span>(preNum &lt; num) &#123;</span><br><span class="line">                sum -= preNum;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += preNum;</span><br><span class="line">            &#125;</span><br><span class="line">            preNum = num;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += preNum;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'V'</span>: <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'X'</span>: <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'L'</span>: <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>: <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>: <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'M'</span>: <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最长公共前缀（简单）"><a href="#最长公共前缀（简单）" class="headerlink" title="最长公共前缀（简单）"></a>最长公共前缀（简单）</h2><p><img src="/images/leetcode/1575731595(1).jpg" alt="示例图"></p>
<p>思路：<br>标签：链表<br>当字符串数组长度为 0 时则公共前缀为空，直接返回<br>令最长公共前缀 ans 的值为第一个字符串，进行初始化<br>遍历后面的字符串，依次将其与 ans 进行比较，两两找出公共前缀，最终结果即为最长公共前缀<br>如果查找过程中出现了 ans 为空的情况，则公共前缀不存在直接返回<br>时间复杂度：O(s)O(s)，s 为所有字符串的长度之和</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String str = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(strs[i].indexOf(str) != <span class="number">0</span>)&#123;</span><br><span class="line">                str=str.substring(<span class="number">0</span>, str.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    <div id="aplayer-yRsWJJgl" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1397317478" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构 -leetcode练习</tag>
      </tags>
  </entry>
  <entry>
    <title>商品分类(vuetify-nginx-cors)</title>
    <url>/2019/12/02/day06/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>使用资料搭建后台系统</li>
<li>会使用nginx进行反向代理</li>
<li>实现商品分类查询功能</li>
<li>掌握cors解决跨域</li>
<li>实现品牌查询功能</li>
</ul>
<a id="more"></a>
<h1 id="1-搭建后台管理前端"><a href="#1-搭建后台管理前端" class="headerlink" title="1.搭建后台管理前端"></a>1.搭建后台管理前端</h1><h2 id="1-1-导入已有资源"><a href="#1-1-导入已有资源" class="headerlink" title="1.1.导入已有资源"></a>1.1.导入已有资源</h2><p>后台项目相对复杂，为了有利于教学，我们不再从0搭建项目，而是直接使用课前资料中给大家准备好的源码：</p>
<p><img src="/images/day06/1530555871804.png" alt="1530555871804"></p>
<p>我们解压缩，放到工作目录中：</p>
<p><img src="/images/day06/1530367369490.png" alt="1530367369490"></p>
<p>然后在Intellij idea中导入新的工程：</p>
<p><img src="/images/day06/1530367589197.png" alt="1530367589197"></p>
<p>选中我们的工程：</p>
<p> <img src="/images/day06/1530367781173.png" alt="1530367781173"></p>
<h2 id="1-2-安装依赖"><a href="#1-2-安装依赖" class="headerlink" title="1.2.安装依赖"></a>1.2.安装依赖</h2><p>你应该注意到，这里并没有node_modules文件夹，方便给大家下发，已经把依赖都删除了。不过package.json中依然定义了我们所需的一切依赖：</p>
<p><img src="/images/day06/1530368695265.png" alt="1530368695265"></p>
<p>我们只需要打开终端，进入项目目录，输入：<code>npm install</code>命令，即可安装这些依赖。</p>
<p><img src="/images/day06/1530374769782.png" alt="1530374769782"></p>
<p>大概需要几分钟。</p>
<p><strong>如果安装过程出现以下问题</strong>：</p>
<p><img src="/images/day06/1530374827792.png" alt="1530374827792"></p>
<p>建议删除node_modules目录，重新安装。或者copy其他人的node_modules使用</p>
<h2 id="1-3-运行一下看看"><a href="#1-3-运行一下看看" class="headerlink" title="1.3.运行一下看看"></a>1.3.运行一下看看</h2><p><img src="/images/day06/1540706914029.png" alt="1540706914029"></p>
<p>在package.json文件中有scripts启动脚本配置，可以输入命令：<code>npm run dev</code>或者<code>npm start</code></p>
<p><img src="/images/day06/1530374954209.png" alt="1530374954209"></p>
<p>发现默认的端口是9001。访问：<a href="http://localhost:9001" target="_blank" rel="noopener">http://localhost:9001</a></p>
<p>会自动进行跳转：</p>
<p><img src="/images/day06/1530375152204.png" alt="1525958950616"></p>
<h2 id="1-4-目录结构"><a href="#1-4-目录结构" class="headerlink" title="1.4.目录结构"></a>1.4.目录结构</h2><p> <img src="/images/day06/1525962755237.png" alt="1525962755237"></p>
<p>webpack：是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。并且提供了前端项目的热部署插件。</p>
<h2 id="1-5-调用关系"><a href="#1-5-调用关系" class="headerlink" title="1.5.调用关系"></a>1.5.调用关系</h2><p>我们最主要理清index.html、main.js、App.vue之间的关系：</p>
<p><img src="/images/day06/1525964023585.png" alt="1525964023585"></p>
<p>理一下：</p>
<ul>
<li>index.html：html模板文件。定义了空的<code>div</code>，其id为<code>app</code>。</li>
<li>main.js：<strong>实例化vue对象</strong>，并且通过id选择器绑定到index.html的div中，因此<strong>main.js的内容都将在index.html的div中显示</strong>。main.js中使用了App组件，即App.vue，也就是说index.html中最终展现的是App.vue中的内容。index.html引用它之后，就拥有了vue的内容（包括组件、样式等），所以，main.js也是<strong>webpack打包的入口</strong>。</li>
<li>index.js：定义请求路径和组件的映射关系。相当于之前的<code>&lt;vue-router&gt;</code></li>
<li>App.vue中也没有内容，而是定义了vue-router的锚点：<code>&lt;router-view&gt;</code>,我们之前讲过，vue-router路由后的组件将会在锚点展示。</li>
<li>最终结论：<strong>一切路由后的内容都将通过App.vue在index.html中显示。</strong></li>
<li>访问流程：用户在浏览器输入路径，例如：<a href="http://localhost:9001/#/item/brand" target="_blank" rel="noopener">http://localhost:9001/#/item/brand</a> –&gt; index.js(/item/brand路径对应pages/item/Brand.vue组件) –&gt; 该组件显示在App.vue的锚点位置 –&gt; main.js使用了App.vue组件，并把该组件渲染在index.html文件中（id为“app”的div中）</li>
</ul>
<p><img src="/images/day06/1543399927909.png" alt="1543399927909"></p>
<h1 id="2-Vuetify框架"><a href="#2-Vuetify框架" class="headerlink" title="2.Vuetify框架"></a>2.Vuetify框架</h1><h2 id="2-1-为什么要学习UI框架"><a href="#2-1-为什么要学习UI框架" class="headerlink" title="2.1.为什么要学习UI框架"></a>2.1.为什么要学习UI框架</h2><p>Vue虽然会帮我们进行视图的渲染，但样式还是由我们自己来完成。这显然不是我们的强项，因此后端开发人员一般都喜欢使用一些现成的UI组件，拿来即用，常见的例如：</p>
<ul>
<li>BootStrap</li>
<li>LayUI</li>
<li>EasyUI</li>
<li>ZUI</li>
</ul>
<p>然而这些UI组件的基因天生与Vue不合，因为他们更多的是利用DOM操作，借助于jQuery实现，而不是MVVM的思想。</p>
<p>而目前与Vue吻合的UI框架也非常的多，国内比较知名的如：</p>
<ul>
<li>element-ui：饿了么出品</li>
<li>i-view：某公司出品</li>
</ul>
<p>然而我们都不用，我们今天推荐的是一款国外的框架：Vuetify</p>
<p>官方网站：<a href="https://vuetifyjs.com/zh-Hans/" target="_blank" rel="noopener">https://vuetifyjs.com/zh-Hans/</a></p>
<p><img src="/images/day06/1525960652724.png" alt="1525960652724"></p>
<h2 id="2-2-为什么是Vuetify"><a href="#2-2-为什么是Vuetify" class="headerlink" title="2.2.为什么是Vuetify"></a>2.2.为什么是Vuetify</h2><p>有中国的为什么还要用外国的？原因如下：</p>
<ul>
<li>Vuetify几乎不需要任何CSS代码，而element-ui许多布局样式需要我们来编写</li>
<li>Vuetify从底层构建起来的语义化组件。简单易学，容易记住。</li>
<li>Vuetify基于Material Design（谷歌推出的多平台设计规范），更加美观，动画效果酷炫，且风格统一</li>
</ul>
<p>这是官网的说明：</p>
<p><img src="/images/day06/1530555978248.png" alt="1530555978248"></p>
<p>缺陷：</p>
<ul>
<li>目前官网虽然有中文文档，但因为翻译问题，几乎不太能看。</li>
</ul>
<h2 id="2-3-怎么用？"><a href="#2-3-怎么用？" class="headerlink" title="2.3.怎么用？"></a>2.3.怎么用？</h2><p>基于官方网站的文档进行学习：</p>
<p><img src="/images/day06/1525960312939.png" alt="1525960312939"></p>
<p>我们重点关注<code>UI components</code>即可，里面有大量的UI组件，我们要用的时候再查看，不用现在学习，先看下有什么：</p>
<p> <img src="/images/day06/1525961862771.png" alt="1525961862771"></p>
<p> <img src="/images/day06/1525961875288.png" alt="1525961875288"></p>
<p>以后用到什么组件，就来查询即可。</p>
<h2 id="2-4-项目页面布局"><a href="#2-4-项目页面布局" class="headerlink" title="2.4.项目页面布局"></a>2.4.项目页面布局</h2><p>接下来我们一起看下页面布局。</p>
<p>Layout组件是我们的整个页面的布局组件：</p>
<p><img src="/images/day06/1530380040278.png" alt="1530380040278"></p>
<p>一个典型的三块布局。包含左，上，中三部分：</p>
<p> <img src="/images/day06/1525965779366.png" alt="1525965779366"></p>
<p>里面使用了Vuetify中的2个组件和一个布局元素：</p>
<ul>
<li><p><code>v-navigation-drawer</code> ：导航抽屉，主要用于容纳应用程序中的页面的导航链接。 </p>
<p><img src="/images/day06/1532577155616.png" alt="1532577155616"></p>
</li>
<li><p><code>v-toolbar</code>：工具栏通常是网站导航的主要途径。可以与导航抽屉一起很好地工作，动态选择是否打开导航抽屉，实现可伸缩的侧边栏。</p>
<p><img src="/images/day06/1530380292558.png" alt="1530380292558"></p>
</li>
<li><p><code>v-content</code>：并不是一个组件，而是标记页面布局的元素。可以根据您指定的<strong>app</strong>组件的结构动态调整大小，使得您可以创建高度可定制的组件。</p>
</li>
</ul>
<p>那么问题来了：<code>v-content</code>中的内容来自哪里？</p>
<p><img src="/images/day06/1525966180568.png" alt="1525966180568"></p>
<ul>
<li>Layout映射的路径是<code>/</code></li>
<li>除了Login以外的所有组件，都是定义在Layout的children属性，并且路径都是<code>/</code>的下面</li>
<li>因此当路由到子组件时，会在Layout中定义的锚点中显示。</li>
<li>并且Layout中的其它部分不会变化，这就实现了布局的共享。</li>
</ul>
<h1 id="3-使用域名访问本地项目"><a href="#3-使用域名访问本地项目" class="headerlink" title="3.使用域名访问本地项目"></a>3.使用域名访问本地项目</h1><h2 id="3-1-统一环境"><a href="#3-1-统一环境" class="headerlink" title="3.1.统一环境"></a>3.1.统一环境</h2><p>我们现在访问页面使用的是：<a href="http://localhost:9001" target="_blank" rel="noopener">http://localhost:9001</a></p>
<p>有没有什么问题？</p>
<p>实际开发中，会有不同的环境：</p>
<ul>
<li>开发环境：自己的电脑</li>
<li>测试环境：提供给测试人员使用的环境</li>
<li>预发布环境：数据是和生成环境的数据一致，运行最新的项目代码进去测试</li>
<li>生产环境：项目最终发布上线的环境</li>
</ul>
<p>如果不同环境使用不同的ip去访问，可能会出现一些问题。为了保证所有环境的一致，我们会在各种环境下都使用域名来访问。</p>
<p>我们将使用以下域名：</p>
<ul>
<li>主域名是：<a href="http://www.leyou.com，leyou.com" target="_blank" rel="noopener">www.leyou.com，leyou.com</a> </li>
<li>管理系统域名：manage.leyou.com</li>
<li>网关域名：api.leyou.com</li>
<li>…</li>
</ul>
<p>但是最终，我们希望这些域名指向的还是我们本机的某个端口。</p>
<p>那么，当我们在浏览器输入一个域名时，浏览器是如何找到对应服务的ip和端口的呢？</p>
<h2 id="3-2-域名解析"><a href="#3-2-域名解析" class="headerlink" title="3.2.域名解析"></a>3.2.域名解析</h2><p>一个域名一定会被解析为一个或多个ip。这一般会包含两步：</p>
<ul>
<li><p>本地域名解析</p>
<p>浏览器会首先在本机的hosts文件中查找域名映射的IP地址，如果查找到就返回IP ，没找到则进行域名服务器解析，一般本地解析都会失败，因为默认这个文件是空的。</p>
<ul>
<li>Windows下的hosts文件地址：C:/Windows/System32/drivers/etc/hosts</li>
<li>Linux下的hosts文件所在路径： /etc/hosts </li>
</ul>
<p>样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># My hosts</span><br><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure>
</li>
<li><p>域名服务器解析</p>
<p>本地解析失败，才会进行域名服务器解析，域名服务器就是网络中的一台计算机，里面记录了所有注册备案的域名和ip映射关系，一般只要域名是正确的，并且备案通过，一定能找到。</p>
</li>
</ul>
<h2 id="3-3-解决域名解析问题"><a href="#3-3-解决域名解析问题" class="headerlink" title="3.3.解决域名解析问题"></a>3.3.解决域名解析问题</h2><p>我们不可能去购买一个域名，因此我们可以伪造本地的hosts文件，实现对域名的解析。修改本地的host为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 api.leyou.com</span><br><span class="line">127.0.0.1 manage.leyou.com</span><br></pre></td></tr></table></figure>

<p>这样就实现了域名的关系映射了。</p>
<p>每次在C盘寻找hosts文件并修改是非常麻烦的，给大家推荐一个快捷修改host的工具，在课前资料中可以找到：</p>
<p><img src="/images/day06/1530556073565.png" alt="1530556073565"></p>
<p>解压，运行exe文件，效果：</p>
<p><img src="/images/day06/1530382550630.png" alt="1530382550630"></p>
<p>我们添加了两个映射关系（中间用空格隔开）：</p>
<ul>
<li>127.0.0.1 api.leyou.com ：我们的网关Zuul</li>
<li>127.0.0.1 manage.leyou.com：我们的后台系统地址</li>
</ul>
<p>现在，ping一下域名试试是否畅通：</p>
<p><img src="/images/day06/1530382601757.png" alt="1530382601757"></p>
<p>OK！</p>
<p>通过域名访问：</p>
<p><img src="/images/day06/1530383586463.png" alt="1530383586463"></p>
<p>原因：我们配置了项目访问的路径，虽然manage.leyou.com映射的ip也是127.0.0.1，但是webpack会验证host是否符合配置。</p>
<p><img src="/images/day06/1530383612716.png" alt="1530383612716"></p>
<p>在webpack.dev.conf.js中取消host验证：<code>disableHostCheck: true</code></p>
<p><img src="/images/day06/1530383927461.png" alt="1530383927461"></p>
<p>重新执行<code>npm run dev</code>，刷新浏览器：</p>
<p><img src="/images/day06/1532578408206.png" alt="1532578408206"></p>
<p>OK！</p>
<h2 id="3-4-nginx解决端口问题"><a href="#3-4-nginx解决端口问题" class="headerlink" title="3.4.nginx解决端口问题"></a>3.4.nginx解决端口问题</h2><p>域名问题解决了，但是现在要访问后台页面，还得自己加上端口：<code>http://manage.taotao.com:9001</code>。</p>
<p>这就不够优雅了。我们希望的是直接域名访问：<code>http://manage.taotao.com</code>。这种情况下端口默认是80，如何才能把请求转移到9001端口呢？</p>
<p>这里就要用到反向代理工具：Nginx</p>
<h3 id="3-4-1-什么是Nginx"><a href="#3-4-1-什么是Nginx" class="headerlink" title="3.4.1.什么是Nginx"></a>3.4.1.什么是Nginx</h3><p> <img src="/images/day06/1526187409033.png" alt="1526187409033"></p>
<p>nginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能：</p>
<ul>
<li>反向代理</li>
<li>负载均衡</li>
<li>动态路由</li>
<li>请求过滤</li>
</ul>
<h3 id="3-4-2-nginx作为web服务器"><a href="#3-4-2-nginx作为web服务器" class="headerlink" title="3.4.2.nginx作为web服务器"></a>3.4.2.nginx作为web服务器</h3><p>Web服务器分2类：</p>
<ul>
<li>web应用服务器，如：<ul>
<li>tomcat </li>
<li>resin</li>
<li>jetty</li>
</ul>
</li>
<li>web服务器，如：<ul>
<li>Apache 服务器 </li>
<li>Nginx</li>
<li>IIS  </li>
</ul>
</li>
</ul>
<p>区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。<br>并发：web服务器的并发能力远高于web应用服务器。</p>
<h3 id="3-4-3-nginx作为反向代理"><a href="#3-4-3-nginx作为反向代理" class="headerlink" title="3.4.3.nginx作为反向代理"></a>3.4.3.nginx作为反向代理</h3><p>什么是反向代理？</p>
<ul>
<li>代理：通过客户机的配置，实现让一台服务器代理客户机，客户的所有请求都交给代理服务器处理。</li>
<li>反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。</li>
</ul>
<p>nginx可以当做反向代理服务器来使用：</p>
<ul>
<li>我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理</li>
<li>当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能</li>
</ul>
<p>利用反向代理，就可以解决我们前面所说的端口问题，如图</p>
<p><img src="/images/day06/1526016663674.png" alt="1526016663674"></p>
<h3 id="3-4-4-安装和使用"><a href="#3-4-4-安装和使用" class="headerlink" title="3.4.4.安装和使用"></a>3.4.4.安装和使用</h3><blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3></blockquote>
<p>安装非常简单，把课前资料提供的nginx直接解压即可，绿色免安装，舒服！</p>
<p><img src="/images/day06/0C36B84E.gif" alt="img"> </p>
<p>我们在本地安装一台nginx：</p>
<p><img src="/images/day06/1530556268445.png" alt="1530556268445"></p>
<p>解压后，目录结构：</p>
<p><img src="/images/day06/1530384792790.png" alt="1530384792790"></p>
<ol>
<li>conf：配置目录</li>
<li>contrib：第三方依赖</li>
<li>html：默认的静态资源目录，类似于tomcat的webapps</li>
<li>logs：日志目录</li>
<li>nginx.exe：启动程序。可双击运行，但不建议这么做。</li>
</ol>
<blockquote>
<h3 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h3></blockquote>
<p>示例：</p>
<p> <img src="/images/day06/1526188831504.png" alt="1526188831504"></p>
<p>nginx中的每个server就是一个反向代理配置，可以有多个server</p>
<p>完整配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  manage.leyou.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://127.0.0.1:9001;</span><br><span class="line">			<span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">			<span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://127.0.0.1:10010;</span><br><span class="line">			<span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">			<span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3></blockquote>
<p>nginx可以通过命令行来启动，操作命令：</p>
<ul>
<li>启动：<code>start nginx.exe</code></li>
<li>停止：<code>nginx.exe -s stop</code></li>
<li>重新加载：<code>nginx.exe -s reload</code></li>
</ul>
<p>启动过程会闪烁一下，启动成功后，任务管理器中会有两个nginx进程：</p>
<p> <img src="/images/day06/1532579488518.png" alt="1532579488518"></p>
<h2 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5.测试"></a>3.5.测试</h2><p>启动nginx，然后用域名访问后台管理系统：</p>
<p><img src="/images/day06/1530385593052.png" alt="1530385593052"></p>
<p>现在实现了域名访问网站了，中间的流程是怎样的呢？</p>
<p><img src="/images/day06/1526189945180.png" alt="1526189945180"></p>
<ol>
<li><p>浏览器准备发起请求，访问<a href="http://mamage.leyou.com，但需要进行域名解析" target="_blank" rel="noopener">http://mamage.leyou.com，但需要进行域名解析</a></p>
</li>
<li><p>优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1</p>
</li>
<li><p>请求被发往解析得到的ip，并且默认使用80端口：<a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a></p>
<p>本机的nginx一直监听80端口，因此捕获这个请求</p>
</li>
<li><p>nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发</p>
</li>
<li><p>后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx</p>
</li>
<li><p>nginx将得到的结果返回到浏览器</p>
</li>
</ol>
<h1 id="4-实现商品分类查询"><a href="#4-实现商品分类查询" class="headerlink" title="4.实现商品分类查询"></a>4.实现商品分类查询</h1><p>商城的核心自然是商品，而商品多了以后，肯定要进行分类，并且不同的商品会有不同的品牌信息，我们需要依次去完成：商品分类、品牌、商品的开发。</p>
<h2 id="4-1-导入数据"><a href="#4-1-导入数据" class="headerlink" title="4.1.导入数据"></a>4.1.导入数据</h2><p>首先导入课前资料提供的sql：</p>
<p><img src="/images/day06/1530556389224.png" alt="1530556389224"></p>
<p>我们先看商品分类表：</p>
<p> <img src="/images/day06/1525999774439.png" alt="1525999774439"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_category` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;类目id&apos;,</span><br><span class="line">  `name` varchar(20) NOT NULL COMMENT &apos;类目名称&apos;,</span><br><span class="line">  `parent_id` bigint(20) NOT NULL COMMENT &apos;父类目id,顶级类目填0&apos;,</span><br><span class="line">  `is_parent` tinyint(1) NOT NULL COMMENT &apos;是否为父节点，0为否，1为是&apos;,</span><br><span class="line">  `sort` int(4) NOT NULL COMMENT &apos;排序指数，越小越靠前&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `key_parent_id` (`parent_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1424 DEFAULT CHARSET=utf8 COMMENT=&apos;商品类目表，类目和商品(spu)是一对多关系，类目与品牌是多对多关系&apos;;</span><br></pre></td></tr></table></figure>

<p>因为商品分类会有层级关系，因此这里我们加入了<code>parent_id</code>字段，对本表中的其它分类进行自关联。</p>
<h2 id="4-2-实现功能"><a href="#4-2-实现功能" class="headerlink" title="4.2.实现功能"></a>4.2.实现功能</h2><p>在浏览器页面点击“分类管理”菜单：</p>
<p><img src="/images/day06/1545220121941.png" alt="1545220121941"></p>
<p>根据这个路由路径到路由文件（src/route/index.js），可以定位到分类管理页面：</p>
<p><img src="/images/day06/1545220316442.png" alt="1545220316442"></p>
<p>由路由文件知，页面是src/pages/item/Category.vue</p>
<p><img src="/images/day06/1545220394460.png" alt="1545220394460"></p>
<p>商品分类使用了树状结构，而这种结构的组件vuetify并没有为我们提供，这里自定义了一个树状组件。不要求实现或者查询组件的实现，只要求可以参照文档使用该组件即可：</p>
<p><img src="/images/day06/1545219777406.png" alt="1545219777406"></p>
<h3 id="4-2-1-url异步请求"><a href="#4-2-1-url异步请求" class="headerlink" title="4.2.1.url异步请求"></a>4.2.1.url异步请求</h3><p>点击商品管理下的分类管理子菜单，在浏览器控制台可以看到：</p>
<p><img src="/images/day06/1530427294644.png" alt="1530427294644"></p>
<p>页面中没有，只是发起了一条请求：<a href="http://api.leyou.com/api/item/category/list?pid=0" target="_blank" rel="noopener">http://api.leyou.com/api/item/category/list?pid=0</a> </p>
<p>大家可能会觉得很奇怪，我们明明是使用的相对路径：/item/category/list，讲道理发起的请求地址应该是：</p>
<p><a href="http://manage.leyou.com/item/category/list" target="_blank" rel="noopener">http://manage.leyou.com/item/category/list</a></p>
<p>但实际却是：</p>
<p><a href="http://api.leyou.com/api/item/category/list?pid=0" target="_blank" rel="noopener">http://api.leyou.com/api/item/category/list?pid=0</a> </p>
<p>这是因为，我们有一个全局的配置文件，对所有的请求路径进行了约定：</p>
<p><img src="/images/day06/1530427514123.png" alt="1530427514123"></p>
<p>路径是<a href="http://api.leyou.com，并且默认加上了/api的前缀，这恰好与我们的网关设置匹配，我们只需要把地址改成网关的地址即可,因为我们使用了nginx反向代理，这里可以写域名。" target="_blank" rel="noopener">http://api.leyou.com，并且默认加上了/api的前缀，这恰好与我们的网关设置匹配，我们只需要把地址改成网关的地址即可,因为我们使用了nginx反向代理，这里可以写域名。</a></p>
<p>接下来，我们要做的事情就是编写后台接口，返回对应的数据即可。</p>
<h3 id="4-2-2-实体类"><a href="#4-2-2-实体类" class="headerlink" title="4.2.2.实体类"></a>4.2.2.实体类</h3><p>在<code>leyou-item-interface</code>中添加category实体类：</p>
<p> <img src="/images/day06/1530444682670.png" alt="1530444682670"></p>
<p>内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_category"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Long parentId;</span><br><span class="line">	<span class="keyword">private</span> Boolean isParent; <span class="comment">// 注意isParent生成的getter和setter方法需要手动加上Is</span></span><br><span class="line">	<span class="keyword">private</span> Integer sort;</span><br><span class="line">	<span class="comment">// getter和setter略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，这里要用到jpa的注解，因此我们在<code>leyou-item-iterface</code>中添加jpa依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-3-controller"><a href="#4-2-3-controller" class="headerlink" title="4.2.3.controller"></a>4.2.3.controller</h3><p>编写一个controller一般需要知道四个内容：</p>
<ul>
<li>请求方式：决定我们用GetMapping还是PostMapping</li>
<li>请求路径：决定映射路径</li>
<li>请求参数：决定方法的参数</li>
<li>返回值结果：决定方法的返回值</li>
</ul>
<p>在刚才页面发起的请求中，我们就能得到绝大多数信息：</p>
<p><img src="/images/day06/1530445885707.png" alt="1530445885707"></p>
<ul>
<li><p>请求方式：Get，插叙肯定是get请求</p>
</li>
<li><p>请求路径：/api/item/category/list。其中/api是网关前缀，/item是网关的路由映射，真实的路径应该是/category/list</p>
</li>
<li><p>请求参数：pid=0，根据tree组件的说明，应该是父节点的id，第一次查询为0，那就是查询一级类目</p>
</li>
<li><p>返回结果：？？</p>
<p>根据前面tree组件的用法我们知道，返回的应该是json数组：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">74</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"手机"</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"isParent"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"sort"</span>: <span class="number">2</span></span><br><span class="line">	&#125;,</span><br><span class="line">     &#123; </span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">75</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"家用电器"</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"isParent"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"sort"</span>: <span class="number">3</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>对应的java类型可以是List集合，里面的元素就是类目对象了。也就是<code>List&lt;Category&gt;</code></p>
</li>
</ul>
<p>添加Controller：</p>
<p> <img src="/images/day06/1530450599897.png" alt="1530450599897"></p>
<p>controller代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"category"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父id查询子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Category&gt;&gt; queryCategoriesByPid(<span class="meta">@RequestParam</span>(<span class="string">"pid"</span>) Long pid) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="keyword">null</span> || pid.longValue() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 响应400，相当于ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</span></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().build();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Category&gt; categories = <span class="keyword">this</span>.categoryService.queryCategoriesByPid(pid);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(categories)) &#123;</span><br><span class="line">            <span class="comment">// 响应404</span></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(categories);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-4-service"><a href="#4-2-4-service" class="headerlink" title="4.2.4.service"></a>4.2.4.service</h3><p>一般service层我们会定义接口和实现类，不过这里我们就偷懒一下，直接写实现类了：</p>
<p> <img src="/images/day06/1530450744567.png" alt="1530450744567"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据parentId查询子类目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryCategoriesByPid</span><span class="params">(Long pid)</span> </span>&#123;</span><br><span class="line">        Category record = <span class="keyword">new</span> Category();</span><br><span class="line">        record.setParentId(pid);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.categoryMapper.select(record);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-5-mapper"><a href="#4-2-5-mapper" class="headerlink" title="4.2.5.mapper"></a>4.2.5.mapper</h3><p>我们使用通用mapper来简化开发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要注意，我们并没有在mapper接口上声明@Mapper注解，那么mybatis如何才能找到接口呢？</p>
<p>我们在启动类上添加一个扫描包功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.leyou.item.mapper"</span>) <span class="comment">// mapper接口的包扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouItemServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LeyouItemServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-6-启动并测试"><a href="#4-2-6-启动并测试" class="headerlink" title="4.2.6.启动并测试"></a>4.2.6.启动并测试</h3><p>我们不经过网关，直接访问：<a href="http://localhost:8081/category/list" target="_blank" rel="noopener">http://localhost:8081/category/list</a></p>
<p><img src="/images/day06/1530455133230.png" alt="1530455133230"></p>
<p>然后试试网关是否畅通：<a href="http://api.leyou.com/api/item/category/list" target="_blank" rel="noopener">http://api.leyou.com/api/item/category/list</a></p>
<p><img src="/images/day06/1530455291468.png" alt="1530455291468"></p>
<p>一切OK！</p>
<p>然后刷新后台管理页面查看：</p>
<p><img src="/images/day06/1530455437899.png" alt="1530455437899"></p>
<p>发现报错了！</p>
<p>浏览器直接访问没事，但是这里却报错，什么原因？</p>
<p>这其实是浏览器的同源策略造成的跨域问题。</p>
<h1 id="5-跨域问题"><a href="#5-跨域问题" class="headerlink" title="5.跨域问题"></a>5.跨域问题</h1><p>跨域：浏览器对于javascript的同源策略的限制 。</p>
<p>以下情况都属于跨域：</p>
<table>
<thead>
<tr>
<th>跨域原因说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>域名不同</td>
<td><code>www.jd.com</code> 与 <code>www.taobao.com</code></td>
</tr>
<tr>
<td>域名相同，端口不同</td>
<td><code>www.jd.com:8080</code> 与 <code>www.jd.com:8081</code></td>
</tr>
<tr>
<td>二级域名不同</td>
<td><code>item.jd.com</code> 与 <code>miaosha.jd.com</code></td>
</tr>
</tbody></table>
<p>如果<strong>域名和端口都相同，但是请求路径不同</strong>，不属于跨域，如：</p>
<p><code>www.jd.com/item</code> </p>
<p><code>www.jd.com/goods</code></p>
<p>http和https也属于跨域</p>
<p>而我们刚才是从<code>manage.leyou.com</code>去访问<code>api.leyou.com</code>，这属于二级域名不同，跨域了。</p>
<h2 id="5-1-为什么有跨域问题？"><a href="#5-1-为什么有跨域问题？" class="headerlink" title="5.1.为什么有跨域问题？"></a>5.1.为什么有跨域问题？</h2><p>跨域不一定都会有跨域问题。</p>
<p>因为跨域问题是浏览器对于ajax请求的一种安全限制：<strong>一个页面发起的ajax请求，只能是与当前页域名相同的路径</strong>，这能有效的阻止跨站攻击。</p>
<p>因此：<strong>跨域问题 是针对ajax的一种限制</strong>。</p>
<p>但是这却给我们的开发带来了不便，而且在实际生产环境中，肯定会有很多台服务器之间交互，地址和端口都可能不同，怎么办？</p>
<h2 id="5-2-解决跨域问题的方案"><a href="#5-2-解决跨域问题的方案" class="headerlink" title="5.2.解决跨域问题的方案"></a>5.2.解决跨域问题的方案</h2><p>目前比较常用的跨域解决方案有3种：</p>
<ul>
<li><p>Jsonp</p>
<p>最早的解决方案，利用script标签可以跨域的原理实现。</p>
<p>限制：</p>
<ul>
<li>需要服务的支持</li>
<li>只能发起GET请求</li>
</ul>
</li>
<li><p>nginx反向代理</p>
<p>思路是：利用nginx把跨域反向代理为不跨域，支持各种请求方式</p>
<p>缺点：需要在nginx进行额外配置，语义不清晰 </p>
</li>
<li><p>CORS</p>
<p>规范化的跨域请求解决方案，安全可靠。</p>
<p>优势：</p>
<ul>
<li>在服务端进行控制是否允许跨域，可自定义规则</li>
<li>支持各种请求方式</li>
</ul>
<p>缺点：</p>
<ul>
<li>会产生额外的请求</li>
</ul>
</li>
</ul>
<p>我们这里会采用cors的跨域方案。</p>
<h2 id="5-3-cors解决跨域"><a href="#5-3-cors解决跨域" class="headerlink" title="5.3.cors解决跨域"></a>5.3.cors解决跨域</h2><h3 id="5-3-1-什么是cors"><a href="#5-3-1-什么是cors" class="headerlink" title="5.3.1.什么是cors"></a>5.3.1.什么是cors</h3><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>
<p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">同源</a>使用的限制。</p>
<p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<ul>
<li><p>浏览器端：</p>
<p>目前，所有浏览器都支持该功能（IE10以下不行）。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。</p>
</li>
<li><p>服务端：</p>
<p>CORS通信与AJAX没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，我们需要以此判断是否允许其跨域，然后在响应头中加入一些信息即可。这一般通过过滤器完成即可。</p>
</li>
</ul>
<h3 id="5-3-2-原理有点复杂"><a href="#5-3-2-原理有点复杂" class="headerlink" title="5.3.2.原理有点复杂"></a>5.3.2.原理有点复杂</h3><p>浏览器会将ajax请求分为两类，其处理方案略有差异：简单请求、特殊请求。</p>
<h4 id="5-3-2-1-简单请求"><a href="#5-3-2-1-简单请求" class="headerlink" title="5.3.2.1.简单请求"></a>5.3.2.1.简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求。：</p>
<p>（1) 请求方法是以下三种方法之一：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>（2）HTTP的头信息不超出以下几种字段：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li>
</ul>
<p>当浏览器发现发起的ajax请求是简单请求时，会在请求头中携带一个字段：<code>Origin</code>.</p>
<p><img src="/images/day06/1530460311064.png" alt="1530460311064"></p>
<p>Origin中会指出当前请求属于哪个域（协议+域名+端口）。服务会根据这个值决定是否允许其跨域。</p>
<p>如果服务器允许跨域，需要在返回的响应头中携带下面信息：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>

<ul>
<li>Access-Control-Allow-Origin：可接受的域，是一个具体域名或者*（代表任意域名）</li>
<li>Access-Control-Allow-Credentials：是否允许携带cookie，默认情况下，cors不会携带cookie，除非这个值是true</li>
</ul>
<blockquote>
<p>有关cookie：</p>
</blockquote>
<p>要想操作cookie，需要满足3个条件：</p>
<ul>
<li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。</li>
<li>浏览器发起ajax需要指定withCredentials 为true</li>
<li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名</li>
</ul>
<h4 id="5-3-2-2-特殊请求"><a href="#5-3-2-2-特殊请求" class="headerlink" title="5.3.2.2.特殊请求"></a>5.3.2.2.特殊请求</h4><p>不符合简单请求的条件，会被浏览器判定为特殊请求,，例如请求方式为PUT。</p>
<blockquote>
<p>预检请求</p>
</blockquote>
<p>特殊请求会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p>
<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p>
<p>一个“预检”请求的样板：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span>: PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Host</span>: api.leyou.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure>

<p>与简单请求相比，除了Origin以外，多了两个头：</p>
<ul>
<li>Access-Control-Request-Method：接下来会用到的请求方式，比如PUT</li>
<li>Access-Control-Request-Headers：会额外用到的头信息</li>
</ul>
<blockquote>
<p>预检请求的响应</p>
</blockquote>
<p>服务的收到预检请求，如果许可跨域，会发出响应：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 1728000</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure>

<p>除了<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Credentials</code>以外，这里又额外多出3个头：</p>
<ul>
<li>Access-Control-Allow-Methods：允许访问的方式</li>
<li>Access-Control-Allow-Headers：允许携带的头</li>
<li>Access-Control-Max-Age：本次许可的有效时长，单位是秒，<strong>过期之前的ajax请求就无需再次进行预检了</strong></li>
</ul>
<p>如果浏览器得到上述响应，则认定为可以跨域，后续就跟简单请求的处理是一样的了。</p>
<h3 id="5-3-3-实现非常简单"><a href="#5-3-3-实现非常简单" class="headerlink" title="5.3.3.实现非常简单"></a>5.3.3.实现非常简单</h3><p>虽然原理比较复杂，但是前面说过：</p>
<ul>
<li>浏览器端都有浏览器自动完成，我们无需操心</li>
<li>服务端可以通过拦截器统一实现，不必每次都去进行跨域判定的编写。</li>
</ul>
<p>事实上，SpringMVC已经帮我们写好了CORS的跨域过滤器：CorsFilter ,内部已经实现了刚才所讲的判定逻辑，我们直接用就好了。</p>
<p>在<code>leyou-gateway</code>中编写一个配置类，并且注册CorsFilter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://manage.leyou.com"</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"HEAD"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"GET"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PUT"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PATCH"</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构：</p>
<p> <img src="/images/day06/1530462650711.png" alt="1530462650711"></p>
<p>重启测试，访问正常：</p>
<p><img src="/images/day06/1530463010927.png" alt="1530463010927"></p>
<p>分类的增删改功能暂时就不做了，页面已经预留好了事件接口，有兴趣的同学可以完成一下。</p>
<h1 id="6-品牌的查询"><a href="#6-品牌的查询" class="headerlink" title="6.品牌的查询"></a>6.品牌的查询</h1><p>商品分类完成以后，自然轮到了品牌功能了。</p>
<p>先看看我们要实现的效果：</p>
<p><img src="/images/day06/1526021968036.png" alt="1526021968036"></p>
<p>点击“品牌管理”菜单：</p>
<p><img src="/images/day06/1545221218980.png" alt="1545221218980"></p>
<p>路由路径：/item/brand</p>
<p>根据路由文件知，对应的页面是：src/pages/item/Brand.vue</p>
<p>页面会发送如下请求：</p>
<p><img src="/images/day06/1543066995215.png" alt="1543066995215"></p>
<h2 id="6-1-后台提供查询接口"><a href="#6-1-后台提供查询接口" class="headerlink" title="6.1.后台提供查询接口"></a>6.1.后台提供查询接口</h2><p>前台页面已经准备好，接下来就是后台提供数据接口了。</p>
<h3 id="6-1-1-数据库表"><a href="#6-1-1-数据库表" class="headerlink" title="6.1.1.数据库表"></a>6.1.1.数据库表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_brand` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;品牌id&apos;,</span><br><span class="line">  `name` varchar(50) NOT NULL COMMENT &apos;品牌名称&apos;,</span><br><span class="line">  `image` varchar(200) DEFAULT &apos;&apos; COMMENT &apos;品牌图片地址&apos;,</span><br><span class="line">  `letter` char(1) DEFAULT &apos;&apos; COMMENT &apos;品牌的首字母&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=325400 DEFAULT CHARSET=utf8 COMMENT=&apos;品牌表，一个品牌下有多个商品（spu），一对多关系&apos;;</span><br></pre></td></tr></table></figure>

<p>简单的四个字段，不多解释。</p>
<p>这里需要注意的是，品牌和商品分类之间是多对多关系。因此我们有一张中间表，来维护两者间关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tb_category_brand` (</span><br><span class="line">  `category_id` bigint(20) NOT NULL COMMENT &apos;商品类目id&apos;,</span><br><span class="line">  `brand_id` bigint(20) NOT NULL COMMENT &apos;品牌id&apos;,</span><br><span class="line">  PRIMARY KEY (`category_id`,`brand_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商品分类和品牌的中间表，两者是多对多关系&apos;;</span><br></pre></td></tr></table></figure>

<p>但是，你可能会发现，这张表中并<strong>没有设置外键约束</strong>，似乎与数据库的设计范式不符。为什么这么做？</p>
<ul>
<li>外键会严重影响数据库读写的效率</li>
<li>数据删除时会比较麻烦</li>
</ul>
<p>在电商行业，性能是非常重要的。我们宁可在代码中通过逻辑来维护表关系，也不设置外键。</p>
<h3 id="6-1-2-实体类"><a href="#6-1-2-实体类" class="headerlink" title="6.1.2.实体类"></a>6.1.2.实体类</h3><p> <img src="/images/day06/1530541070271.png" alt="1530541070271"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_brand"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String image;<span class="comment">// 品牌图片</span></span><br><span class="line">    <span class="keyword">private</span> Character letter;</span><br><span class="line">    <span class="comment">// getter setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-3-mapper"><a href="#6-1-3-mapper" class="headerlink" title="6.1.3.mapper"></a>6.1.3.mapper</h3><p> <img src="/images/day06/1530541222679.png" alt="1530541222679"></p>
<p>通用mapper来简化开发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-4-controller"><a href="#6-1-4-controller" class="headerlink" title="6.1.4.controller"></a>6.1.4.controller</h3><p>编写controller先思考四个问题，参照前端页面的控制台</p>
<ul>
<li>请求方式：查询，肯定是Get</li>
<li>请求路径：分页查询，/brand/page</li>
<li>请求参数：根据我们刚才编写的页面，有分页功能，有排序功能，有搜索过滤功能，因此至少要有5个参数：<ul>
<li>page：当前页，int</li>
<li>rows：每页大小，int</li>
<li>sortBy：排序字段，String</li>
<li>desc：是否为降序，boolean</li>
<li>key：搜索关键词，String</li>
</ul>
</li>
<li>响应结果：分页结果一般至少需要两个数据<ul>
<li>total：总条数</li>
<li>items：当前页数据</li>
<li>totalPage：有些还需要总页数</li>
</ul>
</li>
</ul>
<p>这里我们封装一个类，来表示分页结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalPage;<span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;<span class="comment">// 当前页数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, Long totalPage, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(Long total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(Long totalPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，这个PageResult以后可能在其它项目中也有需求，因此我们将其抽取到<code>leyou-common</code>中，提高复用性：</p>
<p> <img src="/images/day06/1530543778541.png" alt="1530543778541"></p>
<p><strong>不要忘记在leyou-item-service工程的pom.xml中引入leyou-common的依赖</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来，我们编写Controller</p>
<p> <img src="/images/day06/1530549253999.png" alt="1530549253999"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"brand"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandService brandService;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据查询条件分页并排序查询品牌信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sortBy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;Brand&gt;&gt; queryBrandsByPage(</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"key"</span>, required = <span class="keyword">false</span>)String key,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)Integer page,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"rows"</span>, defaultValue = <span class="string">"5"</span>)Integer rows,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"sortBy"</span>, required = <span class="keyword">false</span>)String sortBy,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"desc"</span>, required = <span class="keyword">false</span>)Boolean desc</span><br><span class="line">    )&#123;</span><br><span class="line">        PageResult&lt;Brand&gt; result = <span class="keyword">this</span>.brandService.queryBrandsByPage(key, page, rows, sortBy, desc);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(result.getItems()))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-5-Service"><a href="#6-1-5-Service" class="headerlink" title="6.1.5.Service"></a>6.1.5.Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandMapper brandMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据查询条件分页并排序查询品牌信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sortBy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult&lt;Brand&gt; <span class="title">queryBrandsByPage</span><span class="params">(String key, Integer page, Integer rows, String sortBy, Boolean desc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化example对象</span></span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Brand<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据name模糊查询，或者根据首字母查询</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(key)) &#123;</span><br><span class="line">            criteria.andLike(<span class="string">"name"</span>, <span class="string">"%"</span> + key + <span class="string">"%"</span>).orEqualTo(<span class="string">"letter"</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加分页条件</span></span><br><span class="line">        PageHelper.startPage(page, rows);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加排序条件</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(sortBy)) &#123;</span><br><span class="line">            example.setOrderByClause(sortBy + <span class="string">" "</span> + (desc ? <span class="string">"desc"</span> : <span class="string">"asc"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Brand&gt; brands = <span class="keyword">this</span>.brandMapper.selectByExample(example);</span><br><span class="line">        <span class="comment">// 包装成pageInfo</span></span><br><span class="line">        PageInfo&lt;Brand&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(brands);</span><br><span class="line">        <span class="comment">// 包装成分页结果集返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(pageInfo.getTotal(), pageInfo.getList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-6-测试"><a href="#6-1-6-测试" class="headerlink" title="6.1.6.测试"></a>6.1.6.测试</h3><p>通过浏览器访问试试：<a href="http://api.leyou.com/api/item/brand/page" target="_blank" rel="noopener">http://api.leyou.com/api/item/brand/page</a></p>
<p><img src="/images/day06/1530549095150.png" alt="1530549095150"></p>
<p>接下来，去页面请求数据并渲染</p>
<h2 id="6-2-异步查询工具axios"><a href="#6-2-异步查询工具axios" class="headerlink" title="6.2.异步查询工具axios"></a>6.2.异步查询工具axios</h2><p>异步查询数据，自然是通过ajax查询，大家首先想起的肯定是jQuery。但jQuery与MVVM的思想不吻合，而且ajax只是jQuery的一小部分。因此不可能为了发起ajax请求而去引用这么大的一个库。</p>
<h3 id="6-2-1-axios入门"><a href="#6-2-1-axios入门" class="headerlink" title="6.2.1.axios入门"></a>6.2.1.axios入门</h3><p>Vue官方推荐的ajax请求框架叫做：axios，看下demo：</p>
<p> <img src="/images/day06/1526033988251.png" alt="1526033988251"></p>
<p>axios的Get请求语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">"/item/category/list?pid=0"</span>) <span class="comment">// 请求路径和请求参数拼接</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    	<span class="comment">// 成功回调函数</span></span><br><span class="line">	&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="comment">// 失败回调函数</span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">// 参数较多时，可以通过params来传递参数</span></span><br><span class="line">axios.get(<span class="string">"/item/category/list"</span>, &#123;</span><br><span class="line">        params:&#123;</span><br><span class="line">            pid:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">	&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;&#125;)<span class="comment">// 成功时的回调</span></span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;&#125;)<span class="comment">// 失败时的回调</span></span><br></pre></td></tr></table></figure>

<p>axios的POST请求语法：</p>
<p>比如新增一个用户</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">"/user"</span>,&#123;</span><br><span class="line">    	name:<span class="string">"Jack"</span>,</span><br><span class="line">    	age:<span class="number">21</span></span><br><span class="line">	&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>注意，POST请求传参，不需要像GET请求那样定义一个对象，在对象的params参数中传参。post()方法的第二个参数对象，就是将来要传递的参数</p>
<p>PUT和DELETE请求与POST请求类似</p>
<h3 id="6-2-2-axios的全局配置"><a href="#6-2-2-axios的全局配置" class="headerlink" title="6.2.2.axios的全局配置"></a>6.2.2.axios的全局配置</h3><p>而在我们的项目中，已经引入了axios，并且进行了简单的封装，在src下的http.js中：</p>
<p> <img src="/images/day06/1526034150067.png" alt="1526034150067"></p>
<p>http.js中对axios进行了一些默认配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"><span class="comment">// config中定义的基础路径是：http://api.leyou.com/api</span></span><br><span class="line">axios.defaults.baseURL = config.api; <span class="comment">// 设置axios的基础请求路径</span></span><br><span class="line">axios.defaults.timeout = <span class="number">2000</span>; <span class="comment">// 设置axios的请求时间</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$http = axios;<span class="comment">// 将axios赋值给Vue原型的$http属性，这样所有vue实例都可使用该对象</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>http.js中导入了config的配置，还记得吗？</p>
<p>   <img src="/images/day06/1526041205846.png" alt="1526041205846"></p>
</li>
<li><p>http.js对axios进行了全局配置：<code>baseURL=config.api</code>，即<code>http://api.leyou.com/api</code>。因此以后所有用axios发起的请求，都会以这个地址作为前缀。</p>
</li>
<li><p>通过<code>Vue.property.$http = axios</code>，将<code>axios</code>赋值给了 Vue原型中的<code>$http</code>。这样以后所有的Vue实例都可以访问到$http，也就是访问到了axios了。</p>
</li>
</ul>
<h3 id="6-2-3-项目中使用"><a href="#6-2-3-项目中使用" class="headerlink" title="6.2.3.项目中使用"></a>6.2.3.项目中使用</h3><p>我们在组件<code>Brand.vue</code>的getDataFromServer方法，通过$http发起get请求，测试查询品牌的接口，看是否能获取到数据：</p>
<p><img src="/images/day06/1543067111272.png" alt="1543067111272"></p>
<p>网络监视：</p>
<p> <img src="/images/day06/1526048143014.png" alt="1526048143014"></p>
<p>resp到底都有那些数据，查看控制台结果：</p>
<p><img src="/images/day06/1526048275064.png" alt="1526048275064"></p>
<p>可以看到，在请求成功的返回结果response中，有一个data属性，里面就是真正的响应数据。</p>
<p>响应结果中与我们设计的一致，包含3个内容：</p>
<ul>
<li>total：总条数，目前是165</li>
<li>items：当前页数据</li>
<li>totalPage：总页数，我们没有返回</li>
</ul>
<h2 id="6-3-完成分页和过滤"><a href="#6-3-完成分页和过滤" class="headerlink" title="6.3.完成分页和过滤"></a>6.3.完成分页和过滤</h2><h3 id="6-3-1-分页"><a href="#6-3-1-分页" class="headerlink" title="6.3.1.分页"></a>6.3.1.分页</h3><p>点击分页，会发起请求，通过浏览器工具查看，会发现pagination对象的属性一直在变化：</p>
<p> <img src="/images/day06/9.gif" alt></p>
<p>我们可以利用Vue的监视功能：watch，当pagination发生改变时，会调用我们的回调函数，我们在回调函数中进行数据的查询！</p>
<p>具体实现：</p>
<p><img src="/images/day06/1526049643506.png" alt="1526049643506"></p>
<p>成功实现分页功能：</p>
<p><img src="/images/day06/22.gif" alt="1526049720200"></p>
<h3 id="6-3-2-过滤"><a href="#6-3-2-过滤" class="headerlink" title="6.3.2.过滤"></a>6.3.2.过滤</h3><p>过滤字段对应的是search属性，我们只要监视这个属性即可:</p>
<p> <img src="/images/day06/1526049939985.png" alt="1526049939985"></p>
<p>查看网络请求：</p>
<p> <img src="/images/day06/1526050032436.png" alt="1526050032436"></p>
<p>页面结果：</p>
<p><img src="/images/day06/1530555740595.png" alt="1530555740595"></p>

    <div id="aplayer-EUeVfpLW" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1401656653" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>

]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue入门知识</title>
    <url>/2019/12/02/day05-vue%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul>
<li>会创建Vue实例，知道Vue的常见属性</li>
<li>会使用Vue的生命周期的钩子函数</li>
<li>会使用vue常见指令</li>
<li>会使用vue计算属性和watch监控</li>
<li>会编写Vue组件</li>
<li>掌握组件间通信</li>
<li>了解vue-router使用</li>
</ul>
<a id="more"></a>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>前几天我们已经对后端的技术栈有了初步的了解、并且已经搭建了整个后端微服务的平台。接下来要做的事情就是功能开发了。但是没有前端页面，我们肯定无从下手，因此今天我们就要来了解一下前端的一些技术，完成前端页面搭建。</p>
<p>先聊一下前端开发模式的发展。</p>
<blockquote>
<p>静态页面</p>
</blockquote>
<p>最初的网页以HTML为主，是纯静态的网页。网页是只读的，信息流只能从服务端到客户端单向流通。<strong>开发人员也只关心页面的样式和内容</strong>即可。</p>
<blockquote>
<p>异步刷新，操作DOM</p>
</blockquote>
<p>1995年，网景工程师Brendan Eich 花了10天时间设计了JavaScript语言.</p>
<p>随着JavaScript的诞生，我们可以操作页面的DOM元素及样式，页面有了一些动态的效果，但是依然是以静态为主。</p>
<p>ajax盛行：</p>
<ul>
<li>2005年开始，ajax逐渐被前端开发人员所重视，因为不用刷新页面就可以更新页面的数据和渲染效果。</li>
<li>此时的<strong>开发人员不仅仅要编写HTML样式，还要懂ajax与后端交互，然后通过JS操作Dom元素来实现页面动态效果</strong>。比较流行的框架如Jquery就是典型代表。</li>
</ul>
<blockquote>
<p>MVVM，关注模型和视图</p>
</blockquote>
<p>2008年，google的Chrome发布，随后就以极快的速度占领市场，超过IE成为浏览器市场的主导者。</p>
<p>2009年，Ryan Dahl在谷歌的Chrome V8引擎基础上，打造了基于事件循环的异步IO框架：Node.js。</p>
<ul>
<li>基于事件循环的异步IO</li>
<li>单线程运行，避免多线程的变量同步问题</li>
<li>JS可以编写后台代码，前后台统一编程语言 </li>
</ul>
<p>node.js的伟大之处不在于让JS迈向了后端开发，而是构建了一个庞大的生态系统。</p>
<p>2010年，NPM作为node.js的包管理系统首次发布，开发人员可以遵循Common.js规范来编写Node.js模块，然后发布到NPM上供其他开发人员使用。目前已经是世界最大的包模块管理系统。</p>
<p>随后，在node的基础上，涌现出了一大批的前端框架：</p>
<p> <img src="/images/vue/1525825983230.png" alt="1525825983230"></p>
<blockquote>
<p>MVVM模式</p>
</blockquote>
<ul>
<li>M：即Model，模型，包括数据和一些基本操作</li>
<li>V：即View，视图，页面渲染结果</li>
<li>VM：即View-Model，模型与视图间的双向操作（无需开发人员干涉）</li>
</ul>
<p>在MVVM之前，开发人员从后端获取需要的数据模型，然后要通过DOM操作Model渲染到View中。而后当用户操作视图，我们还需要通过DOM获取View中的数据，然后同步到Model中。</p>
<p>而MVVM中的VM要做的事情就是把DOM操作完全封装起来，开发人员不用再关心Model和View之间是如何互相影响的：</p>
<ul>
<li>只要我们Model发生了改变，View上自然就会表现出来。</li>
<li>当用户修改了View，Model中的数据也会跟着改变。</li>
</ul>
<p>把开发人员从繁琐的DOM操作中解放出来，把关注点放在如何操作Model上。</p>
<p> <img src="/images/vue/1525828854056.png" alt="1525828854056"></p>
<p>而我们今天要学习的，就是一款MVVM模式的框架：Vue</p>
<h1 id="1-认识Vue"><a href="#1-认识Vue" class="headerlink" title="1.认识Vue"></a>1.认识Vue</h1><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noopener">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<pre><code>前端框架三巨头：Vue.js、React.js、AngularJS，vue.js以其轻量易用著称，vue.js和React.js发展速度最快，AngularJS还是老大。</code></pre><p>官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>
<p>参考：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p>
<p><img src="/images/vue/1525829249048.png" alt="1525829249048"></p>
<p>Git地址：<a href="https://github.com/vuejs" target="_blank" rel="noopener">https://github.com/vuejs</a></p>
<p><img src="/images/vue/1525829030730.png" alt="1525829030730"></p>
<p><strong>尤雨溪</strong>，Vue.js 创作者，Vue Technology创始人，致力于Vue的研究开发。</p>
<h1 id="2-Node和NPM"><a href="#2-Node和NPM" class="headerlink" title="2.Node和NPM"></a>2.Node和NPM</h1><p>前面说过，NPM是Node提供的模块管理工具，可以非常方便的下载安装很多前端框架，包括Jquery、AngularJS、VueJs都有。为了后面学习方便，我们先安装node及NPM工具。</p>
<h2 id="2-1-下载Node-js"><a href="#2-1-下载Node-js" class="headerlink" title="2.1.下载Node.js"></a>2.1.下载Node.js</h2><p>下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<p><img src="/images/vue/1529594451775.png" alt="1529594451775"></p>
<p>推荐下载LTS版本。</p>
<p>课程中采用的是8.11.3版本。也是目前最新的。大家自行下载或者使用课前资料中提供的安装包。然后下一步安装即可。</p>
<p>完成以后，在控制台输入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<p>看到版本信息：</p>
<p><img src="/images/vue/1529595770482.png" alt="1529595770482"></p>
<h2 id="2-2-NPM"><a href="#2-2-NPM" class="headerlink" title="2.2.NPM"></a>2.2.NPM</h2><p>Node自带了NPM了，在控制台输入<code>npm -v</code>查看：</p>
<p><img src="/images/vue/1529595810923.png" alt="1529595810923"></p>
<p>npm默认的仓库地址是在国外网站，速度较慢，建议大家设置到淘宝镜像。但是切换镜像是比较麻烦的。推荐一款切换镜像的工具：nrm</p>
<p>我们首先安装nrm，这里<code>-g</code>代表全局安装。可能需要一点儿时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install nrm -g</span><br></pre></td></tr></table></figure>

<p><img src="/images/vue/1529596099952.png" alt="1529596099952"></p>
<p>然后通过<code>nrm ls</code>命令查看npm的仓库列表<br><img src="/images/vue/1529596219439.png" alt="1529596219439"><br>通过<code>nrm use taobao</code>来指定要使用的像源：<br><img src="/images/vue/1529596312671.png" alt="1529596312671"></p>
<p>然后通过<code>nrm test npm</code>来测试速度：</p>
<p><img src="/images/vue/1529596566134.png" alt="1529596566134"></p>
<p>注意：</p>
<ul>
<li>有教程推荐大家使用cnpm命令，但是使用发现cnpm有时会有bug，不推荐。</li>
<li>安装完成请一定要重启下电脑！！！</li>
<li>安装完成请一定要重启下电脑！！！</li>
<li>安装完成请一定要重启下电脑！！！</li>
</ul>
<h1 id="3-快速入门"><a href="#3-快速入门" class="headerlink" title="3.快速入门"></a>3.快速入门</h1><p>接下来，我们快速领略下vue的魅力</p>
<h2 id="3-1-创建工程"><a href="#3-1-创建工程" class="headerlink" title="3.1.创建工程"></a>3.1.创建工程</h2><p>创建一个新的空工程：</p>
<p><img src="/images/vue/1529596874127.png" alt="1529596874127"></p>
<p><img src="/images/vue/1529597228506.png" alt="1529597228506"></p>
<p>然后新建一个module：</p>
<p><img src="/images/vue/1529597325121.png" alt="1529597325121"></p>
<p>选中static web，静态web项目：</p>
<p><img src="/images/vue/1529597573453.png" alt="1529597573453"></p>
<p>位置信息：</p>
<p><img src="/images/vue/1529597672429.png" alt="1529597672429"></p>
<h2 id="3-2-安装vue"><a href="#3-2-安装vue" class="headerlink" title="3.2.安装vue"></a>3.2.安装vue</h2><h3 id="3-2-1-下载安装"><a href="#3-2-1-下载安装" class="headerlink" title="3.2.1.下载安装"></a>3.2.1.下载安装</h3><p>下载地址：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a></p>
<p>可以下载2.5.16版本<a href="https://github.com/vuejs/vue/archive/v2.5.16.zip" target="_blank" rel="noopener">https://github.com/vuejs/vue/archive/v2.5.16.zip</a></p>
<p>下载解压，得到vue.js文件。</p>
<h3 id="3-2-2-使用CDN"><a href="#3-2-2-使用CDN" class="headerlink" title="3.2.2.使用CDN"></a>3.2.2.使用CDN</h3><p>或者也可以直接使用公共的CDN服务：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了用帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-推荐npm安装"><a href="#3-2-3-推荐npm安装" class="headerlink" title="3.2.3.推荐npm安装"></a>3.2.3.推荐npm安装</h3><p>在idea的左下角，有个Terminal按钮，点击打开控制台：</p>
<p><img src="/images/vue/1529598030268.png" alt="1529598030268"></p>
<p>进入hello-vue目录，先输入：<code>npm init -y</code> 进行初始化</p>
<p><img src="/images/vue/1529598244471.png" alt="1529598244471"></p>
<p>安装Vue，输入命令：<code>npm install vue --save</code></p>
<p><img src="/images/vue/1529598444504.png" alt="1529598444504"></p>
<p>然后就会在hello-vue目录发现一个node_modules目录，并且在下面有一个vue目录。</p>
<p> <img src="/images/vue/1529602488684.png" alt="1529602488684"></p>
<p>node_modules是通过npm安装的所有模块的默认位置。</p>
<h2 id="3-3-vue入门案例"><a href="#3-3-vue入门案例" class="headerlink" title="3.3.vue入门案例"></a>3.3.vue入门案例</h2><h3 id="3-3-1-HTML模板"><a href="#3-3-1-HTML模板" class="headerlink" title="3.3.1.HTML模板"></a>3.3.1.HTML模板</h3><p>在hello-vue目录新建一个HTML</p>
<p><img src="/images/vue/1529719572523.png" alt="1529719572523"></p>
<p>在hello.html中，我们编写一段简单的代码：</p>
<p><img src="/images/vue/1529719673944.png" alt="1529719673944"></p>
<p>h2中要输出一句话：xx 非常帅。前面的xx是要渲染的数据。</p>
<h3 id="3-3-2-vue声明式渲染"><a href="#3-3-2-vue声明式渲染" class="headerlink" title="3.3.2.vue声明式渲染"></a>3.3.2.vue声明式渲染</h3><p>然后我们通过Vue进行渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;，非常帅！！！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建vue实例</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>, <span class="comment">// el即element，该vue实例要渲染的页面元素</span></span></span><br><span class="line"><span class="actionscript">        data:&#123; <span class="comment">// 渲染页面需要的数据</span></span></span><br><span class="line"><span class="actionscript">            name: <span class="string">"峰哥"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>首先通过 new Vue()来创建Vue实例</li>
<li>然后构造函数接收一个对象，对象中有一些属性：<ul>
<li>el：是element的缩写，通过id选中要渲染的页面元素，本例中是一个div</li>
<li>data：数据，数据是一个对象，里面有很多属性，都可以渲染到视图中<ul>
<li>name：这里我们指定了一个name属性</li>
</ul>
</li>
</ul>
</li>
<li>页面中的<code>h2</code>元素中，我们通过的方式，来渲染刚刚定义的name属性。</li>
</ul>
<p>打开页面查看效果：</p>
<p><img src="/images/vue/1529722898366.png" alt="1529722898366"></p>
<p>更神奇的在于，当你修改name属性时，页面会跟着变化：</p>
<p><img src="/images/vue/1529723206508.png" alt="1529723206508"></p>
<h3 id="3-3-3-双向绑定"><a href="#3-3-3-双向绑定" class="headerlink" title="3.3.3.双向绑定"></a>3.3.3.双向绑定</h3><p>我们对刚才的案例进行简单修改：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">            &#123;&#123;name&#125;&#125;，非常帅！！！有&#123;&#123;num&#125;&#125;位女神为他着迷。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建vue实例</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>, <span class="comment">// el即element，该vue实例要渲染的页面元素</span></span></span><br><span class="line"><span class="actionscript">        data: &#123; <span class="comment">// 渲染页面需要的数据</span></span></span><br><span class="line"><span class="actionscript">            name: <span class="string">"峰哥"</span>,</span></span><br><span class="line">            num: 5</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们在data添加了新的属性：<code>num</code></li>
<li>在页面中有一个<code>input</code>元素，通过<code>v-model</code>与<code>num</code>进行绑定。</li>
<li>同时通过<code></code>在页面输出</li>
</ul>
<p>效果：</p>
<p><img src="/images/vue/52.gif" alt="1529723206508"></p>
<p>我们可以观察到，输入框的变化引起了data中的num的变化，同时页面输出也跟着变化。</p>
<ul>
<li>input与num绑定，input的value值变化，影响到了data中的num值</li>
<li>页面<code></code>与数据num绑定，因此num值变化，引起了页面效果变化。</li>
</ul>
<p>没有任何dom操作，这就是双向绑定的魅力。</p>
<h3 id="3-3-4-事件处理"><a href="#3-3-4-事件处理" class="headerlink" title="3.3.4.事件处理"></a>3.3.4.事件处理</h3><p>我们在页面添加一个按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里用<code>v-on</code>指令绑定点击事件，而不是普通的<code>onclick</code>，然后直接操作num</li>
<li>普通click是无法直接操作num的。</li>
</ul>
<p>效果：</p>
<p><img src="/images/vue/53.gif" alt></p>
<h1 id="4-Vue实例"><a href="#4-Vue实例" class="headerlink" title="4.Vue实例"></a>4.Vue实例</h1><h2 id="4-1-创建Vue实例"><a href="#4-1-创建Vue实例" class="headerlink" title="4.1.创建Vue实例"></a>4.1.创建Vue实例</h2><p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在构造函数中传入一个对象，并且在对象中声明各种Vue需要的数据和方法，包括：</p>
<ul>
<li>el</li>
<li>data</li>
<li>methods</li>
</ul>
<p>等等</p>
<p>接下来我们一 一介绍。</p>
<h2 id="4-2-模板或元素"><a href="#4-2-模板或元素" class="headerlink" title="4.2.模板或元素"></a>4.2.模板或元素</h2><p>每个Vue实例都需要关联一段Html模板，Vue会基于此模板进行视图渲染。</p>
<p>我们可以通过el属性来指定。</p>
<p>例如一段html模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后创建Vue实例，关联这个div</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el:<span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样，Vue就可以基于id为<code>app</code>的div元素作为模板进行渲染了。在这个div范围以外的部分是无法使用vue特性的。</p>
<h2 id="4-3-数据"><a href="#4-3-数据" class="headerlink" title="4.3.数据"></a>4.3.数据</h2><p>当Vue实例被创建时，它会尝试获取在data中定义的所有属性，用于视图的渲染，并且监视data中的属性变化，当data发生改变，所有相关的视图都将重新渲染，这就是“响应式“系统。</p>
<p>html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:<span class="string">"刘德华"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>name的变化会影响到<code>input</code>的值</li>
<li>input中输入的值，也会导致vm中的name发生改变</li>
</ul>
<h2 id="4-4-方法"><a href="#4-4-方法" class="headerlink" title="4.4.方法"></a>4.4.方法</h2><p>Vue实例中除了可以定义data属性，也可以定义方法，并且在Vue实例的作用范围内使用。</p>
<p>html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        num: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// this代表的当前vue实例</span></span><br><span class="line">            <span class="keyword">this</span>.num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-5-生命周期钩子"><a href="#4-5-生命周期钩子" class="headerlink" title="4.5.生命周期钩子"></a>4.5.生命周期钩子</h2><h3 id="4-5-1-生命周期"><a href="#4-5-1-生命周期" class="headerlink" title="4.5.1.生命周期"></a>4.5.1.生命周期</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 ：创建实例，装载模板，渲染模板等等。Vue为生命周期中的每个状态都设置了钩子函数（监听函数）。每当Vue实例处于不同的生命周期时，对应的函数就会被触发调用。</p>
<p>生命周期：</p>
<p><img src="/images/vue/lifecycle.png" alt="Vue life cycle"></p>
<h3 id="4-5-2-钩子函数"><a href="#4-5-2-钩子函数" class="headerlink" title="4.5.2.钩子函数"></a>4.5.2.钩子函数</h3><p>beforeCreated：我们在用Vue时都要进行实例化，因此，该函数就是在Vue实例化时调用，也可以将他理解为初始化函数比较方便一点，在Vue1.0时，这个函数的名字就是init。 </p>
<p>created：在创建实例之后进行调用。 </p>
<p>beforeMount：页面加载完成，没有渲染。如：此时页面还是</p>
<p>mounted：我们可以将他理解为原生js中的window.onload=function({.,.}),或许大家也在用jquery，所以也可以理解为jquery中的$(document).ready(function(){….})，他的功能就是：在dom文档渲染完毕之后将要执行的函数，该函数在Vue1.0版本中名字为compiled。 此时页面中的已被渲染成峰哥</p>
<p>beforeDestroy：该函数将在销毁实例前进行调用 。</p>
<p>destroyed：改函数将在销毁实例时进行调用。</p>
<p>beforeUpdate：组件更新之前。</p>
<p>updated：组件更新之后。</p>
<p>例如：created代表在vue实例创建后；</p>
<p>我们可以在Vue中定义一个created函数，代表这个时期的钩子函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建vue实例</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>, <span class="comment">// el即element，该vue实例要渲染的页面元素</span></span><br><span class="line">    data: &#123; <span class="comment">// 渲染页面需要的数据</span></span><br><span class="line">        name: <span class="string">"峰哥"</span>,</span><br><span class="line">        num: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.num--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/vue/1529835200236.png" alt="1529835200236"></p>
<h3 id="4-5-3-this"><a href="#4-5-3-this" class="headerlink" title="4.5.3.this"></a>4.5.3.this</h3><p>我们可以看下在vue内部的this变量是谁，我们在created的时候，打印this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num--;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p> 控制台的输出：</p>
<p><img src="/images/vue/1529835379275.png" alt="1529835379275"></p>
<h1 id="5-指令"><a href="#5-指令" class="headerlink" title="5.指令"></a>5.指令</h1><p>什么是指令？</p>
<p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊特性。指令特性的预期值是：<strong>单个 JavaScript 表达式</strong>。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。 </p>
<p>例如我们在入门案例中的v-on，代表绑定事件。</p>
<h2 id="5-1-插值表达式"><a href="#5-1-插值表达式" class="headerlink" title="5.1.插值表达式"></a>5.1.插值表达式</h2><h3 id="5-1-1-花括号"><a href="#5-1-1-花括号" class="headerlink" title="5.1.1.花括号"></a>5.1.1.花括号</h3><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;表达式&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>该表达式支持JS语法，可以调用js内置函数（必须有返回值）</li>
<li>表达式必须有返回结果。例如 1 + 1，没有结果的表达式不允许使用，如：var a = 1 + 1;</li>
<li>可以直接获取Vue实例中定义的数据或函数</li>
</ul>
<p>示例：</p>
<p>HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JS:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:<span class="string">"Jack"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5-1-2-插值闪烁"><a href="#5-1-2-插值闪烁" class="headerlink" title="5.1.2.插值闪烁"></a>5.1.2.插值闪烁</h3><p>使用双花括号方式在网速较慢时会出现问题。在数据未加载完成时，页面会显示出原始的<code>双花括号</code>，加载完毕后才显示正确数据，我们称为插值闪烁。</p>
<p>我们将网速调慢一些，然后试试看刚才的案例：</p>
<p><img src="/images/vue/1529836021593.png" alt="1529836021593"></p>
<p>刷新页面：</p>
<p><img src="/images/vue/54.gif" alt></p>
<h3 id="5-1-3-v-text和v-html"><a href="#5-1-3-v-text和v-html" class="headerlink" title="5.1.3.v-text和v-html"></a>5.1.3.v-text和v-html</h3><p>使用v-text和v-html指令来替代<code>双花括号</code></p>
<p>说明：</p>
<ul>
<li>v-text：将数据输出到元素内部，如果输出的数据有HTML代码，会作为普通文本输出</li>
<li>v-html：将数据输出到元素内部，如果输出的数据有HTML代码，会被渲染</li>
</ul>
<p>示例：</p>
<p>HTML:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    v-text:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    v-html:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JS:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        hello: <span class="string">"&lt;h1&gt;大家好，我是峰哥&lt;/h1&gt;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1529836688083.png" alt="1529836688083"></p>
<p>并且不会出现插值闪烁，当没有数据时，会显示空白。</p>
<h2 id="5-2-v-model"><a href="#5-2-v-model" class="headerlink" title="5.2.v-model"></a>5.2.v-model</h2><p>刚才的v-text和v-html可以看做是单向绑定，数据影响了视图渲染，但是反过来就不行。接下来学习的v-model是双向绑定，视图（View）和模型（Model）之间会互相影响。</p>
<p>既然是双向绑定，一定是在视图中可以修改数据，这样就限定了视图的元素类型。目前v-model的可使用元素有：</p>
<ul>
<li>input</li>
<li>select</li>
<li>textarea</li>
<li>checkbox</li>
<li>radio</li>
<li>components（Vue中的自定义组件）</li>
</ul>
<p>基本上除了最后一项，其它都是表单的输入项。</p>
<p>举例：</p>
<p>html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"language"</span> <span class="attr">value</span>=<span class="string">"Java"</span> /&gt;</span>Java<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"language"</span> <span class="attr">value</span>=<span class="string">"PHP"</span> /&gt;</span>PHP<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"language"</span> <span class="attr">value</span>=<span class="string">"Swift"</span> /&gt;</span>Swift<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        你选择了：&#123;&#123;language.join(',')&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            language: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多个<code>CheckBox</code>对应一个model时，model的类型是一个数组，单个checkbox值默认是boolean类型</li>
<li>radio对应的值是input的value值</li>
<li><code>text</code> 和<code>textarea</code> 默认对应的model是字符串</li>
<li><code>select</code>单选对应字符串，多选对应也是数组</li>
</ul>
<p>效果：</p>
<p><img src="/images/vue/1529837541201.png" alt="1529837541201"></p>
<h2 id="5-3-v-on"><a href="#5-3-v-on" class="headerlink" title="5.3.v-on"></a>5.3.v-on</h2><h3 id="5-3-1-基本用法"><a href="#5-3-1-基本用法" class="headerlink" title="5.3.1.基本用法"></a>5.3.1.基本用法</h3><p>v-on指令用于给页面元素绑定事件。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-on:事件名=&quot;js片段或函数名&quot;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事件中直接写js片段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>增加一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事件指定一个回调函数，必须是Vue实例中定义的函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"decrement"</span>&gt;</span>减少一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>有&#123;&#123;num&#125;&#125;个女神迷恋峰哥<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            num:100</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            decrement()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num--;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/55.gif" alt></p>
<p>另外，事件绑定可以简写，例如<code>v-on:click=&#39;add&#39;</code>可以简写为<code>@click=&#39;add&#39;</code></p>
<h3 id="5-3-2-事件修饰符"><a href="#5-3-2-事件修饰符" class="headerlink" title="5.3.2.事件修饰符"></a>5.3.2.事件修饰符</h3><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>
<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。修饰符是由点开头的指令后缀来表示的。</p>
<ul>
<li><code>.stop</code> ：阻止事件冒泡到父元素</li>
<li><code>.prevent</code>：阻止默认事件发生*</li>
<li><code>.capture</code>：使用事件捕获模式</li>
<li><code>.self</code>：只有元素自身触发事件才执行。（冒泡或捕获的都不执行）</li>
<li><code>.once</code>：只执行一次</li>
</ul>
<p>阻止默认事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--右击事件，并阻止默认事件发生--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:contextmenu.prevent</span>=<span class="string">"num++"</span>&gt;</span>增加一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--右击事件，不阻止默认事件发生--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:contextmenu</span>=<span class="string">"decrement($event)"</span>&gt;</span>减少一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>有&#123;&#123;num&#125;&#125;个女神迷恋峰哥<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            num: 100</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            decrement(ev) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// ev.preventDefault();</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num--;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：（右键“增加一个”，不会触发默认的浏览器右击事件；右键“减少一个”，会触发默认的浏览器右击事件）</p>
<p><img src="/images/vue/56.gif" alt></p>
<h3 id="5-3-3-按键修饰符"><a href="#5-3-3-按键修饰符" class="headerlink" title="5.3.3.按键修饰符"></a>5.3.3.按键修饰符</h3><p>在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>记住所有的 <code>keyCode</code> 比较困难，所以 Vue 为最常用的按键提供了别名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>全部的按键别名：</p>
<ul>
<li><code>.enter</code>*</li>
<li><code>.tab</code></li>
<li><code>.delete</code> (捕获“删除”和“退格”键)</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
</ul>
<h3 id="5-3-4-组合按钮"><a href="#5-3-4-组合按钮" class="headerlink" title="5.3.4.组合按钮"></a>5.3.4.组合按钮</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p>
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
</ul>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4-v-for"><a href="#5-4-v-for" class="headerlink" title="5.4.v-for"></a>5.4.v-for</h2><p>遍历数据渲染页面是非常常用的需求，Vue中通过v-for指令来实现。</p>
<h3 id="5-4-1-遍历数组"><a href="#5-4-1-遍历数组" class="headerlink" title="5.4.1.遍历数组"></a>5.4.1.遍历数组</h3><blockquote>
<p>语法：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-for=&quot;item in items&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>items：要遍历的数组，需要在vue的data中定义好。</li>
<li>item：迭代得到的数组元素的别名</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span>&gt;</span></span><br><span class="line">            &#123;&#123;user.name&#125;&#125; - &#123;&#123;user.gender&#125;&#125; - &#123;&#123;user.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            users:[</span><br><span class="line"><span class="actionscript">                &#123;name:<span class="string">'柳岩'</span>, gender:<span class="string">'女'</span>, age: <span class="number">21</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;name:<span class="string">'峰哥'</span>, gender:<span class="string">'男'</span>, age: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;name:<span class="string">'范冰冰'</span>, gender:<span class="string">'女'</span>, age: <span class="number">24</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;name:<span class="string">'刘亦菲'</span>, gender:<span class="string">'女'</span>, age: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;name:<span class="string">'古力娜扎'</span>, gender:<span class="string">'女'</span>, age: <span class="number">25</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530006198953.png" alt="1530006198953"></p>
<h3 id="5-4-2-数组角标"><a href="#5-4-2-数组角标" class="headerlink" title="5.4.2.数组角标"></a>5.4.2.数组角标</h3><p>在遍历的过程中，如果我们需要知道数组角标，可以指定第二个参数：</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-for=&quot;(item,index) in items&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>items：要迭代的数组</li>
<li>item：迭代得到的数组元素别名</li>
<li>index：迭代到的当前元素索引，从0开始。</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(user, index) in users"</span>&gt;</span></span><br><span class="line">        &#123;&#123;index + 1&#125;&#125;. &#123;&#123;user.name&#125;&#125; - &#123;&#123;user.gender&#125;&#125; - &#123;&#123;user.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果：</p>
</blockquote>
<p><img src="/images/vue/1530006094601.png" alt="1530006094601"></p>
<h3 id="5-4-3-遍历对象"><a href="#5-4-3-遍历对象" class="headerlink" title="5.4.3.遍历对象"></a>5.4.3.遍历对象</h3><p>v-for除了可以迭代数组，也可以迭代对象。语法基本类似</p>
<blockquote>
<p>语法：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v-<span class="keyword">for</span>=<span class="string">"value in object"</span></span><br><span class="line">v-<span class="keyword">for</span>=<span class="string">"(value,key) in object"</span></span><br><span class="line">v-<span class="keyword">for</span>=<span class="string">"(value,key,index) in object"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>1个参数时，得到的是对象的属性值</li>
<li>2个参数时，第一个是属性值，第二个是属性名</li>
<li>3个参数时，第三个是索引，从0开始</li>
</ul>
<blockquote>
<p>示例：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in user"</span>&gt;</span></span><br><span class="line">            &#123;&#123;index + 1&#125;&#125;. &#123;&#123;key&#125;&#125; - &#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            user:&#123;name:<span class="string">'峰哥'</span>, gender:<span class="string">'男'</span>, age: <span class="number">18</span>&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果：</p>
</blockquote>
<p><img src="/images/vue/1530006251975.png" alt="1530006251975"></p>
<h3 id="5-4-4-key"><a href="#5-4-4-key" class="headerlink" title="5.4.4.key"></a>5.4.4.key</h3><p>当 Vue.js 用 <code>v-for</code> 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。 </p>
<p>这个功能可以有效的提高渲染的效率。</p>
<p>但是要实现这个功能，你需要给Vue一些提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> 属性。理想的 <code>key</code> 值是每项都有的且唯一的 id。 </p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span> <span class="attr">:key</span>=<span class="string">index</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里使用了一个特殊语法：<code>:key=&quot;&quot;</code> 我们后面会讲到，它可以让你读取vue中的属性，并赋值给key属性</li>
<li>这里我们绑定的key是数组的索引，应该是唯一的</li>
</ul>
<h2 id="5-5-v-if和v-show"><a href="#5-5-v-if和v-show" class="headerlink" title="5.5.v-if和v-show"></a>5.5.v-if和v-show</h2><h3 id="5-5-1-基本使用"><a href="#5-5-1-基本使用" class="headerlink" title="5.5.1.基本使用"></a>5.5.1.基本使用</h3><p>v-if，顾名思义，条件判断。当得到结果为true时，所在的元素才会被渲染。</p>
<blockquote>
<p>语法：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-if=&quot;布尔表达式&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"show = !show"</span>&gt;</span>点我呀<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">        看到我啦？！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">        看到我啦？！show</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果：</p>
</blockquote>
<p><img src="/images/vue/57.gif" alt></p>
<h3 id="5-5-2-与v-for结合"><a href="#5-5-2-与v-for结合" class="headerlink" title="5.5.2.与v-for结合"></a>5.5.2.与v-for结合</h3><p>当v-if和v-for出现在一起时，v-for优先级更高。也就是说，会先遍历，再判断条件。</p>
<p>修改v-for中的案例，添加v-if：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(user, index) in users"</span> <span class="attr">v-if</span>=<span class="string">"user.gender == '女'"</span>&gt;</span></span><br><span class="line">        &#123;&#123;index + 1&#125;&#125;. &#123;&#123;user.name&#125;&#125; - &#123;&#123;user.gender&#125;&#125; - &#123;&#123;user.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530013415911.png" alt="1530013415911"></p>
<p>只显示女性用户信息</p>
<h3 id="5-5-3-v-else"><a href="#5-5-3-v-else" class="headerlink" title="5.5.3.v-else"></a>5.5.3.v-else</h3><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span></span><br><span class="line">        看到我啦？！if</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        看到我啦？！else</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p>
<p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，可以连续使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"random=Math.random()"</span>&gt;</span>点我呀<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;random&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"random &gt;= 0.75"</span>&gt;</span></span><br><span class="line">        看到我啦？！if</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"random &gt; 0.5"</span>&gt;</span></span><br><span class="line">        看到我啦？！if 0.5</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"random &gt; 0.25"</span>&gt;</span></span><br><span class="line">        看到我啦？！if 0.25</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        看到我啦？！else</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            random: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类似于 <code>v-else</code>，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</p>
<p>演示：</p>
<p><img src="/images/vue/58.gif" alt="1530013415911"></p>
<h3 id="5-5-4-v-show"><a href="#5-5-4-v-show" class="headerlink" title="5.5.4.v-show"></a>5.5.4.v-show</h3><p>另一个用于根据条件展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS 属性 <code>display</code>。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事件中直接写js片段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"show = !show"</span>&gt;</span>点击切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">        你好</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            show:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码：</p>
<p><img src="/images/vue/59.gif" alt></p>
<h2 id="5-6-v-bind"><a href="#5-6-v-bind" class="headerlink" title="5.6.v-bind"></a>5.6.v-bind</h2><p>html属性不能使用双大括号形式绑定，只能使用v-bind指令。</p>
<p>在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以是数据模型，可以是具有返回值的js代码块或者函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">"title"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red; width: 50px; height: 50px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            title: <span class="string">"title"</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530025378843.png" alt="1530025378843"></p>
<p>在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。 </p>
<h3 id="5-6-1-绑定class样式"><a href="#5-6-1-绑定class样式" class="headerlink" title="5.6.1.绑定class样式"></a>5.6.1.绑定class样式</h3><blockquote>
<p>数组语法</p>
</blockquote>
<p>我们可以借助于<code>v-bind</code>指令来实现：</p>
<p>HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"activeClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"errorClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            activeClass: <span class="string">'active'</span>,</span></span><br><span class="line"><span class="actionscript">            errorClass: [<span class="string">'text-danger'</span>, <span class="string">'text-error'</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>渲染后的效果：（具有active和hasError的样式）</p>
<p><img src="/images/vue/1530026818515.png" alt="1530026818515"></p>
<blockquote>
<p>对象语法</p>
</blockquote>
<p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的语法表示 <code>active</code> 这个 <strong>class 存在与否将取决于数据属性 <code>isActive</code></strong> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy" target="_blank" rel="noopener">truthiness</a>（所有的值都是真实的，除了false,0,“”,null,undefined和NaN）。</p>
<p>你可以在对象中传入更多属性来动态切换多个 class。此外，<code>v-bind:class</code> 指令也可以与普通的 class 属性共存。如下模板:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和如下 data：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  hasError: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>active样式和text-danger样式的存在与否，取决于isActive和hasError的值。本例中isActive为true，hasError为false，所以active样式存在，text-danger不存在。</p>
<h3 id="5-6-2-绑定style样式"><a href="#5-6-2-绑定style样式" class="headerlink" title="5.6.2.绑定style样式"></a>5.6.2.绑定style样式</h3><blockquote>
<p>数组语法</p>
</blockquote>
<p>数组语法可以将多个样式对象应用到同一个元素上： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    baseStyles: &#123;<span class="string">'background-color'</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    overridingStyles: &#123;<span class="attr">border</span>: <span class="string">'1px solid black'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染后的结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color: red; border: 1px solid black;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对象语法</p>
</blockquote>
<p><code>v-bind:style</code> 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来) 来命名： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: red; font-size: 30px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6-3-简写"><a href="#5-6-3-简写" class="headerlink" title="5.6.3.简写"></a>5.6.3.简写</h3><p><code>v-bind:class</code>可以简写为<code>:class</code></p>
<h2 id="5-7-计算属性"><a href="#5-7-计算属性" class="headerlink" title="5.7.计算属性"></a>5.7.计算属性</h2><p>在插值表达式中使用js表达式是非常方便的，而且也经常被用到。</p>
<p>但是如果表达式的内容很长，就会显得不够优雅，而且后期维护起来也不方便，例如下面的场景，我们有一个日期的数据，但是是毫秒值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    birthday:<span class="number">1529032123201</span> <span class="comment">// 毫秒值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在页面渲染，希望得到yyyy-MM-dd的样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>您的生日是：&#123;&#123;</span><br><span class="line">    new Date(birthday).getFullYear() + '-'+ new Date(birthday).getMonth()+ '-' + new Date(birthday).getDay()</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>虽然能得到结果，但是非常麻烦。</p>
<p>Vue中提供了计算属性，来替代复杂的表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        birthday:<span class="number">1429032123201</span> <span class="comment">// 毫秒值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        birth()&#123;<span class="comment">// 计算属性本质是一个方法，但是必须返回结果</span></span><br><span class="line">            <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">this</span>.birthday);</span><br><span class="line">            <span class="keyword">return</span> d.getFullYear() + <span class="string">"-"</span> + d.getMonth() + <span class="string">"-"</span> + d.getDay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>计算属性本质就是方法，但是一定要返回数据。然后页面渲染时，可以把这个方法当成一个变量来使用。</li>
</ul>
<p>页面使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>您的生日是：&#123;&#123;birth&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530029950644.png" alt="1530029950644"></p>
<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的依赖进行缓存的</strong>。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要<code>birthday</code>还没有发生改变，多次访问 <code>birthday</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。 </p>
<h2 id="5-8-watch"><a href="#5-8-watch" class="headerlink" title="5.8.watch"></a>5.8.watch</h2><p>watch可以让我们监控一个值的变化。从而做出相应的反应。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            message(newVal, oldVal)&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(newVal, oldVal);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530030506879.png" alt="1530030506879"></p>
<h1 id="6-组件化"><a href="#6-组件化" class="headerlink" title="6.组件化"></a>6.组件化</h1><p>在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。例如可能会有相同的头部导航。</p>
<p>但是如果每个页面都独自开发，这无疑增加了我们开发的成本。所以我们会把页面的不同部分拆分成独立的组件，然后在不同页面就可以共享这些组件，避免重复开发。</p>
<p>在vue里，所有的vue实例都是组件</p>
<h2 id="6-1-全局组件"><a href="#6-1-全局组件" class="headerlink" title="6.1.全局组件"></a>6.1.全局组件</h2><p>我们通过Vue的component方法来定义一个全局组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用定义好的全局组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 定义全局组件，两个参数：1，组件名称。2，组件参数</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"counter"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>你点了我 </span><span class="template-variable">&#123;&#123; count &#125;&#125;</span><span class="xml"> 次，我记住了.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                count:0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>组件其实也是一个Vue实例，因此它在定义时也会接收：data、methods、生命周期函数等</li>
<li>不同的是组件不会与页面的元素绑定，否则就无法复用了，因此没有el属性。</li>
<li>但是组件渲染需要html模板，所以增加了template属性，值就是HTML模板</li>
<li>全局组件定义完毕，任何vue实例都可以直接在HTML中通过组件名称来使用组件了。</li>
<li>data必须是一个函数，不再是一个对象。</li>
</ul>
<p>效果：</p>
<p><img src="/images/vue/60.gif" alt></p>
<h2 id="6-2-组件的复用"><a href="#6-2-组件的复用" class="headerlink" title="6.2.组件的复用"></a>6.2.组件的复用</h2><p>定义好的组件，可以任意复用多次：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用定义好的全局组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530084943778.png" alt="1530084943778"></p>
<p>你会发现每个组件互不干扰，都有自己的count值。怎么实现的？</p>
<blockquote>
<p><strong>组件的data属性必须是函数</strong>！</p>
</blockquote>
<p>当我们定义这个 <code>&lt;counter&gt;</code> 组件时，它的data 并不是像之前直接提供一个对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 Vue 没有这条规则，点击一个按钮就会影响到其它所有实例！</p>
<h2 id="6-3-局部组件"><a href="#6-3-局部组件" class="headerlink" title="6.3.局部组件"></a>6.3.局部组件</h2><p>一旦全局注册，就意味着即便以后你不再使用这个组件，它依然会随着Vue的加载而加载。</p>
<p>因此，对于一些并不频繁使用的组件，我们会采用局部注册。</p>
<p>我们先在外部定义一个对象，结构与创建组件时传递的第二个参数一致：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = &#123;</span><br><span class="line">    template:<span class="string">'&lt;button v-on:click="count++"&gt;你点了我 &#123;&#123; count &#125;&#125; 次，我记住了.&lt;/button&gt;'</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后在Vue中使用它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        counter:counter <span class="comment">// 将定义的对象注册为组件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>components就是当前vue对象子组件集合。<ul>
<li>其key就是子组件名称</li>
<li>其值就是组件对象名</li>
</ul>
</li>
<li>效果与刚才的全局注册是类似的，不同的是，这个counter组件只能在当前的Vue实例中使用</li>
</ul>
<h2 id="6-4-组件通信"><a href="#6-4-组件通信" class="headerlink" title="6.4.组件通信"></a>6.4.组件通信</h2><p>通常一个单页应用会以一棵嵌套的组件树的形式来组织：</p>
<p><img src="/images/vue/1525855149491.png" alt="1525855149491"></p>
<ul>
<li>页面首先分成了顶部导航、左侧内容区、右侧边栏三部分</li>
<li>左侧内容区又分为上下两个组件</li>
<li>右侧边栏中又包含了3个子组件</li>
</ul>
<p>各个组件之间以嵌套的关系组合在一起，那么这个时候不可避免的会有组件间通信的需求。</p>
<h3 id="6-4-1-props（父向子传递）"><a href="#6-4-1-props（父向子传递）" class="headerlink" title="6.4.1.props（父向子传递）"></a>6.4.1.props（父向子传递）</h3><ol>
<li>父组件使用子组件时，自定义属性（属性名任意，属性值为要传递的数据）</li>
<li>子组件通过props接收父组件数据，通过自定义属性的属性名</li>
</ol>
<p>父组件使用子组件，并自定义了title属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>打个招呼：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用子组件，同时传递title属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">introduce</span> <span class="attr">title</span>=<span class="string">"大家好，我是锋哥"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"introduce"</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 直接使用props接收到的属性来渲染页面</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'title'</span>] <span class="comment">// 通过props来接收一个父组件传递的属性</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530093525973.png" alt="1530093525973"></p>
<h3 id="6-4-2-props验证"><a href="#6-4-2-props验证" class="headerlink" title="6.4.2.props验证"></a>6.4.2.props验证</h3><p>我们定义一个子组件，并接收复杂数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myList = &#123;</span><br><span class="line">    template: <span class="string">'\</span></span><br><span class="line"><span class="string">    &lt;ul&gt;\</span></span><br><span class="line"><span class="string">    	&lt;li v-for="item in items" :key="item.id"&gt;&#123;&#123;item.id&#125;&#125; : &#123;&#123;item.name&#125;&#125;&lt;/li&gt;\</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;\</span></span><br><span class="line"><span class="string">    '</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        items: &#123;</span><br><span class="line">            type: <span class="built_in">Array</span>,</span><br><span class="line">            <span class="keyword">default</span>: [],</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>这个子组件可以对 items 进行迭代，并输出到页面。</li>
<li>props：定义需要从父组件中接收的属性<ul>
<li>items：是要接收的属性名称<ul>
<li>type：限定父组件传递来的必须是数组</li>
<li>default：默认值</li>
<li>required：是否必须</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</strong> </p>
<p>我们在父组件中使用它：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>传智播客已开设如下课程：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用子组件的同时，传递属性，这里使用了v-bind，指向了父组件自己的属性lessons --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">:items</span>=<span class="string">"lessons"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        myList <span class="comment">// 当key和value一样时，可以只写一个</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        lessons:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>: <span class="string">'java'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>: <span class="string">'php'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>: <span class="string">'ios'</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530107338625.png" alt="1530107338625"></p>
<p>type类型，可以有：</p>
<p><img src="/images/vue/1530108427358.png" alt="1530108427358"></p>
<p><strong>注意：子组件模板有且只有一个根标签</strong></p>
<h3 id="6-4-3-动态静态传递"><a href="#6-4-3-动态静态传递" class="headerlink" title="6.4.3.动态静态传递"></a>6.4.3.动态静态传递</h3><p>给 prop 传入一个静态的值： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">introduce</span> <span class="attr">title</span>=<span class="string">"大家好，我是锋哥"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>给 prop 传入一个动态的值： （通过v-bind从数据模型中，获取title的值）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">introduce</span> <span class="attr">:title</span>=<span class="string">"title"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>静态传递时，我们传入的值都是字符串类型的，但实际上<strong>任何类型</strong>的值都可以传给一个 props。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个JavaScript表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:likes</span>=<span class="string">"42"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:likes</span>=<span class="string">"post.likes"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-4-4-子向父的通信：-emit"><a href="#6-4-4-子向父的通信：-emit" class="headerlink" title="6.4.4.子向父的通信：$emit"></a>6.4.4.子向父的通信：$emit</h3><p>来看这样的一个案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>num: &#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用子组件的时候，传递num到子组件中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span> <span class="attr">:num</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"counter"</span>, &#123;<span class="comment">// 子组件，定义了两个按钮，点击数字num会加或减</span></span></span><br><span class="line">        template:'\</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  \</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num--"</span>&gt;</span>减<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  \</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'num'</span>]<span class="comment">// count是从父组件获取的。</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            num:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子组件接收父组件的num属性</li>
<li>子组件定义点击按钮，点击后对num进行加或减操作</li>
</ul>
<p>我们尝试运行，好像没问题，点击按钮试试：</p>
<p><img src="/images/vue/1530115066496.png" alt="1525859093172"></p>
<p>子组件接收到父组件属性后，默认是不允许修改的。怎么办？</p>
<p>既然只有父组件能修改，那么加和减的操作一定是放在父组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        num:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123; <span class="comment">// 父组件中定义操作num的方法</span></span><br><span class="line">        increment()&#123;</span><br><span class="line">            <span class="keyword">this</span>.num++;</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement()&#123;</span><br><span class="line">            <span class="keyword">this</span>.num--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是，点击按钮是在子组件中，那就是说需要子组件来调用父组件的函数，怎么做？</p>
<p>我们可以<strong>通过v-on指令将父组件的函数绑定到子组件</strong>上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>num: &#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span> <span class="attr">:count</span>=<span class="string">"num"</span> @<span class="attr">inc</span>=<span class="string">"increment"</span> @<span class="attr">dec</span>=<span class="string">"decrement"</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在子组件中定义函数，函数的具体实现调用父组件的实现，并在子组件中调用这些函数。当子组件中按钮被点击时，调用绑定的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"counter"</span>, &#123;</span><br><span class="line">    template:<span class="string">'\</span></span><br><span class="line"><span class="string">        &lt;div&gt;\</span></span><br><span class="line"><span class="string">            &lt;button @click="plus"&gt;加&lt;/button&gt;  \</span></span><br><span class="line"><span class="string">            &lt;button @click="reduce"&gt;减&lt;/button&gt;  \</span></span><br><span class="line"><span class="string">        &lt;/div&gt;'</span>,</span><br><span class="line">    props:[<span class="string">'count'</span>],</span><br><span class="line">    methods:&#123;</span><br><span class="line">        plus()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"inc"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        reduce()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"dec"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>vue提供了一个内置的this.$emit()函数，用来调用父组件绑定的函数</li>
</ul>
<p>效果：</p>
<p><img src="/images/vue/61.gif" alt></p>
<h1 id="7-路由vue-router"><a href="#7-路由vue-router" class="headerlink" title="7.路由vue-router"></a>7.路由vue-router</h1><h2 id="7-1-场景模拟"><a href="#7-1-场景模拟" class="headerlink" title="7.1.场景模拟"></a>7.1.场景模拟</h2><p>现在我们来实现这样一个功能：</p>
<p>一个页面，包含登录和注册，点击不同按钮，实现登录和注册页切换：</p>
<p><img src="/images/vue/62.gif" alt></p>
<h3 id="7-1-1-编写父组件"><a href="#7-1-1-编写父组件" class="headerlink" title="7.1.1.编写父组件"></a>7.1.1.编写父组件</h3><p>为了让接下来的功能比较清晰，我们先新建一个文件夹：src</p>
<p>然后新建一个HTML文件，作为入口：index.html</p>
<p> <img src="/images/vue/1530148321175.png" alt="1530148321175"></p>
<p>然后编写页面的基本结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        登录页/注册页</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>样式：</p>
<p><img src="/images/vue/1530149363817.png" alt="1530149363817"></p>
<h3 id="7-1-2-编写登录及注册组件"><a href="#7-1-2-编写登录及注册组件" class="headerlink" title="7.1.2.编写登录及注册组件"></a>7.1.2.编写登录及注册组件</h3><p>接下来我们来实现登录组件，以前我们都是写在一个文件中，但是为了复用性，开发中都会把组件放入独立的JS文件中，我们新建一个user目录以及login.js及register.js：</p>
<p> <img src="/images/vue/1530156389366.png" alt="1530156389366"></p>
<p>编写组件，这里我们只写模板，不写功能。</p>
<p>login.js内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loginForm = &#123;</span><br><span class="line">    template:<span class="string">'\</span></span><br><span class="line"><span class="string">    &lt;div&gt;\</span></span><br><span class="line"><span class="string">    &lt;h2&gt;登录页&lt;/h2&gt; \</span></span><br><span class="line"><span class="string">    用户名：&lt;input type="text"&gt;&lt;br/&gt;\</span></span><br><span class="line"><span class="string">    密码：&lt;input type="password"&gt;&lt;br/&gt;\</span></span><br><span class="line"><span class="string">    &lt;/div&gt;\</span></span><br><span class="line"><span class="string">    '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>register.js内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> registerForm = &#123;</span><br><span class="line">    template:<span class="string">'\</span></span><br><span class="line"><span class="string">    &lt;div&gt;\</span></span><br><span class="line"><span class="string">    &lt;h2&gt;注册页&lt;/h2&gt; \</span></span><br><span class="line"><span class="string">    用&amp;ensp;户&amp;ensp;名：&lt;input type="text"&gt;&lt;br/&gt;\</span></span><br><span class="line"><span class="string">    密&amp;emsp;&amp;emsp;码：&lt;input type="password"&gt;&lt;br/&gt;\</span></span><br><span class="line"><span class="string">    确认密码：&lt;input type="password"&gt;&lt;br/&gt;\</span></span><br><span class="line"><span class="string">    &lt;/div&gt;\</span></span><br><span class="line"><span class="string">    '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-1-3-在父组件中引用"><a href="#7-1-3-在父组件中引用" class="headerlink" title="7.1.3.在父组件中引用"></a>7.1.3.在父组件中引用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;loginForm&gt;&lt;/loginForm&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            疑问：为什么不采用上面的写法？</span></span><br><span class="line"><span class="comment">            由于html是大小写不敏感的，如果采用上面的写法，则被认为是&lt;loginform&gt;&lt;/loginform&gt;</span></span><br><span class="line"><span class="comment">            所以，如果是驼峰形式的组件，需要把驼峰转化为“-”的形式</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login-form</span>&gt;</span><span class="tag">&lt;/<span class="name">login-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">register-form</span>&gt;</span><span class="tag">&lt;/<span class="name">register-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"user/login.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"user/register.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            loginForm,</span><br><span class="line">            registerForm</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/vue/1530157389501.png" alt="1530157389501"></p>
<h3 id="7-1-5-问题"><a href="#7-1-5-问题" class="headerlink" title="7.1.5.问题"></a>7.1.5.问题</h3><p>我们期待的是，当点击登录或注册按钮，分别显示登录页或注册页，而不是一起显示。</p>
<p>但是，如何才能动态加载组件，实现组件切换呢？</p>
<p>虽然使用原生的Html5和JS也能实现，但是官方推荐我们使用vue-router模块。</p>
<h2 id="7-2-vue-router简介和安装"><a href="#7-2-vue-router简介和安装" class="headerlink" title="7.2.vue-router简介和安装"></a>7.2.vue-router简介和安装</h2><p>使用vue-router和vue可以非常方便的实现 复杂单页应用的动态路由功能。</p>
<p>官网：<a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">https://router.vuejs.org/zh-cn/</a></p>
<p>使用npm安装：<code>npm install vue-router --save</code> </p>
<p><img src="/images/vue/1530161293338.png" alt="1530161293338"></p>
<p>在index.html中引入依赖：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3-快速入门"><a href="#7-3-快速入门" class="headerlink" title="7.3.快速入门"></a>7.3.快速入门</h2><p>新建vue-router对象，并且指定路由规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建VueRouter对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[ <span class="comment">// 编写路由规则</span></span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"/login"</span>, <span class="comment">// 请求路径，以“/”开头</span></span><br><span class="line">            component:loginForm <span class="comment">// 组件名称</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"/register"</span>,</span><br><span class="line">            component:registerForm</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建VueRouter对象，并指定路由参数</li>
<li>routes：路由规则的数组，可以指定多个对象，每个对象是一条路由规则，包含以下属性：<ul>
<li>path：路由的路径</li>
<li>component：组件名称</li>
</ul>
</li>
</ul>
<p>在父组件中引入router对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    components:&#123;<span class="comment">// 引用登录和注册组件</span></span><br><span class="line">        loginForm,</span><br><span class="line">        registerForm</span><br><span class="line">    &#125;,</span><br><span class="line">    router <span class="comment">// 引用上面定义的router对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>页面跳转控制：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--router-link来指定跳转的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue-router的锚点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过<code>&lt;router-view&gt;</code>来指定一个锚点，当路由的路径匹配时，vue-router会自动把对应组件放到锚点位置进行渲染</li>
<li>通过<code>&lt;router-link&gt;</code>指定一个跳转链接，当点击时，会触发vue-router的路由功能，路径中的hash值会随之改变</li>
</ul>
<p>效果：</p>
<p><img src="/images/vue/62.gif" alt></p>
<p><strong>注意</strong>：单页应用中，页面的切换并不是页面的跳转。仅仅是地址最后的hash值变化。</p>
<p>事实上，我们总共就一个HTML：index.html</p>

    <div id="aplayer-VzRewlRW" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1403435714" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>







]]></content>
  </entry>
  <entry>
    <title>项目搭建</title>
    <url>/2019/12/02/day04/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><p>（这篇前面什么电商行业的东西别看了都是18年的东西，都19年12月了，马爸爸都说新零售了，还什么电商，看看目录里面技术点的东西就行了）</p>
<ul>
<li>了解电商行业</li>
<li>了解乐优商城项目结构</li>
<li>能独立搭建项目基本框架</li>
<li>能参考使用ES6的新语法</li>
</ul>
<a id="more"></a>
<h1 id="1-了解电商行业"><a href="#1-了解电商行业" class="headerlink" title="1.了解电商行业"></a>1.了解电商行业</h1><p>学习电商项目，自然要先了解这个行业，所以我们首先来聊聊电商行业</p>
<h2 id="1-1-项目分类"><a href="#1-1-项目分类" class="headerlink" title="1.1.项目分类"></a>1.1.项目分类</h2><p>主要从需求方、盈利模式、技术侧重点这三个方面来看它们的不同</p>
<h3 id="1-1-1-传统项目"><a href="#1-1-1-传统项目" class="headerlink" title="1.1.1.传统项目"></a>1.1.1.传统项目</h3><p>各种企业里面用的管理系统（ERP、HR、OA、CRM、物流管理系统。。。。。。。）</p>
<ul>
<li>需求方：公司、企业内部</li>
<li>盈利模式：项目本身卖钱</li>
<li>技术侧重点：业务功能</li>
</ul>
<h3 id="1-1-2-互联网项目"><a href="#1-1-2-互联网项目" class="headerlink" title="1.1.2.互联网项目"></a>1.1.2.互联网项目</h3><p>门户网站、电商网站：baidu.com、qq.com、taobao.com、jd.com  …… </p>
<ul>
<li>需求方：广大用户群体</li>
<li>盈利模式：虚拟币、增值服务、广告收益……</li>
<li>技术侧重点：网站性能、业务功能</li>
</ul>
<p>而我们今天要聊的就是互联网项目中的重要角色：电商</p>
<h2 id="1-2-电商行业的发展"><a href="#1-2-电商行业的发展" class="headerlink" title="1.2.电商行业的发展"></a>1.2.电商行业的发展</h2><h3 id="1-2-1-钱景"><a href="#1-2-1-钱景" class="headerlink" title="1.2.1.钱景"></a>1.2.1.钱景</h3><p>近年来，中国的电子商务快速发展，交易额连创新高，电子商务在各领域的应用不断拓展和深化、相关服务业蓬勃发展、支撑体系不断健全完善、创新的动力和能力不断增强。电子商务正在与实体经济深度融合，进入规模性发展阶段，对经济社会生活的影响不断增大，正成为我国经济发展的新引擎。</p>
<p>中国电子商务研究中心数据显示，截止到 2012 年底，中国电子商务市场交易规模达 7.85万亿人民币，同比增长 30.83%。其中，B2B 电子商务交易额达 6.25 万亿，同比增长 27%。而 2011 年全年，中国电子商务市场交易额达 6 万亿人民币，同比增长 33%，占 GDP 比重上升到 13%；2012 年，电子商务占 GDP 的比重已经高达 15%。</p>
<p> <img src="/images/leyou04/1525686041466.png" alt></p>
<h3 id="1-2-2-数据"><a href="#1-2-2-数据" class="headerlink" title="1.2.2.数据"></a>1.2.2.数据</h3><p><img src="/images/leyou04/1529165766652.png" alt="1529165766652"></p>
<p>来看看双十一的成交数据：</p>
<p><img src="/images/leyou04/1525686135308.png" alt="1525686135308"></p>
<p><img src="/images/leyou04/1525686160411.png" alt="1525686160411"></p>
<p>2016双11开场30分钟，创造<strong>每秒交易峰值17.5万笔</strong>，<strong>每秒</strong>支付峰值<strong>12万笔</strong>的新纪录。菜鸟单日物流订单量超过<strong>4.67亿</strong>，创历史新高。</p>
<p><img src="/images/leyou04/1529165714679.png" alt="1529165714679"></p>
<h3 id="1-2-3-技术特点"><a href="#1-2-3-技术特点" class="headerlink" title="1.2.3.技术特点"></a>1.2.3.技术特点</h3><p>从上面的数据我们不仅要看到钱，更要看到背后的技术实力。正是得益于电商行业的高强度并发压力，促使了BAT等巨头们的技术进步。电商行业有些什么特点呢？ </p>
<ul>
<li>技术范围广</li>
<li>技术新</li>
<li>高并发（分布式、静态化技术、缓存技术、异步并发、池化、队列）</li>
<li>高可用（集群、负载均衡、限流、降级、熔断）</li>
<li>数据量大 </li>
<li>业务复杂</li>
<li>数据安全</li>
</ul>
<h2 id="1-3-常见电商模式"><a href="#1-3-常见电商模式" class="headerlink" title="1.3.常见电商模式"></a>1.3.常见电商模式</h2><p>电商行业的一些常见模式：</p>
<ul>
<li>B2C：商家对个人，如：亚马逊、当当等</li>
<li>C2C平台：个人对个人，如：闲鱼、拍拍网、ebay</li>
<li>B2B平台：商家对商家，如：阿里巴巴、八方资源网等</li>
<li>O2O：线上和线下结合，如：饿了么、电影票、团购等</li>
<li>P2P：在线金融，贷款，如：网贷之家、人人聚财等。</li>
<li>B2C平台：天猫、京东、一号店等</li>
</ul>
<h2 id="1-4-一些专业术语"><a href="#1-4-一些专业术语" class="headerlink" title="1.4.一些专业术语"></a>1.4.一些专业术语</h2><ul>
<li><p>SaaS：软件即服务</p>
</li>
<li><p>SOA：面向服务</p>
</li>
<li><p>RPC：远程过程调用</p>
</li>
<li><p>RMI：远程方法调用</p>
</li>
<li><p>PV：(page view)，即页面浏览量；</p>
<p>用户每1次对网站中的每个网页访问均被记录1次。用户对同一页面的多次访问，访问量累计</p>
</li>
<li><p>UV：(unique visitor)，独立访客</p>
<p>指访问某个站点或点击某条新闻的不同IP地址的人数。在同一天内，uv只记录第一次进入网站的具有独立IP的访问者，在同一天内再次访问该网站则不计数。</p>
</li>
<li><p>PV与带宽：</p>
<ul>
<li>计算带宽大小需要关注两个指标：峰值流量和页面的平均大小。</li>
<li>计算公式是：网站带宽= ( PV * 平均页面大小（单位MB）* 8 )/统计时间（换算到秒）</li>
<li>为什么要乘以8？<ul>
<li>网站大小为单位是字节(Byte)，而计算带宽的单位是bit，1Byte=8bit</li>
</ul>
</li>
<li>这个计算的是平均带宽，高峰期还需要扩大一定倍数</li>
</ul>
</li>
<li><p>PV、QPS、并发</p>
<ul>
<li><p>QPS：每秒处理的请求数量。</p>
<ul>
<li>比如你的程序处理一个请求平均需要0.1S，那么1秒就可以处理10个请求。QPS自然就是10，多线程情况下，这个数字可能就会有所增加。</li>
</ul>
</li>
<li><p>由PV和QPS如何需要部署的服务器数量？</p>
<ul>
<li>根据二八原则，80%的请求集中在20%的时间来计算峰值压力：</li>
<li>（每日PV * 80%） / （3600s * 24 * 20%） * 每个页面的请求数  = 每个页面每秒的请求数量</li>
<li>然后除以服务器的QPS值，即可计算得出需要部署的服务器数量</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="1-5-项目开发流程"><a href="#1-5-项目开发流程" class="headerlink" title="1.5.项目开发流程"></a>1.5.项目开发流程</h2><p>项目经理：管人 </p>
<p>技术经理：</p>
<p>产品经理：设计需求原型 </p>
<p>测试：</p>
<p>前端：大前端：UI 前端页面。</p>
<p>后端：</p>
<p>移动端：</p>
<p>项目开发流程图：</p>
<p> <img src="/images/leyou04/1525697632643.png" alt></p>
<p>公司现状：</p>
<p> <img src="/images/leyou04/1525697681975.png" alt></p>
<h1 id="2-乐优商城介绍"><a href="#2-乐优商城介绍" class="headerlink" title="2.乐优商城介绍"></a>2.乐优商城介绍</h1><h2 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1.项目介绍"></a>2.1.项目介绍</h2><ul>
<li>乐优商城是一个全品类的电商购物网站（B2C）。</li>
<li>用户可以在线购买商品、加入购物车、下单</li>
<li>可以评论已购买商品</li>
<li>管理员可以在后台管理商品的上下架、促销活动</li>
<li>管理员可以监控商品销售状况</li>
<li>客服可以在后台处理退款操作</li>
<li>希望未来3到5年可以支持千万用户的使用</li>
</ul>
<h2 id="2-2-系统架构"><a href="#2-2-系统架构" class="headerlink" title="2.2.系统架构"></a>2.2.系统架构</h2><h3 id="2-2-1-架构图"><a href="#2-2-1-架构图" class="headerlink" title="2.2.1.架构图"></a>2.2.1.架构图</h3><p>乐优商城架构缩略图，大图请参考课前资料：</p>
<p><img src="/images/leyou04/1525703759035.png" alt="1525703759035"></p>
<h3 id="2-2-2-系统架构解读"><a href="#2-2-2-系统架构解读" class="headerlink" title="2.2.2.系统架构解读"></a>2.2.2.系统架构解读</h3><p>整个乐优商城可以分为两部分：后台管理系统、前台门户系统。</p>
<ul>
<li><p>后台管理：</p>
<ul>
<li>后台系统主要包含以下功能：<ul>
<li>商品管理，包括商品分类、品牌、商品规格等信息的管理</li>
<li>销售管理，包括订单统计、订单退款处理、促销活动生成等</li>
<li>用户管理，包括用户控制、冻结、解锁等</li>
<li>权限管理，整个网站的权限控制，采用JWT鉴权方案，对用户及API进行权限控制</li>
<li>统计，各种数据的统计分析展示</li>
</ul>
</li>
<li>后台系统会采用前后端分离开发，而且整个后台管理系统会使用Vue.js框架搭建出单页应用（SPA）。</li>
</ul>
</li>
<li><p>前台门户</p>
<ul>
<li>前台门户面向的是客户，包含与客户交互的一切功能。例如：<ul>
<li>搜索商品</li>
<li>加入购物车</li>
<li>下单</li>
<li>评价商品等等</li>
</ul>
</li>
<li>前台系统我们会使用Thymeleaf模板引擎技术来完成页面开发。出于SEO优化的考虑，我们将不采用单页应用。</li>
</ul>
<p><img src="/images/leyou04/1525704277126.png" alt="1525704277126"></p>
</li>
</ul>
<p>无论是前台还是后台系统，都共享相同的微服务集群，包括：</p>
<ul>
<li>商品微服务：商品及商品分类、品牌、库存等的服务</li>
<li>搜索微服务：实现搜索功能</li>
<li>订单微服务：实现订单相关</li>
<li>购物车微服务：实现购物车相关功能</li>
<li>用户中心：用户的登录注册等功能</li>
<li>Eureka注册中心</li>
<li>Zuul网关服务</li>
<li>…</li>
</ul>
<h1 id="3-项目搭建"><a href="#3-项目搭建" class="headerlink" title="3.项目搭建"></a>3.项目搭建</h1><h2 id="3-1-技术选型"><a href="#3-1-技术选型" class="headerlink" title="3.1.技术选型"></a>3.1.技术选型</h2><p>前端技术：</p>
<ul>
<li>基础的HTML、CSS、JavaScript（基于ES6标准）</li>
<li>JQuery</li>
<li>Vue.js 2.0以及基于Vue的框架：Vuetify（UI框架）</li>
<li>前端构建工具：WebPack</li>
<li>前端安装包工具：NPM</li>
<li>Vue脚手架：Vue-cli</li>
<li>Vue路由：vue-router</li>
<li>ajax框架：axios</li>
<li>基于Vue的富文本框架：quill-editor </li>
</ul>
<p>后端技术：</p>
<ul>
<li>基础的SpringMVC、Spring 5.x和MyBatis3</li>
<li>Spring Boot 2.0.7版本</li>
<li>Spring Cloud 最新版 Finchley.SR2</li>
<li>Redis-4.0 </li>
<li>RabbitMQ-3.4</li>
<li>Elasticsearch-6.3</li>
<li>nginx-1.14.2</li>
<li>FastDFS - 5.0.8</li>
<li>MyCat</li>
<li>Thymeleaf</li>
<li>mysql 5.6</li>
</ul>
<h2 id="3-2-开发环境"><a href="#3-2-开发环境" class="headerlink" title="3.2.开发环境"></a>3.2.开发环境</h2><p>为了保证开发环境的统一，希望每个人都按照我的环境来配置：</p>
<ul>
<li>IDE：我们使用Idea 2017.3 版本</li>
<li>JDK：统一使用JDK1.8</li>
<li>项目构建：maven3.3.9以上版本即可（3.5.2）</li>
<li>版本控制工具：git</li>
</ul>
<p>idea大家可以在我的课前资料中找到。另外，使用帮助大家可以参考课前资料的《idea使用指南.md》</p>
<h2 id="3-3-域名"><a href="#3-3-域名" class="headerlink" title="3.3.域名"></a>3.3.域名</h2><p>我们在开发的过程中，为了保证以后的生产、测试环境统一。尽量都采用域名来访问项目。</p>
<p>一级域名：<a href="http://www.leyou.com，leyou.com" target="_blank" rel="noopener">www.leyou.com，leyou.com</a> leyou.cn </p>
<p>二级域名：manage.leyou.com/item , api.leyou.com</p>
<p>我们可以通过switchhost工具来修改自己的host对应的地址，只要把这些域名指向127.0.0.1，那么跟你用localhost的效果是完全一样的。</p>
<p>switchhost可以去课前资料寻找。</p>
<h2 id="3-4-创建父工程"><a href="#3-4-创建父工程" class="headerlink" title="3.4.创建父工程"></a>3.4.创建父工程</h2><p>创建统一的父工程：leyou，用来管理依赖及其版本，注意是创建project，而不是module</p>
<p><img src="/images/leyou04/1529224631578.png" alt="1529224631578"></p>
<p>填写项目信息：</p>
<p><img src="/images/leyou04/1529224746616.png" alt="1529224746616"></p>
<p>填写保存的位置信息：</p>
<p><img src="/images/leyou04/1529224804596.png" alt="1529224804596"></p>
<p>然后将pom文件修改成我这个样子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mybatis.starter.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">mybatis.starter.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper.starter.version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">mapper.starter.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">druid.starter.version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">druid.starter.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">pageHelper.starter.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">pageHelper.starter.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">leyou.latest.version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">leyou.latest.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">fastDFS.client.version</span>&gt;</span>1.26.1-RELEASE<span class="tag">&lt;/<span class="name">fastDFS.client.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- mybatis启动器 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 通用Mapper启动器 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapper.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 分页助手启动器 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pageHelper.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--FastDFS客户端--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastDFS.client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以发现，我们在父工程中引入了SpringCloud等，很多以后需要用到的依赖，以后创建的子工程就不需要自己引入了。</p>
<p>可以删除src目录，工程结构如下：</p>
<p> <img src="/images/leyou04/1529225577524.png" alt="1529225577524"></p>
<h2 id="3-5-创建EurekaServer"><a href="#3-5-创建EurekaServer" class="headerlink" title="3.5.创建EurekaServer"></a>3.5.创建EurekaServer</h2><h3 id="3-5-1-创建工程"><a href="#3-5-1-创建工程" class="headerlink" title="3.5.1.创建工程"></a>3.5.1.创建工程</h3><p>我们的注册中心，起名为：leyou-registry</p>
<p>选择新建module：</p>
<p><img src="/images/leyou04/1529225751893.png" alt="1529225751893"></p>
<p>不要选择骨架：</p>
<p><img src="/images/leyou04/1529225984078.png" alt="1529225984078"></p>
<p>然后填写项目坐标，我们的项目名称为leyou-registry:</p>
<p><img src="/images/leyou04/1529226086759.png" alt="1529226086759"></p>
<p>选择安装目录，因为是聚合项目，目录应该是在父工程leyou的下面：</p>
<p><img src="/images/leyou04/1529226475238.png" alt="1529226475238"></p>
<h3 id="3-5-2-添加依赖"><a href="#3-5-2-添加依赖" class="headerlink" title="3.5.2.添加依赖"></a>3.5.2.添加依赖</h3><p>添加EurekaServer的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-registry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-3-编写启动类"><a href="#3-5-3-编写启动类" class="headerlink" title="3.5.3.编写启动类"></a>3.5.3.编写启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouRegistryApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LeyouRegistryApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-4-配置文件"><a href="#3-5-4-配置文件" class="headerlink" title="3.5.4.配置文件"></a>3.5.4.配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">leyou-registry</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:$&#123;server.port&#125;/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 把自己注册到eureka服务列表</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 拉取eureka服务信息</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">5000</span> <span class="comment"># 每隔5秒钟，进行一次服务列表的清理</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-5-项目的结构"><a href="#3-5-5-项目的结构" class="headerlink" title="3.5.5.项目的结构"></a>3.5.5.项目的结构</h3><p>目前，整个项目的结构如图：</p>
<p> <img src="/images/leyou04/1529288386033.png" alt="1529288386033"></p>
<h2 id="3-6-创建Zuul网关"><a href="#3-6-创建Zuul网关" class="headerlink" title="3.6.创建Zuul网关"></a>3.6.创建Zuul网关</h2><h3 id="3-6-1-创建工程"><a href="#3-6-1-创建工程" class="headerlink" title="3.6.1.创建工程"></a>3.6.1.创建工程</h3><p>与上面类似，选择maven方式创建Module，然后填写项目名称，我们命名为：leyou-gateway</p>
<p><img src="/images/leyou04/1529288749658.png" alt="1529288749658"></p>
<p>填写保存的目录：</p>
<p><img src="/images/leyou04/1529288865152.png" alt="1529288865152"></p>
<h3 id="3-6-2-添加依赖"><a href="#3-6-2-添加依赖" class="headerlink" title="3.6.2.添加依赖"></a>3.6.2.添加依赖</h3><p>这里我们需要添加Zuul和EurekaClient的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot提供微服务检测接口，默认对外提供几个接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-6-3-编写启动类"><a href="#3-6-3-编写启动类" class="headerlink" title="3.6.3.编写启动类"></a>3.6.3.编写启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouGatewayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LeyouGatewayApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-6-4-配置文件"><a href="#3-6-4-配置文件" class="headerlink" title="3.6.4.配置文件"></a>3.6.4.配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">leyou-gateway</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 路由路径前缀</span></span><br></pre></td></tr></table></figure>

<h3 id="3-6-5-项目结构"><a href="#3-6-5-项目结构" class="headerlink" title="3.6.5.项目结构"></a>3.6.5.项目结构</h3><p>目前，leyou下有两个子模块：</p>
<ul>
<li>leyou-registry：服务的注册中心（EurekaServer）</li>
<li>leyou-gateway：服务网关（Zuul）</li>
</ul>
<p>目前，服务的结构如图所示：</p>
<p> <img src="/images/leyou04/1529294593632.png" alt="1529294593632"></p>
<p>截止到这里，我们已经把基础服务搭建完毕，为了便于开发，统一配置中心（ConfigServer）我们留待以后添加。</p>
<h2 id="3-7-创建商品微服务"><a href="#3-7-创建商品微服务" class="headerlink" title="3.7.创建商品微服务"></a>3.7.创建商品微服务</h2><p>既然是一个全品类的电商购物平台，那么核心自然就是商品。因此我们要搭建的第一个服务，就是商品微服务。其中会包含对于商品相关的一系列内容的管理，包括：</p>
<ul>
<li>商品分类管理</li>
<li>品牌管理</li>
<li>商品规格参数管理</li>
<li>商品管理</li>
<li>库存管理</li>
</ul>
<h3 id="3-7-1-微服务的结构"><a href="#3-7-1-微服务的结构" class="headerlink" title="3.7.1.微服务的结构"></a>3.7.1.微服务的结构</h3><p>因为与商品的品类相关，我们的工程命名为<code>leyou-item</code>.</p>
<p>需要注意的是，我们的leyou-item是一个微服务，那么将来肯定会有其它系统需要来调用服务中提供的接口，获取的接口数据，也需要对应的实体类来封装，因此肯定也会使用到接口中关联的实体类。</p>
<p>因此这里我们需要使用聚合工程，将要提供的接口及相关实体类放到独立子工程中，以后别人引用的时候，只需要知道坐标即可。</p>
<p>我们会在leyou-item中创建两个子工程：</p>
<ul>
<li>leyou-item-interface：主要是对外暴露的接口及相关实体类</li>
<li>leyou-item-service：所有业务逻辑及内部使用接口</li>
</ul>
<p>调用关系如图所示：</p>
<p><img src="/images/leyou04/1525744281610.png" alt="1525744281610"></p>
<h3 id="3-7-2-leyou-item"><a href="#3-7-2-leyou-item" class="headerlink" title="3.7.2.leyou-item"></a>3.7.2.leyou-item</h3><p>依然是使用maven构建：</p>
<p><img src="/images/leyou04/1529299088082.png" alt="1529299088082"></p>
<p>保存的位置：</p>
<p><img src="/images/leyou04/1529299138961.png" alt="1529299138961"></p>
<p>因为是聚合工程，所以把项目打包方式设置为pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.item<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包方式为pom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-7-3-leyou-item-interface"><a href="#3-7-3-leyou-item-interface" class="headerlink" title="3.7.3.leyou-item-interface"></a>3.7.3.leyou-item-interface</h3><p>在leyou-item工程上点击右键，选择new –&gt; module:</p>
<p><img src="/images/leyou04/1529299709029.png" alt="1529299709029"></p>
<p>依然是使用maven构建，注意父工程是leyou-item：</p>
<p><img src="/images/leyou04/1529299826248.png" alt="1529299826248"></p>
<p><strong>注意</strong>：目录结构，保存到<code>leyou-item</code>下的<code>leyou-item-interface</code>目录中：</p>
<p><img src="/images/leyou04/1529299921171.png" alt="1529299921171"></p>
<p>点击Finish完成。</p>
<p>此时的项目结构：</p>
<p> <img src="/images/leyou04/1529300026401.png" alt="1529300026401"></p>
<h3 id="3-7-4-leyou-item-service"><a href="#3-7-4-leyou-item-service" class="headerlink" title="3.7.4.leyou-item-service"></a>3.7.4.leyou-item-service</h3><p>与<code>leyou-item-interface</code>类似，我们选择在<code>leyou-item</code>上右键，新建module，然后填写项目信息：</p>
<p><img src="/images/leyou04/1529300203991.png" alt="1529300203991"></p>
<p>填写存储位置</p>
<p><img src="/images/leyou04/1529300292096.png" alt="1529300292096"></p>
<p>点击Finish完成。</p>
<h3 id="3-7-5-整个微服务结构"><a href="#3-7-5-整个微服务结构" class="headerlink" title="3.7.5.整个微服务结构"></a>3.7.5.整个微服务结构</h3><p>如图所示：</p>
<p> <img src="/images/leyou04/1529300341449.png" alt="1529300341449"></p>
<p>我们打开leyou-item的pom查看，会发现leyou-item-interface和leyou-item-service都已经成为module了：</p>
<p><img src="/images/leyou04/1529300419107.png" alt="1529300419107"></p>
<p>可以删除leyou-item工程的src目录</p>
<h3 id="3-7-6-添加依赖"><a href="#3-7-6-添加依赖" class="headerlink" title="3.7.6.添加依赖"></a>3.7.6.添加依赖</h3><p>接下来我们给<code>leyou-item-service</code>中添加依赖：</p>
<p>思考一下我们需要什么？</p>
<ul>
<li>Eureka客户端</li>
<li>web启动器</li>
<li>mybatis启动器</li>
<li>通用mapper启动器</li>
<li>分页助手启动器</li>
<li>连接池，我们用默认的Hykira</li>
<li>mysql驱动</li>
<li>千万不能忘了，我们自己也需要<code>ly-item-interface</code>中的实体类</li>
</ul>
<p>这些依赖，我们在顶级父工程：leyou中已经添加好了。所以直接引入即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.item<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.item<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-item-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- eureka客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis的启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通用mapper启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页助手启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jdbc启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.item<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot检测服务启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>leyou-item-interface中需要什么我们暂时不清楚，所以先不管。以后需要什么依赖，再引入。</p>
<h3 id="3-7-7-编写启动和配置"><a href="#3-7-7-编写启动和配置" class="headerlink" title="3.7.7.编写启动和配置"></a>3.7.7.编写启动和配置</h3><p>在整个<code>leyou-item工程</code>中，只有<code>leyou-item-service</code>是需要启动的。因此在其中编写启动类即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouItemServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LeyouItemServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是全局属性文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/leyou</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">28830000</span> <span class="comment"># 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';）</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">9</span> <span class="comment"># 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 5秒钟发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br></pre></td></tr></table></figure>

<h2 id="3-8-添加商品微服务的路由规则"><a href="#3-8-添加商品微服务的路由规则" class="headerlink" title="3.8.添加商品微服务的路由规则"></a>3.8.添加商品微服务的路由规则</h2><p>既然商品微服务已经创建，接下来肯定要添加路由规则到Zuul中，我们不使用默认的路由规则。</p>
<p>修改leyou-gateway工程的application.yml配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 路由路径前缀</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">item-service:</span> <span class="string">/item/**</span> <span class="comment"># 商品微服务的映射路径</span></span><br></pre></td></tr></table></figure>

<h2 id="3-9-启动测试"><a href="#3-9-启动测试" class="headerlink" title="3.9.启动测试"></a>3.9.启动测试</h2><p>我们分别启动：leyou-registry，leyou-gateway，leyou-item-service</p>
<p> <img src="/images/leyou04/1529335980812.png" alt="1529335980812"></p>
<p>查看Eureka面板：</p>
<p><img src="/images/leyou04/1529336014109.png" alt="1529336014109"></p>
<h2 id="3-10-测试路由规则"><a href="#3-10-测试路由规则" class="headerlink" title="3.10.测试路由规则"></a>3.10.测试路由规则</h2><p>为了测试路由规则是否畅通，我们是不是需要在item-service中编写一个controller接口呢？</p>
<p>其实不需要，SpringBoot提供了一个依赖：actuator</p>
<p>只要我们添加了actuator的依赖，它就会为我们生成一系列的访问接口：</p>
<ul>
<li>/info</li>
<li>/health</li>
<li>/refresh</li>
<li>…</li>
</ul>
<p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启后访问Eureka控制台：</p>
<p>鼠标悬停在item-service上，会显示一个地址：</p>
<p><img src="/images/leyou04/1529337273897.png" alt="1529337273897"></p>
<p>这就是actuator提供的接口，我们点击访问：</p>
<p><img src="/images/leyou04/1529337321847.png" alt="1529337321847"></p>
<p>因为我们没有添加信息，所以是一个空的json，但是可以肯定的是：我们能够访问到item-service了。</p>
<p>接下来我们通过路由访问试试，根据路由规则，我们需要访问的地址是：</p>
<p><a href="http://127.0.0.1:10010/api/item/actuator/info" target="_blank" rel="noopener">http://127.0.0.1:10010/api/item/actuator/info</a></p>
<p><img src="/images/leyou04/1529337396077.png" alt="1529337396077"></p>
<h2 id="3-11-通用工具模块"><a href="#3-11-通用工具模块" class="headerlink" title="3.11.通用工具模块"></a>3.11.通用工具模块</h2><p>有些工具或通用的约定内容，我们希望各个服务共享，因此需要创建一个工具模块：<code>leyou-common</code></p>
<p>右键leyou工程，使用maven来构建module：</p>
<p><img src="/images/leyou04/1529337583947.png" alt="1529337583947"></p>
<p>位置信息：</p>
<p><img src="/images/leyou04/1529337672465.png" alt="1529337672465"></p>
<p>结构：</p>
<p> <img src="/images/leyou04/1529337748507.png" alt="1529337748507"></p>
<p>目前还不需要编码。</p>
<p> <img src="/images/leyou04/1539770110464.png" alt="1539770110464"></p>
<h1 id="4-ES6语法指南"><a href="#4-ES6语法指南" class="headerlink" title="4.ES6语法指南"></a>4.ES6语法指南</h1><p>后端项目搭建完毕，接下来就是前端页面了。不过在这之前需要一些准备工作。我们需要学习ES6的语法标准。</p>
<p>什么是ES6？就是ECMAScript第6版标准。</p>
<h2 id="4-1-什么是ECMAScript？"><a href="#4-1-什么是ECMAScript？" class="headerlink" title="4.1.什么是ECMAScript？"></a>4.1.什么是ECMAScript？</h2><p>来看下前端的发展历程：</p>
<blockquote>
<p>web1.0时代：</p>
</blockquote>
<ul>
<li>最初的网页以HTML为主，是纯静态的网页。网页是只读的，信息流只能从服务的到客户端单向流通。<strong>开发人员也只关心页面的样式和内容</strong>即可。</li>
</ul>
<blockquote>
<p>web2.0时代：</p>
</blockquote>
<ul>
<li>1995年，网景工程师Brendan Eich 花了10天时间设计了JavaScript语言。</li>
<li>1996年，微软发布了JScript，其实是JavaScript的逆向工程实现。</li>
<li>1997年，为了统一各种不同script脚本语言，ECMA（欧洲计算机制造商协会）以JavaScript为基础，制定了<code>ECMAscript</code>标准规范。JavaScript和JScript都是<code>ECMAScript</code>的标准实现者，随后各大浏览器厂商纷纷实现了<code>ECMAScript</code>标准。</li>
</ul>
<p>所以，ECMAScript是浏览器脚本语言的规范，而各种我们熟知的js语言，如JavaScript则是规范的具体实现。</p>
<h2 id="4-2-ECMAScript的快速发展"><a href="#4-2-ECMAScript的快速发展" class="headerlink" title="4.2.ECMAScript的快速发展"></a>4.2.ECMAScript的快速发展</h2><p>而后，ECMAScript就进入了快速发展期。</p>
<ul>
<li><p>1998年6月，ECMAScript 2.0 发布。</p>
</li>
<li><p>1999年12月，ECMAScript 3.0 发布。这时，ECMAScript 规范本身也相对比较完善和稳定了，但是接下来的事情，就比较悲剧了。</p>
</li>
<li><p>2007年10月。。。。ECMAScript 4.0 草案发布。</p>
<p>这次的新规范，历时颇久，规范的新内容也有了很多争议。在制定ES4的时候，是分成了两个工作组同时工作的。</p>
<ul>
<li>一边是以 Adobe, Mozilla, Opera 和 Google为主的 ECMAScript 4.0 工作组。</li>
<li>一边是以 Microsoft 和 Yahoo 为主的 ECMAScript 3.1 工作组。</li>
</ul>
<p>ECMAScript 4 的很多主张比较激进，改动较大。而 ECMAScript 3.1 则主张小幅更新。最终经过 TC39 的会议，决定将一部分不那么激进的改动保留发布为 ECMAScript 3.1，而ES4的内容，则延续到了后来的ECMAScript5和6版本中</p>
</li>
<li><p>2009年12月，ECMAScript 5 发布。</p>
</li>
<li><p>2011年6月，ECMAScript 5.1 发布。</p>
</li>
<li><p>2015年6月，ECMAScript 6，也就是 ECMAScript 2015 发布了。 并且从 ECMAScript 6 开始，开始采用年号来做版本。即 ECMAScript 2015，就是ECMAScript6。 它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
</li>
</ul>
<h2 id="4-3-ES5和6的一些新特性"><a href="#4-3-ES5和6的一些新特性" class="headerlink" title="4.3.ES5和6的一些新特性"></a>4.3.ES5和6的一些新特性</h2><p>我们这里只把一些常用的进行学习，更详细的大家参考：<a href="http://es6.ruanyifeng.com/?search=reduce&x=0&y=0#README" target="_blank" rel="noopener">阮一峰的ES6教程</a></p>
<p>创建一个空的html页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-1-let-和-const-命令"><a href="#4-3-1-let-和-const-命令" class="headerlink" title="4.3.1.let 和 const 命令"></a>4.3.1.let 和 const 命令</h3><blockquote>
<p>var</p>
</blockquote>
<p>之前，js定义变量只有一个关键字：<code>var</code></p>
<p><code>var</code>有一个问题，就是定义的变量有时会莫名奇妙的成为全局变量。</p>
<p>例如这样的一段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"循环外："</span> + i)</span><br></pre></td></tr></table></figure>

<p>你猜下打印的结果是什么？</p>
<p><img src="/images/leyou04/1529376275020.png" alt="1529376275020"></p>
<blockquote>
<p>let</p>
</blockquote>
<p><code>let</code>所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p>
<p>我们把刚才的<code>var</code>改成<code>let</code>试试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"循环外："</span> + i)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/images/leyou04/1529395660265.png" alt="1529395660265"></p>
<blockquote>
<p>const</p>
</blockquote>
<p><code>const</code>声明的变量是常量，不能被修改</p>
<p><img src="/images/leyou04/1529420270814.png" alt="1529420270814"></p>
<h3 id="4-3-2-字符串扩展"><a href="#4-3-2-字符串扩展" class="headerlink" title="4.3.2.字符串扩展"></a>4.3.2.字符串扩展</h3><blockquote>
<p>新的API</p>
</blockquote>
<p>ES6为字符串扩展了几个新的API：</p>
<ul>
<li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li>
<li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>
<li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>
</ul>
<p>实验一下：</p>
<p> <img src="/images/leyou04/1526107640349.png" alt="1526107640349"></p>
<blockquote>
<p>字符串模板</p>
</blockquote>
<p>ES6中提供了`来作为字符串模板标记。我们可以这么玩：</p>
<p> <img src="/images/leyou04/1526108070980.png" alt="1526108070980"></p>
<p>在两个`之间的部分都会被作为字符串的值，不管你任意换行，甚至加入js脚本</p>
<h3 id="4-3-3-解构表达式"><a href="#4-3-3-解构表达式" class="headerlink" title="4.3.3.解构表达式"></a>4.3.3.解构表达式</h3><blockquote>
<p>数组解构</p>
</blockquote>
<p>比如有一个数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>我想获取其中的值，只能通过角标。ES6可以这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [x,y,z] = arr;<span class="comment">// x，y，z将与arr中的每个位置对应来取值</span></span><br><span class="line"><span class="comment">// 然后打印</span></span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p> <img src="/images/leyou04/1526109778368.png" alt="1526109778368"></p>
<blockquote>
<p>对象解构</p>
</blockquote>
<p>例如有个person对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以这么做：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解构表达式获取值</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,age,language&#125; = person;</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(language);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p> <img src="/images/leyou04/1526109984544.png" alt="1526109984544"></p>
<p>如过想要用其它变量接收，需要额外指定别名：</p>
<p> <img src="/images/leyou04/1526110159450.png" alt="1526110159450"></p>
<p><code>{name:n}</code>：name是person中的属性名，冒号后面的n是解构后要赋值给的变量。</p>
<h3 id="4-3-4-函数优化"><a href="#4-3-4-函数优化" class="headerlink" title="4.3.4.函数优化"></a>4.3.4.函数优化</h3><blockquote>
<p>函数参数默认值</p>
</blockquote>
<p>在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a , b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断b是否为空，为空就给默认值1</span></span><br><span class="line">    b = b || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<p>现在可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a , b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>箭头函数</p>
</blockquote>
<p>ES6中定义函数的简写方式：</p>
<p>一个参数时：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="keyword">var</span> print2 = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>

<p>多个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个参数的情况：</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a , b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br></pre></td></tr></table></figure>

<p>代码不止一行，可以用<code>{}</code>括起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对象的函数属性简写</p>
</blockquote>
<p>比如一个Person对象，里面有eat方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    <span class="comment">// 以前：</span></span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 箭头函数版：</span></span><br><span class="line">    eat2: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">"在吃"</span> + food),<span class="comment">// 这里拿不到this</span></span><br><span class="line">    <span class="comment">// 简写版：</span></span><br><span class="line">    eat3(food)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>箭头函数结合解构表达式</p>
</blockquote>
<p>比如有一个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + person.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果用箭头函数和解构表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hi = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span>  <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + name);</span><br></pre></td></tr></table></figure>

<h3 id="4-3-5-map和reduce"><a href="#4-3-5-map和reduce" class="headerlink" title="4.3.5.map和reduce"></a>4.3.5.map和reduce</h3><p>数组中新增了map和reduce方法。</p>
<blockquote>
<p>map</p>
</blockquote>
<p><code>map()</code>：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</p>
<p>举例：有一个字符串数组，我们希望转为int数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>,<span class="string">'20'</span>,<span class="string">'-5'</span>,<span class="string">'3'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">parseInt</span>(s));</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>

<p>  <img src="/images/leyou04/1526110796839.png" alt="1526110796839"></p>
<blockquote>
<p>reduce</p>
</blockquote>
<p><code>reduce()</code>：接收一个函数（必须）和一个初始值（可选）。</p>
<p>第一个参数（函数）接收两个参数：</p>
<ul>
<li>第一个参数是上一次reduce处理的结果</li>
<li>第二个参数是数组中要处理的下一个元素</li>
</ul>
<p><code>reduce()</code>会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数。如果是第一次，会把前两个元素作为计算参数，或者把用户指定的初始值作为起始参数</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1,20,-5,3]</span><br></pre></td></tr></table></figure>

<p>没有初始值：</p>
<p> <img src="/images/leyou04/1526111537204.png" alt="1526111537204"></p>
<p>指定初始值：</p>
<p> <img src="/images/leyou04/1526111580742.png" alt="1526111580742"></p>
<h3 id="4-3-6-对象扩展"><a href="#4-3-6-对象扩展" class="headerlink" title="4.3.6.对象扩展"></a>4.3.6.对象扩展</h3><p>ES6给Object拓展了许多新的方法，如：</p>
<ul>
<li><p>keys(obj)：获取对象的所有key形成的数组</p>
</li>
<li><p>values(obj)：获取对象的所有value形成的数组</p>
</li>
<li><p>entries(obj)：获取对象的所有key和value形成的二维数组。格式：<code>[[k1,v1],[k2,v2],...]</code></p>
</li>
<li><p>assign(dest, …src) ：将多个src对象的值 拷贝到 dest中（浅拷贝）。</p>
<p><img src="/images/leyou04/1527210872966.png" alt="1527210872966"></p>
</li>
</ul>
<h3 id="4-3-7-数组扩展"><a href="#4-3-7-数组扩展" class="headerlink" title="4.3.7.数组扩展"></a>4.3.7.数组扩展</h3><p>ES6给数组新增了许多方法：</p>
<ul>
<li>find(callback)：数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。 </li>
<li>findIndex(callback)：数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。 </li>
<li>includes(数组元素)：与find类似，如果匹配到元素，则返回true，代表找到了。</li>
</ul>

    <div id="aplayer-qEUzgZjf" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1297483" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2019/11/22/SpringCloud2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul>
<li>会配置Hystix熔断</li>
<li>会使用Feign进行远程调用</li>
<li>能独立搭建Zuul网关</li>
<li>能编写Zuul的过滤器</li>
</ul>
<a id="more"></a>
<h1 id="1-Hystrix"><a href="#1-Hystrix" class="headerlink" title="1.Hystrix"></a>1.Hystrix</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1.简介"></a>1.1.简介</h2><p>Hystrix,英文意思是豪猪，全身是刺，看起来就不好惹，是一种保护机制。</p>
<p>Hystrix也是Netflix公司的一款组件。</p>
<p>主页：<a href="https://github.com/Netflix/Hystrix/" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/</a></p>
<p><img src="/images/youle/1525658740266.jpg" alt="示例图"></p>
<p>那么Hystix的作用是什么呢？具体要保护什么呢？</p>
<p>Hystix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败。</p>
<h2 id="1-2-雪崩问题"><a href="#1-2-雪崩问题" class="headerlink" title="1.2.雪崩问题"></a>1.2.雪崩问题</h2><p>微服务中，服务间调用关系错综复杂，一个请求，可能需要调用多个微服务接口才能实现，会形成非常复杂的调用链路：</p>
<p> <img src="/images/youle/1533829099748.jpg" alt="示例图"></p>
<p>如图，一次业务请求，需要调用A、P、H、I四个服务，这四个服务又可能调用其它服务。</p>
<p>如果此时，某个服务出现异常：</p>
<p> <img src="/images/youle/1533829198240.jpg" alt="示例图"></p>
<p>例如微服务I发生异常，请求阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞：</p>
<p> <img src="/images/youle/1533829307389.jpg" alt="示例图"></p>
<p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，形成雪崩效应。</p>
<p>这就好比，一个汽车生产线，生产不同的汽车，需要使用不同的零件，如果某个零件因为种种原因无法使用，那么就会造成整台车无法装配，陷入等待零件的状态，直到零件到位，才能继续组装。  此时如果有很多个车型都需要这个零件，那么整个工厂都将陷入等待的状态，导致所有生产都陷入瘫痪。一个零件的波及范围不断扩大。 </p>
<p>Hystix解决雪崩问题的手段有两个：</p>
<ul>
<li>线程隔离</li>
<li>服务熔断</li>
</ul>
<h2 id="1-3-线程隔离，服务降级"><a href="#1-3-线程隔离，服务降级" class="headerlink" title="1.3.线程隔离，服务降级"></a>1.3.线程隔离，服务降级</h2><h3 id="1-3-1-原理"><a href="#1-3-1-原理" class="headerlink" title="1.3.1.原理"></a>1.3.1.原理</h3><p>线程隔离示意图：</p>
<p><img src="/images/youle/1533829598310.jpg" alt="示例图"></p>
<p>解读：</p>
<p>Hystrix为每个依赖服务调用分配一个小的线程池，如果线程池已满调用将被立即拒绝，默认不采用排队.加速失败判定时间。</p>
<p>用户的请求将不再直接访问服务，而是通过线程池中的空闲线程来访问服务，如果<strong>线程池已满</strong>，或者<strong>请求超时</strong>，则会进行降级处理，什么是服务降级？</p>
<blockquote>
<p>服务降级：优先保证核心服务，而非核心服务不可用或弱可用。</p>
</blockquote>
<p>用户的请求故障时，不会被阻塞，更不会无休止的等待或者看到系统崩溃，至少可以看到一个执行结果（例如返回友好的提示信息） 。</p>
<p>服务降级虽然会导致请求失败，但是不会导致阻塞，而且最多会影响这个依赖服务对应的线程池中的资源，对其它服务没有响应。</p>
<p>触发Hystix服务降级的情况：</p>
<ul>
<li>线程池已满</li>
<li>请求超时</li>
</ul>
<h3 id="1-3-2-动手实践"><a href="#1-3-2-动手实践" class="headerlink" title="1.3.2.动手实践"></a>1.3.2.动手实践</h3><h4 id="1-3-2-1-引入依赖"><a href="#1-3-2-1-引入依赖" class="headerlink" title="1.3.2.1.引入依赖"></a>1.3.2.1.引入依赖</h4><p>首先在itcast-service-consumer的pom.xml中引入Hystrix依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-2-开启熔断"><a href="#1-3-2-2-开启熔断" class="headerlink" title="1.3.2.2.开启熔断"></a>1.3.2.2.开启熔断</h4><p><img src="/images/youle/1535341341482.jpg" alt="示例图"></p>
<p>可以看到，我们类上的注解越来越多，在微服务中，经常会引入上面的三个注解，于是Spring就提供了一个组合注解：@SpringCloudApplication</p>
<p><img src="/images/youle/1535341390087.jpg" alt="示例图"></p>
<p>因此，我们可以使用这个组合注解来代替之前的3个注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItcastServiceConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ItcastServiceConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-3-编写降级逻辑"><a href="#1-3-2-3-编写降级逻辑" class="headerlink" title="1.3.2.3.编写降级逻辑"></a>1.3.2.3.编写降级逻辑</h4><p>我们改造itcast-service-consumer，当目标服务的调用出现故障，我们希望快速失败，给用户一个友好提示。因此需要提前编写好失败时的降级处理逻辑，要使用HystixCommond来完成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"queryUserByIdFallBack"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryUserById</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        String user = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://service-provider/user/"</span> + id, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryUserByIdFallBack</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"请求繁忙，请稍后再试！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要注意，因为熔断的降级逻辑方法必须跟正常逻辑方法保证：<strong>相同的参数列表和返回值声明</strong>。失败逻辑中返回User对象没有太大意义，一般会返回友好提示。所以我们把queryById的方法改造为返回String，反正也是Json数据。这样失败逻辑中返回一个错误说明，会比较方便。</p>
<p>说明：</p>
<ul>
<li>@HystrixCommand(fallbackMethod = “queryByIdFallBack”)：用来声明一个降级逻辑的方法</li>
</ul>
<p>测试：</p>
<p>当itcast-service-provder正常提供服务时，访问与以前一致。但是当我们将itcast-service-provider停机时，会发现页面返回了降级处理信息：</p>
<p><img src="/images/youle/1535852634763.jpg" alt="示例图"></p>
<h4 id="1-3-2-4-默认FallBack"><a href="#1-3-2-4-默认FallBack" class="headerlink" title="1.3.2.4.默认FallBack"></a>1.3.2.4.默认FallBack</h4><p>我们刚才把fallback写在了某个业务方法上，如果这样的方法很多，那岂不是要写很多。所以我们可以把Fallback配置加在类上，实现默认fallback：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer/user"</span>)</span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"fallBackMethod"</span>) <span class="comment">// 指定一个类的全局熔断方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">// 标记该方法需要熔断</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryUserById</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        String user = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://service-provider/user/"</span> + id, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断方法</span></span><br><span class="line"><span class="comment">     * 返回值要和被熔断的方法的返回值一致</span></span><br><span class="line"><span class="comment">     * 熔断方法不需要参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallBackMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"请求繁忙，请稍后再试！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@DefaultProperties(defaultFallback = “defaultFallBack”)：在类上指明统一的失败降级方法</li>
<li>@HystrixCommand：在方法上直接使用该注解，使用默认的剪辑方法。</li>
<li>defaultFallback：默认降级方法，不用任何参数，以匹配更多方法，但是返回值一定一致</li>
</ul>
<p><img src="/images/youle/1535852634763.jpg" alt="示例图"></p>
<h4 id="1-3-2-5-设置超时"><a href="#1-3-2-5-设置超时" class="headerlink" title="1.3.2.5.设置超时"></a>1.3.2.5.设置超时</h4><p>在之前的案例中，请求在超过1秒后都会返回错误信息，这是因为Hystix的默认超时时长为1，我们可以通过配置修改这个值：</p>
<p>我们可以通过<code>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</code>来设置Hystrix超时时间。该配置没有提示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure>

<p><strong>改造服务提供者</strong></p>
<p>改造服务提供者的UserController接口，随机休眠一段时间，以触发熔断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.userService.queryUserById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-服务熔断"><a href="#1-4-服务熔断" class="headerlink" title="1.4.服务熔断"></a>1.4.服务熔断</h2><h3 id="1-4-1-熔断原理"><a href="#1-4-1-熔断原理" class="headerlink" title="1.4.1.熔断原理"></a>1.4.1.熔断原理</h3><p>熔断器，也叫断路器，其英文单词为：Circuit Breaker </p>
<p><img src="/images/youle/1525658640314.jpg" alt="示例图"></p>
<p>熔断状态机3个状态：</p>
<ul>
<li>Closed：关闭状态，所有请求都正常访问。</li>
<li>Open：打开状态，所有请求都会被降级。Hystix会对请求情况计数，当一定时间内失败请求百分比达到阈值，则触发熔断，断路器会完全打开。默认失败比例的阈值是50%，请求次数最少不低于20次。</li>
<li>Half Open：半开状态，open状态不是永久的，打开后会进入休眠时间（默认是5S）。随后断路器会自动进入半开状态。此时会释放部分请求通过，若这些请求都是健康的，则会完全关闭断路器，否则继续保持打开，再次进行休眠计时</li>
</ul>
<h3 id="1-4-2-动手实践"><a href="#1-4-2-动手实践" class="headerlink" title="1.4.2.动手实践"></a>1.4.2.动手实践</h3><p>为了能够精确控制请求的成功或失败，我们在consumer的调用业务中加入一段逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"太忙了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String user = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://service-provider/user/"</span> + id, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样如果参数是id为1，一定失败，其它情况都成功。（不要忘了清空service-provider中的休眠逻辑）</p>
<p>我们准备两个请求窗口：</p>
<ul>
<li>一个请求：<a href="http://localhost/consumer/user/1，注定失败" target="_blank" rel="noopener">http://localhost/consumer/user/1，注定失败</a></li>
<li>一个请求：<a href="http://localhost/consumer/user/2，肯定成功" target="_blank" rel="noopener">http://localhost/consumer/user/2，肯定成功</a></li>
</ul>
<p>当我们疯狂访问id为1的请求时（超过20次），就会触发熔断。断路器会断开，一切请求都会被降级处理。</p>
<p>此时你访问id为2的请求，会发现返回的也是失败，而且失败时间很短，只有几毫秒左右：</p>
<p><img src="/images/youle/1543053265477.jpg" alt="示例图"></p>
<p>不过，默认的熔断触发要求较高，休眠时间窗较短，为了测试方便，我们可以通过配置修改熔断策略：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">circuitBreaker.requestVolumeThreshold</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">circuitBreaker.sleepWindowInMilliseconds</span>=<span class="string">10000</span></span><br><span class="line"><span class="meta">circuitBreaker.errorThresholdPercentage</span>=<span class="string">50</span></span><br></pre></td></tr></table></figure>

<p>解读：</p>
<ul>
<li>requestVolumeThreshold：触发熔断的最小请求次数，默认20</li>
<li>errorThresholdPercentage：触发熔断的失败请求最小占比，默认50%</li>
<li>sleepWindowInMilliseconds：休眠时长，默认是5000毫秒</li>
</ul>
<h1 id="2-Feign"><a href="#2-Feign" class="headerlink" title="2.Feign"></a>2.Feign</h1><p>在前面的学习中，我们使用了Ribbon的负载均衡功能，大大简化了远程调用时的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String user = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://service-provider/user/"</span> + id, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>如果就学到这里，你可能以后需要编写类似的大量重复代码，格式基本相同，无非参数不一样。有没有更优雅的方式，来对这些代码再次优化呢？</p>
<p>这就是我们接下来要学的Feign的功能了。</p>
<h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><p>有道词典的英文解释：</p>
<p><img src="/images/youle/1528855057359.jpg" alt="示例图"></p>
<p>为什么叫伪装？</p>
<p>Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。</p>
<p>项目主页：<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">https://github.com/OpenFeign/feign</a></p>
<p><img src="/images/youle/1525652009416.jpg" alt="示例图"></p>
<h2 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2.快速入门"></a>2.2.快速入门</h2><p>改造itcast-service-consumer工程</p>
<h3 id="2-2-1-导入依赖"><a href="#2-2-1-导入依赖" class="headerlink" title="2.2.1.导入依赖"></a>2.2.1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-开启Feign功能"><a href="#2-2-2-开启Feign功能" class="headerlink" title="2.2.2.开启Feign功能"></a>2.2.2.开启Feign功能</h3><p>我们在启动类上，<strong>添加注解</strong>，开启Feign功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启feign客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItcastServiceConsumerApplication</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ItcastServiceConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>删除RestTemplate</strong>：feign已经自动集成了Ribbon负载均衡的RestTemplate。所以，此处不需要再注册RestTemplate。</p>
<h3 id="2-2-3-Feign的客户端"><a href="#2-2-3-Feign的客户端" class="headerlink" title="2.2.3.Feign的客户端"></a>2.2.3.Feign的客户端</h3><p>在itcast-service-consumer工程中，添加UserClient接口：</p>
<p> <img src="/images/youle/1540683659305.jpg" alt="示例图"></p>
<p>内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service-provider"</span>) <span class="comment">// 标注该类是一个feign接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先这是一个接口，Feign会通过动态代理，帮我们生成实现类。这点跟mybatis的mapper很像</li>
<li><code>@FeignClient</code>，声明这是一个Feign客户端，类似<code>@Mapper</code>注解。同时通过<code>value</code>属性指定服务名称</li>
<li>接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果</li>
</ul>
<p>改造原来的调用逻辑，调用UserClient接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userClient.queryUserById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-4-启动测试"><a href="#2-2-4-启动测试" class="headerlink" title="2.2.4.启动测试"></a>2.2.4.启动测试</h3><p>访问接口： </p>
<p><img src="/images/youle/1535346290987.jpg" alt="示例图"></p>
<p>正常获取到了结果。</p>
<h2 id="2-3-负载均衡"><a href="#2-3-负载均衡" class="headerlink" title="2.3.负载均衡"></a>2.3.负载均衡</h2><p>Feign中本身已经集成了Ribbon依赖和自动配置：</p>
<p><img src="/images/youle/1528859608579.jpg" alt="示例图"></p>
<p>因此我们不需要额外引入依赖，也不需要再注册<code>RestTemplate</code>对象。</p>
<h2 id="2-4-Hystrix支持"><a href="#2-4-Hystrix支持" class="headerlink" title="2.4.Hystrix支持"></a>2.4.Hystrix支持</h2><p>Feign默认也有对Hystrix的集成：</p>
<p><img src="/images/youle/1528861288636.jpg" alt="示例图"></p>
<p>只不过，默认情况下是关闭的。我们需要通过下面的参数来开启：(在itcast-service-consumer工程添加配置内容)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br></pre></td></tr></table></figure>

<p>但是，Feign中的Fallback配置不像hystrix中那样简单了。</p>
<p>1）首先，我们要定义一个类UserClientFallback，实现刚才编写的UserClient，作为fallback的处理类</p>
<p> <img src="/images/youle/1540683742479.jpg" alt="示例图"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClientFallback</span> <span class="keyword">implements</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"服务器繁忙，请稍后再试！"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）然后在UserFeignClient中，指定刚才编写的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service-provider"</span>, fallback = UserClientFallback<span class="class">.<span class="keyword">class</span>) // 标注该类是一个<span class="title">feign</span>接口</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）重启测试：</p>
<p><img src="/images/youle/1535346896313.jpg" alt="示例图"></p>
<h2 id="2-5-请求压缩-了解"><a href="#2-5-请求压缩-了解" class="headerlink" title="2.5.请求压缩(了解)"></a>2.5.请求压缩(了解)</h2><p>Spring Cloud Feign 支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过下面的参数即可开启请求与响应的压缩功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启响应压缩</span></span><br></pre></td></tr></table></figure>

<p>同时，我们也可以对请求的数据类型，以及触发压缩的大小下限进行设置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br></pre></td></tr></table></figure>

<p>注：上面的数据类型、压缩大小下限均为默认值。</p>
<h2 id="2-6-日志级别-了解"><a href="#2-6-日志级别-了解" class="headerlink" title="2.6.日志级别(了解)"></a>2.6.日志级别(了解)</h2><p>前面讲过，通过<code>logging.level.xx=debug</code>来设置日志级别。然而这个对Fegin客户端而言不会产生效果。因为<code>@FeignClient</code>注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。</p>
<p>1）设置com.youle包下的日志级别都为debug</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<p>2）编写配置类，定义日志级别</p>
<p> <img src="/images/youle/1529113196740.jpg" alt="示例图"></p>
<p>内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignLogConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里指定的Level级别是FULL，Feign支持4种级别：</p>
<p><img src="/images/youle/1528863525224.jpg" alt="示例图"></p>
<ul>
<li>NONE：不记录任何日志信息，这是默认值。</li>
<li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li>
<li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li>
<li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li>
</ul>
<p>3）在FeignClient中指定配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service-privider"</span>, fallback = UserFeignClientFallback<span class="class">.<span class="keyword">class</span>, <span class="title">configuration</span> </span>= FeignConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）重启项目，即可看到每次访问的日志：</p>
<p><img src="/images/youle/1528863489923.jpg" alt="示例图"></p>
<h1 id="3-Zuul网关"><a href="#3-Zuul网关" class="headerlink" title="3.Zuul网关"></a>3.Zuul网关</h1><p>通过前面的学习，使用Spring Cloud实现微服务的架构基本成型，大致是这样的：</p>
<p><img src="//images/youle/1525674644660.jpg" alt="示例图"></p>
<p>  我们使用Spring Cloud Netflix中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Ribbon或Feign实现服务的消费以及均衡负载。为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。</p>
<p>  在该架构中，我们的服务集群包含：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过均衡负载公开至服务调用方。我们把焦点聚集在对外服务这块，直接暴露我们的服务地址，这样的实现是否合理，或者是否有更好的实现方式呢？</p>
<p>先来说说这样架构需要做的一些事儿以及存在的不足：</p>
<ul>
<li><p>破坏了服务无状态特点。</p>
<p>  为了保证对外服务的安全性，我们需要实现对服务访问的权限控制，而开放服务的权限控制机制将会贯穿并污染整个开放服务的业务逻辑，这会带来的最直接问题是，破坏了服务集群中REST API无状态的特点。</p>
<p>  从具体开发和测试的角度来说，在工作中除了要考虑实际的业务逻辑之外，还需要额外考虑对接口访问的控制处理。</p>
</li>
<li><p>无法直接复用既有接口。</p>
<p>  当我们需要对一个即有的集群内访问接口，实现外部服务访问时，我们不得不通过在原有接口上增加校验逻辑，或增加一个代理调用来实现权限控制，无法直接复用原有的接口。</p>
</li>
</ul>
<p>面对类似上面的问题，我们要如何解决呢？答案是：服务网关！</p>
<p>为了解决上面这些问题，我们需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器的 服务网关。</p>
<p>服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备<code>服务路由</code>、<code>均衡负载</code>功能之外，它还具备了<code>权限控制</code>等功能。Spring Cloud Netflix中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。</p>
<h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1.简介"></a>3.1.简介</h2><p>官网：<a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">https://github.com/Netflix/zuul</a></p>
<p> <img src="//images/youle/1525675037152.jpg" alt="示例图"></p>
<p>Zuul：维基百科</p>
<p>电影《捉鬼敢死队》中的怪兽，Zuul，在纽约引发了巨大骚乱。</p>
<p>事实上，在微服务架构中，Zuul就是守门的大Boss！一夫当关，万夫莫开！</p>
<p><img src="//images/youle/1525675168152.jpg" alt="示例图"></p>
<h2 id="3-2-Zuul加入后的架构"><a href="#3-2-Zuul加入后的架构" class="headerlink" title="3.2.Zuul加入后的架构"></a>3.2.Zuul加入后的架构</h2><p> <img src="//images/youle/1525675648881.jpg" alt="示例图"></p>
<p>不管是来自于客户端（PC或移动端）的请求，还是服务内部调用。一切对服务的请求都会经过Zuul这个网关，然后再由网关来实现 鉴权、动态路由等等操作。Zuul就是我们服务的统一入口。</p>
<h2 id="3-3-快速入门"><a href="#3-3-快速入门" class="headerlink" title="3.3.快速入门"></a>3.3.快速入门</h2><h3 id="3-3-1-新建工程"><a href="#3-3-1-新建工程" class="headerlink" title="3.3.1.新建工程"></a>3.3.1.新建工程</h3><p>填写基本信息：</p>
<p><img src="/images/youle/1529112749084.jpg" alt="示例图"></p>
<p>添加Zuul依赖：</p>
<p><img src="/images/youle/1529112691169.jpg" alt="示例图"></p>
<h3 id="3-3-2-编写配置"><a href="#3-3-2-编写配置" class="headerlink" title="3.3.2.编写配置"></a>3.3.2.编写配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span> <span class="comment">#指定服务名</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-编写引导类"><a href="#3-3-3-编写引导类" class="headerlink" title="3.3.3.编写引导类"></a>3.3.3.编写引导类</h3><p>通过<code>@EnableZuulProxy</code>注解开启Zuul的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启网关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItcastZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ItcastZuulApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-4-编写路由规则"><a href="#3-3-4-编写路由规则" class="headerlink" title="3.3.4.编写路由规则"></a>3.3.4.编写路由规则</h3><p>我们需要用Zuul来代理service-provider服务，先看一下控制面板中的服务状态：</p>
<p><img src="/images/youle/1542672192226.jpg" alt="示例图"></p>
<ul>
<li>ip为：127.0.0.1</li>
<li>端口为：8081</li>
</ul>
<p>映射规则：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span> <span class="comment">#指定服务名</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/service-provider/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://127.0.0.1:8081</span> <span class="comment"># 映射路径对应的实际url地址</span></span><br></pre></td></tr></table></figure>

<p>我们将符合<code>path</code> 规则的一切请求，都代理到 <code>url</code>参数指定的地址</p>
<p>本例中，我们将 <code>/service-provider/**</code>开头的请求，代理到<a href="http://127.0.0.1:8081" target="_blank" rel="noopener">http://127.0.0.1:8081</a></p>
<h3 id="3-3-5-启动测试"><a href="#3-3-5-启动测试" class="headerlink" title="3.3.5.启动测试"></a>3.3.5.启动测试</h3><p>访问的路径中需要加上配置规则的映射路径，我们访问：<a href="http://127.0.0.1:10010/service-provider/user/1" target="_blank" rel="noopener">http://127.0.0.1:10010/service-provider/user/1</a></p>
<p><img src="/images/youle/1543054030005.jpg" alt="示例图"></p>
<h2 id="3-4-面向服务的路由"><a href="#3-4-面向服务的路由" class="headerlink" title="3.4.面向服务的路由"></a>3.4.面向服务的路由</h2><p>在刚才的路由规则中，我们把路径对应的服务地址写死了！如果同一服务有多个实例的话，这样做显然就不合理了。我们应该根据服务的名称，去Eureka注册中心查找 服务对应的所有实例列表，然后进行动态路由才对！</p>
<p>对itcast-zuul工程修改优化：</p>
<h3 id="3-4-1-添加Eureka客户端依赖"><a href="#3-4-1-添加Eureka客户端依赖" class="headerlink" title="3.4.1.添加Eureka客户端依赖"></a>3.4.1.添加Eureka客户端依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-添加Eureka配置，获取服务信息"><a href="#3-4-2-添加Eureka配置，获取服务信息" class="headerlink" title="3.4.2.添加Eureka配置，获取服务信息"></a>3.4.2.添加Eureka配置，获取服务信息</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-3-开启Eureka客户端发现功能"><a href="#3-4-3-开启Eureka客户端发现功能" class="headerlink" title="3.4.3.开启Eureka客户端发现功能"></a>3.4.3.开启Eureka客户端发现功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ZuulDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-4-修改映射配置，通过服务名称获取"><a href="#3-4-4-修改映射配置，通过服务名称获取" class="headerlink" title="3.4.4.修改映射配置，通过服务名称获取"></a>3.4.4.修改映射配置，通过服务名称获取</h3><p>因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/service-provider/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">service-provider</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-5-启动测试"><a href="#3-4-5-启动测试" class="headerlink" title="3.4.5.启动测试"></a>3.4.5.启动测试</h3><p>再次启动，这次Zuul进行代理时，会利用Ribbon进行负载均衡访问：</p>
<p><img src="/images/youle/1543054030005.jpg" alt="示例图"></p>
<h2 id="3-5-简化的路由配置"><a href="#3-5-简化的路由配置" class="headerlink" title="3.5.简化的路由配置"></a>3.5.简化的路由配置</h2><p>在刚才的配置中，我们的规则是这样的：</p>
<ul>
<li><code>zuul.routes.&lt;route&gt;.path=/xxx/**</code>： 来指定映射路径。<code>&lt;route&gt;</code>是自定义的路由名</li>
<li><code>zuul.routes.&lt;route&gt;.serviceId=service-provider</code>：来指定服务名。</li>
</ul>
<p>而大多数情况下，我们的<code>&lt;route&gt;</code>路由名称往往和服务名会写成一样的。因此Zuul就提供了一种简化的配置语法：<code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code></p>
<p>比方说上面我们关于service-provider的配置可以简化为一条：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="string">/service-provider/**</span> <span class="comment"># 这里是映射路径</span></span><br></pre></td></tr></table></figure>

<p>省去了对服务名称的配置。</p>
<h2 id="3-6-默认的路由规则"><a href="#3-6-默认的路由规则" class="headerlink" title="3.6.默认的路由规则"></a>3.6.默认的路由规则</h2><p>在使用Zuul的过程中，上面讲述的规则已经大大的简化了配置项。但是当服务较多时，配置也是比较繁琐的。因此Zuul就指定了默认的路由规则：</p>
<ul>
<li>默认情况下，一切服务的映射路径就是服务名本身。例如服务名为：<code>service-provider</code>，则默认的映射路径就  是：<code>/service-provider/**</code></li>
</ul>
<p>也就是说，刚才的映射规则我们完全不配置也是OK的，不信就试试看。</p>
<h2 id="3-7-路由前缀"><a href="#3-7-路由前缀" class="headerlink" title="3.7.路由前缀"></a>3.7.路由前缀</h2><p>配置示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="string">/service-provider/**</span></span><br><span class="line">    <span class="attr">service-consumer:</span> <span class="string">/service-consumer/**</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br></pre></td></tr></table></figure>

<p>我们通过<code>zuul.prefix=/api</code>来指定了路由的前缀，这样在发起请求时，路径就要以/api开头。</p>
<p><img src="/images/youle/1543054221479.jpg" alt="示例图"></p>
<h2 id="3-8-过滤器"><a href="#3-8-过滤器" class="headerlink" title="3.8.过滤器"></a>3.8.过滤器</h2><p>Zuul作为网关的其中一个重要功能，就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现的。</p>
<h3 id="3-8-1-ZuulFilter"><a href="#3-8-1-ZuulFilter" class="headerlink" title="3.8.1.ZuulFilter"></a>3.8.1.ZuulFilter</h3><p>ZuulFilter是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ZuulFilter implements IZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;<span class="comment">// 来自IZuulFilter</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException</span>;<span class="comment">// IZuulFilter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>shouldFilter</code>：返回一个<code>Boolean</code>值，判断该过滤器是否需要执行。返回true执行，返回false不执行。</li>
<li><code>run</code>：过滤器的具体业务逻辑。</li>
<li><code>filterType</code>：返回字符串，代表过滤器的类型。包含以下4种：<ul>
<li><code>pre</code>：请求在被路由之前执行</li>
<li><code>route</code>：在路由请求时调用</li>
<li><code>post</code>：在route和errror过滤器之后调用</li>
<li><code>error</code>：处理请求时发生错误调用</li>
</ul>
</li>
<li><code>filterOrder</code>：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。</li>
</ul>
<h3 id="3-8-2-过滤器执行生命周期"><a href="#3-8-2-过滤器执行生命周期" class="headerlink" title="3.8.2.过滤器执行生命周期"></a>3.8.2.过滤器执行生命周期</h3><p>这张是Zuul官网提供的请求生命周期图，清晰的表现了一个请求在各个过滤器的执行顺序。</p>
<p><img src="/images/youle/1529152248172.jpg" alt="示例图"></p>
<p>正常流程：</p>
<ul>
<li>请求到达首先会经过pre类型过滤器，而后到达route类型，进行路由，请求就到达真正的服务提供者，执行请求，返回结果后，会到达post过滤器。而后返回响应。</li>
</ul>
<p>异常流程：</p>
<ul>
<li>整个过程中，pre或者route过滤器出现异常，都会直接进入error过滤器，在error处理完毕后，会将请求交给POST过滤器，最后返回给用户。</li>
<li>如果是error过滤器自己出现异常，最终也会进入POST过滤器，将最终结果返回给请求客户端。</li>
<li>如果是POST过滤器出现异常，会跳转到error过滤器，但是与pre和route不同的是，请求不会再到达POST过滤器了。</li>
</ul>
<p>所有内置过滤器列表：</p>
<p> <img src="/images/youle/1525682427811.jpg" alt="示例图"></p>
<h3 id="3-8-3-使用场景"><a href="#3-8-3-使用场景" class="headerlink" title="3.8.3.使用场景"></a>3.8.3.使用场景</h3><p>场景非常多：</p>
<ul>
<li>请求鉴权：一般放在pre类型，如果发现没有访问权限，直接就拦截了</li>
<li>异常处理：一般会在error类型和post类型过滤器中结合来处理。</li>
<li>服务调用时长统计：pre和post结合使用。</li>
</ul>
<h2 id="3-9-自定义过滤器"><a href="#3-9-自定义过滤器" class="headerlink" title="3.9.自定义过滤器"></a>3.9.自定义过滤器</h2><p>接下来我们来自定义一个过滤器，模拟一个登录的校验。基本逻辑：如果请求中有access-token参数，则认为请求有效，放行。</p>
<h3 id="3-9-1-定义过滤器类"><a href="#3-9-1-定义过滤器类" class="headerlink" title="3.9.1.定义过滤器类"></a>3.9.1.定义过滤器类</h3><p> <img src="/images/youle/1529136926454.jpg" alt="示例图"></p>
<p>内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器类型，前置过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的执行顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该过滤器是否生效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆校验逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取zuul提供的上下文对象</span></span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 从上下文对象中获取请求对象</span></span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        <span class="comment">// 获取token信息</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"access-token"</span>);</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 过滤该请求，不对其进行路由</span></span><br><span class="line">            context.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 设置响应状态码，401</span></span><br><span class="line">            context.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="comment">// 设置响应信息</span></span><br><span class="line">            context.setResponseBody(<span class="string">"&#123;\"status\":\"401\", \"text\":\"request error!\"&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验通过，把登陆信息放入上下文信息，继续向后执行</span></span><br><span class="line">        context.set(<span class="string">"token"</span>, token);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-9-2-测试"><a href="#3-9-2-测试" class="headerlink" title="3.9.2.测试"></a>3.9.2.测试</h3><p>没有token参数时，访问失败：</p>
<p><img src="/images/youle/1529161460740.jpg" alt="示例图"></p>
<p>添加token参数后：</p>
<p><img src="/images/youle/1529161252733.jpg" alt="示例图"></p>
<h2 id="3-10-负载均衡和熔断"><a href="#3-10-负载均衡和熔断" class="headerlink" title="3.10.负载均衡和熔断"></a>3.10.负载均衡和熔断</h2><p>Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1S，很容易就触发了。因此建议我们手动进行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span> <span class="comment"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure>


    <div id="aplayer-dvDjjGZQ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="92311" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>

]]></content>
      <tags>
        <tag>-微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>最短距离问题</title>
    <url>/2019/11/20/%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="涉及算法"><a href="#涉及算法" class="headerlink" title="涉及算法"></a>涉及算法</h2><p>迪杰斯特拉算法和弗洛伊德算法，点进来看看吧！</p>
<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄<br>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里<br>问：如何计算出G村庄到 其它各个村庄的最短距离?<br>如果从其它点出发到各个点的最短距离又是多少?<br><img src="/images/suanfa/1574234760(1).jpg" alt="示例图"></p>
<h2 id="迪杰斯特拉算法（DijkstraAlgorithm）"><a href="#迪杰斯特拉算法（DijkstraAlgorithm）" class="headerlink" title="迪杰斯特拉算法（DijkstraAlgorithm）"></a>迪杰斯特拉算法（DijkstraAlgorithm）</h2><p>迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。</p>
<p>思路：<br>设置出发顶点为v，顶点集合V{v1,v2,vi…}，v到V中各顶点的距离构成距离集合Dis，Dis{d1,d2,di…}，Dis集合记录着v到图中各顶点的距离(到自身可以看作0，v到vi距离对应为di)<br>1.从Dis中选择值最小的di并移出Dis集合，同时移出V集合中对应的顶点vi，此时的v到vi即为最短路径<br>2.更新Dis集合，更新规则为：比较v到V集合中顶点的距离值，与v通过vi到V集合中顶点的距离值，保留值较小的一个(同时也应该更新顶点的前驱节点为vi，表明是通过vi到达的)<br>重复执行两步骤，直到最短路径顶点为目标顶点即可结束</p>
<p>上代码兄弟们：</p>
<pre><code>public class DijkstraAlgorithm {
    public static void main(String[] args) {
        char[] vertex = { &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos; };
        //邻接矩阵
        int[][] matrix = new int[vertex.length][vertex.length];
        final int N = 65535;// 表示不可以连接
        matrix[0]=new int[]{N,5,7,N,N,N,2};  
        matrix[1]=new int[]{5,N,N,9,N,N,3};  
        matrix[2]=new int[]{7,N,N,N,8,N,N};  
        matrix[3]=new int[]{N,9,N,N,N,4,N};  
        matrix[4]=new int[]{N,N,8,N,N,5,4};  
        matrix[5]=new int[]{N,N,N,4,5,N,6};  
        matrix[6]=new int[]{2,3,N,N,4,6,N};
        //创建 Graph对象
        Graph graph = new Graph(vertex, matrix);
        //测试, 看看图的邻接矩阵是否ok
        graph.showGraph();
        //测试迪杰斯特拉算法
        graph.dsj(2);//C
        graph.showDijkstra();


    }
}
class Graph {
    private char[] vertex; // 顶点数组
    private int[][] matrix; // 邻接矩阵
    private VisitedVertex vv; //已经访问的顶点的集合
    // 构造器
    public Graph(char[] vertex, int[][] matrix) {
        this.vertex = vertex;
        this.matrix = matrix;
    }

    //显示结果
    public void showDijkstra() {
        vv.show();
    }
    // 显示图
    public void showGraph() {
        for (int[] link : matrix) {
            System.out.println(Arrays.toString(link));
        }
    }

    //迪杰斯特拉算法实现
    /**
     * 
     * @param index 表示出发顶点对应的下标
     */
    public void dsj(int index) {
        vv = new VisitedVertex(vertex.length, index);
        update(index);//更新index顶点到周围顶点的距离和前驱顶点
        for(int j = 1; j &lt;vertex.length; j++) {
            index = vv.updateArr();// 选择并返回新的访问顶点
            update(index); // 更新index顶点到周围顶点的距离和前驱顶点
        } 
    }



    //更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点,
    private void update(int index) {
        int len = 0;
        //根据遍历我们的邻接矩阵的  matrix[index]行
        for(int j = 0; j &lt; matrix[index].length; j++) {
            // len 含义是 : 出发顶点到index顶点的距离 + 从index顶点到j顶点的距离的和 
            len = vv.getDis(index) + matrix[index][j];
            // 如果j顶点没有被访问过，并且 len 小于出发顶点到j顶点的距离，就需要更新
            if(!vv.in(j) &amp;&amp; len &lt; vv.getDis(j)) {
                vv.updatePre(j, index); //更新j顶点的前驱为index顶点
                vv.updateDis(j, len); //更新出发顶点到j顶点的距离
            }
        }
    }
}
// 已访问顶点集合
class VisitedVertex {
    // 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新
    public int[] already_arr;
    // 每个下标对应的值为前一个顶点下标, 会动态更新
    public int[] pre_visited;
    // 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis
    public int[] dis;

    //构造器
    /**
     * 
     * @param length :表示顶点的个数 
     * @param index: 出发顶点对应的下标, 比如G顶点，下标就是6
     */
    public VisitedVertex(int length, int index) {
        this.already_arr = new int[length];
        this.pre_visited = new int[length];
        this.dis = new int[length];
        //初始化 dis数组
        Arrays.fill(dis, 65535);
        this.already_arr[index] = 1; //设置出发顶点被访问过
        this.dis[index] = 0;//设置出发顶点的访问距离为0

    }
    /**
     * 功能: 判断index顶点是否被访问过
     * @param index
     * @return 如果访问过，就返回true, 否则访问false
     */
    public boolean in(int index) {
        return already_arr[index] == 1;
    }

    /**
     * 功能: 更新出发顶点到index顶点的距离
     * @param index
     * @param len
     */
    public void updateDis(int index, int len) {
        dis[index] = len;
    }
    /**
     * 功能: 更新pre这个顶点的前驱顶点为index顶点
     * @param pre
     * @param index
     */
    public void updatePre(int pre, int index) {
        pre_visited[pre] = index;
    }
    /**
     * 功能:返回出发顶点到index顶点的距离
     * @param index
     */
    public int getDis(int index) {
        return dis[index];
    }


    /**
     * 继续选择并返回新的访问顶点， 比如这里的G 完后，就是 A点作为新的访问顶点(注意不是出发顶点)
     * @return
     */
    public int updateArr() {
        int min = 65535, index = 0;
        for(int i = 0; i &lt; already_arr.length; i++) {
            if(already_arr[i] == 0 &amp;&amp; dis[i] &lt; min ) {
                min = dis[i];
                index = i;
            }
        }
        //更新 index 顶点被访问过
        already_arr[index] = 1;
        return index;
    }

    //显示最后的结果
    //即将三个数组的情况输出
    public void show() {

        System.out.println(&quot;==========================&quot;);
        //输出already_arr
        for(int i : already_arr) {
            System.out.print(i + &quot; &quot;);
        }
        System.out.println();
        //输出pre_visited
        for(int i : pre_visited) {
            System.out.print(i + &quot; &quot;);
        }
        System.out.println();
        //输出dis
        for(int i : dis) {
            System.out.print(i + &quot; &quot;);
        }
        System.out.println();
        //为了好看最后的最短距离，我们处理
        char[] vertex = { &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos; };
        int count = 0;
        for (int i : dis) {
            if (i != 65535) {
                System.out.print(vertex[count] + &quot;(&quot;+i+&quot;) &quot;);
            } else {
                System.out.println(&quot;N &quot;);
            }
            count++;
        }
        System.out.println();

    }
}</code></pre><h2 id="弗洛伊德算法（FloydAlgorithm）"><a href="#弗洛伊德算法（FloydAlgorithm）" class="headerlink" title="弗洛伊德算法（FloydAlgorithm）"></a>弗洛伊德算法（FloydAlgorithm）</h2><p>1.和Dijkstra算法一样，弗洛伊德(Floyd)算法也是一种用于寻找给定的加权图中顶点间最短路径的算法。该算法名称以创始人之一、1978年图灵奖获得者、斯坦福大学计算机科学系教授罗伯特·弗洛伊德命名<br>2.弗洛伊德算法(Floyd)计算图中各个顶点之间的最短路径<br>3.迪杰斯特拉算法用于计算图中某一个顶点到其他顶点的最短路径。<br>弗洛伊德算法 VS 迪杰斯特拉算法：迪杰斯特拉算法通过选定的被访问顶点，求出从出发访问顶点到其他顶点的最短路径；弗洛伊德算法中每一个顶点都是出发访问点，所以需要将每一个顶点看做被访问顶点，求出从每一个顶点到其他顶点的最短路径。</p>
<p>直接上代码：</p>
<pre><code>public class FloydAlgorithm {
    public static void main(String[] args) {
        // 测试看看图是否创建成功
        char[] vertex = { &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos; };
        //创建邻接矩阵
        int[][] matrix = new int[vertex.length][vertex.length];
        final int N = 65535;
        matrix[0] = new int[] { 0, 5, 7, N, N, N, 2 };
        matrix[1] = new int[] { 5, 0, N, 9, N, N, 3 };
        matrix[2] = new int[] { 7, N, 0, N, 8, N, N };
        matrix[3] = new int[] { N, 9, N, 0, N, 4, N };
        matrix[4] = new int[] { N, N, 8, N, 0, 5, 4 };
        matrix[5] = new int[] { N, N, N, 4, 5, 0, 6 };
        matrix[6] = new int[] { 2, 3, N, N, 4, 6, 0 };

        //创建 Graph 对象
        Graph graph = new Graph(vertex.length, matrix, vertex);
        //调用弗洛伊德算法
        graph.floyd();
        graph.show();
    }
}
// 创建图
class Graph {
    private char[] vertex; // 存放顶点的数组
    private int[][] dis; // 保存，从各个顶点出发到其它顶点的距离，最后的结果，也是保留在该数组
    private int[][] pre;// 保存到达目标顶点的前驱顶点
    // 构造器
    /**
     * 
     * @param length
     *            大小
     * @param matrix
     *            邻接矩阵
     * @param vertex
     *            顶点数组
     */
    public Graph(int length, int[][] matrix, char[] vertex) {
        this.vertex = vertex;
        this.dis = matrix;
        this.pre = new int[length][length];
        // 对pre数组初始化, 注意存放的是前驱顶点的下标
        for (int i = 0; i &lt; length; i++) {
            Arrays.fill(pre[i], i);
        }
    }
    // 显示pre数组和dis数组
    public void show() {
        //为了显示便于阅读，我们优化一下输出
        char[] vertex = { &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos; };
        for (int k = 0; k &lt; dis.length; k++) {
            // 先将pre数组输出的一行
            for (int i = 0; i &lt; dis.length; i++) {
                System.out.print(vertex[pre[k][i]] + &quot; &quot;);
            }
            System.out.println();
            // 输出dis数组的一行数据
            for (int i = 0; i &lt; dis.length; i++) {
                System.out.print(&quot;(&quot;+vertex[k]+&quot;到&quot;+vertex[i]+&quot;的最短路径是&quot; + dis[k][i] + &quot;) &quot;);
            }
            System.out.println();
            System.out.println();
        }
    }

    //弗洛伊德算法, 比较容易理解，而且容易实现
    public void floyd() {
        int len = 0; //变量保存距离
        //对中间顶点遍历， k 就是中间顶点的下标 [A, B, C, D, E, F, G] 
        for(int k = 0; k &lt; dis.length; k++) { // 
            //从i顶点开始出发 [A, B, C, D, E, F, G]
            for(int i = 0; i &lt; dis.length; i++) {
                //到达j顶点 // [A, B, C, D, E, F, G]
                for(int j = 0; j &lt; dis.length; j++) {
                    len = dis[i][k] + dis[k][j];// =&gt; 求出从i 顶点出发，经过 k中间顶点，到达 j 顶点距离
                    if(len &lt; dis[i][j]) {//如果len小于 dis[i][j]
                        dis[i][j] = len;//更新距离
                        pre[i][j] = pre[k][j];//更新前驱顶点
                    }
                }
            }
        }
    }
}</code></pre>
    <div id="aplayer-GMKsaPUj" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="92330" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>最小生成树</title>
    <url>/2019/11/19/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="/images/suanfa/1574224540(1).jpg" alt="示例图"><br>有胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通<br>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里<br>问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</p>
<a id="more"></a>
<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>修路问题本质就是就是最小生成树问题， 先介绍一下最小生成树(Minimum Cost Spanning Tree)，简称MST。<br>给定一个带权的无向连通图,如何选取一棵生成树,使树上所有边上权的总和为最小,这叫最小生成树<br>1.N个顶点，一定有N-1条边<br>2.包含全部顶点<br>3.N-1条边都在图中<br>举例说明(如图）:<br><img src="/images/suanfa/1574226009(1).jpg" alt="示例图"><br>求最小生成树的算法主要是普里姆算法和克鲁斯卡尔算法</p>
<h2 id="普利姆算法（primAlgorithm）"><a href="#普利姆算法（primAlgorithm）" class="headerlink" title="普利姆算法（primAlgorithm）"></a>普利姆算法（primAlgorithm）</h2><p>普利姆(Prim)算法求最小生成树，也就是在包含n个顶点的连通图中，找出只有(n-1)条边包含所有n个顶点的连通子图，也就是所谓的极小连通子图</p>
<p>普利姆的算法思路如下:<br>1.设G=(V,E)是连通网，T=(U,D)是最小生成树，V,U是顶点集合，E,D是边的集合<br>2.若从顶点u开始构造最小生成树，则从集合V中取出顶点u放入集合U中，标记顶点v的visited[u]=1<br>3.若集合U中顶点ui与集合V-U中的顶点vj之间存在边，则寻找这些边中权值最小的边，但不能构成回路，将顶点vj加入集合U中，将边（ui,vj）加入集合D中，标记visited[vj]=1<br>4.重复步骤②，直到U与V相等，即所有顶点都被标记为访问过，此时D中有n-1条边</p>
<p><img src="/images/suanfa/1574226550(1).jpg" alt="示例图"></p>
<p>代码如下：</p>
<pre><code>public class PrimAlgorithm {
    public static void main(String[] args) {
        //测试看看图是否创建ok
        char[] data = new char[]{&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;};
        int verxs = data.length;
        //邻接矩阵的关系使用二维数组表示,10000这个大数，表示两个点不联通
        int [][]weight=new int[][]{
            {10000,5,7,10000,10000,10000,2},
            {5,10000,10000,9,10000,10000,3},
            {7,10000,10000,10000,8,10000,10000},
            {10000,9,10000,10000,10000,4,10000},
            {10000,10000,8,10000,10000,5,4},
            {10000,10000,10000,4,5,10000,6},
            {2,3,10000,10000,4,6,10000},};

        //创建MGraph对象
        MGraph graph = new MGraph(verxs);
        //创建一个MinTree对象
        MinTree minTree = new MinTree();
        minTree.createGraph(graph, verxs, data, weight);
        //输出
        minTree.showGraph(graph);
        //测试普利姆算法
        minTree.prim(graph, 1);// 
    }
}
//创建最小生成树-&gt;村庄的图
class MinTree {
    //创建图的邻接矩阵
    /**
     * 
     * @param graph 图对象
     * @param verxs 图对应的顶点个数
     * @param data 图的各个顶点的值
     * @param weight 图的邻接矩阵
     */
    public void createGraph(MGraph graph, int verxs, char data[], int[][] weight) {
        int i, j;
        for(i = 0; i &lt; verxs; i++) {//顶点
            graph.data[i] = data[i];
            for(j = 0; j &lt; verxs; j++) {
                graph.weight[i][j] = weight[i][j];
            }
        }
    }

    //显示图的邻接矩阵
    public void showGraph(MGraph graph) {
        for(int[] link: graph.weight) {
            System.out.println(Arrays.toString(link));
        }
    }

    //编写prim算法，得到最小生成树
    /**
     * 
     * @param graph 图
     * @param v 表示从图的第几个顶点开始生成&apos;A&apos;-&gt;0 &apos;B&apos;-&gt;1...
     */
    public void prim(MGraph graph, int v) {
        //visited[] 标记结点(顶点)是否被访问过
        int visited[] = new int[graph.verxs];
        //visited[] 默认元素的值都是0, 表示没有访问过
//        for(int i =0; i &lt;graph.verxs; i++) {
//            visited[i] = 0;
//        }

        //把当前这个结点标记为已访问
        visited[v] = 1;
        //h1 和 h2 记录两个顶点的下标
        int h1 = -1;
        int h2 = -1;
        int minWeight = 10000; //将 minWeight 初始成一个大数，后面在遍历过程中，会被替换
        for(int k = 0; k &lt; graph.verxs - 1; k++) {//因为有 graph.verxs顶点，普利姆算法结束后，有 graph.verxs-1边

            //这个是确定每一次生成的子图 ，和哪个结点的距离最近
            for(int i = 0; i &lt; graph.verxs; i++) {// i结点表示被访问过的结点
                for(int j = 0; j&lt; graph.verxs;j++) {//j结点表示还没有访问过的结点
                    if(visited[i] == 1 &amp;&amp; visited[j] == 0 &amp;&amp; graph.weight[i][j] &lt; minWeight) {
                        //替换minWeight(寻找已经访问过的结点和未访问过的结点间的权值最小的边)
                        minWeight = graph.weight[i][j];
                        h1 = i;
                        h2 = j;
                    }
                }
            }
            //找到一条边是最小
            System.out.println(&quot;边&lt;&quot; + graph.data[h1] + &quot;,&quot; + graph.data[h2] + &quot;&gt; 权值:&quot; + minWeight);
            //将当前这个结点标记为已经访问
            visited[h2] = 1;
            //minWeight 重新设置为最大值 10000
            minWeight = 10000;
        }

    }
}
class MGraph {
    int verxs; //表示图的节点个数
    char[] data;//存放结点数据
    int[][] weight; //存放边，就是我们的邻接矩阵

    public MGraph(int verxs) {
        this.verxs = verxs;
        data = new char[verxs];
        weight = new int[verxs][verxs];
    }
}</code></pre><h2 id="克鲁斯卡尔算法-KruskalAlgorithm"><a href="#克鲁斯卡尔算法-KruskalAlgorithm" class="headerlink" title="克鲁斯卡尔算法(KruskalAlgorithm)"></a>克鲁斯卡尔算法(KruskalAlgorithm)</h2><p><img src="/images/suanfa/1574226753(1).jpg" alt="示例图"></p>
<p>克鲁斯卡尔(Kruskal)算法，是用来求加权连通图的最小生成树的算法。<br>基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路<br>具体做法：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止</p>
<p>可知，克鲁斯卡尔算法需要排序，边分为起点和终点，判断终点是否相等，则可判断是否构成回路</p>
<p>代码如下（代码中用到的排序是冒泡排序，可以换成其他速度更快的排序来优化）：</p>
<pre><code>public class KruskalCase {
    private int edgeNum; //边的个数
    private char[] vertexs; //顶点数组
    private int[][] matrix; //邻接矩阵
    //使用 INF 表示两个顶点不能连通
    private static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {
        char[] vertexs = {&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;};
        //克鲁斯卡尔算法的邻接矩阵  
          int matrix[][] = {
          /*A*//*B*//*C*//*D*//*E*//*F*//*G*/
    /*A*/ {   0,  12, INF, INF, INF,  16,  14},
    /*B*/ {  12,   0,  10, INF, INF,   7, INF},
    /*C*/ { INF,  10,   0,   3,   5,   6, INF},
    /*D*/ { INF, INF,   3,   0,   4, INF, INF},
    /*E*/ { INF, INF,   5,   4,   0,   2,   8},
    /*F*/ {  16,   7,   6, INF,   2,   0,   9},
    /*G*/ {  14, INF, INF, INF,   8,   9,   0}}; 
          //大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.

          //创建KruskalCase 对象实例
          KruskalCase kruskalCase = new KruskalCase(vertexs, matrix);
          //输出构建的
          kruskalCase.print();
          kruskalCase.kruskal();

    }

    //构造器
    public KruskalCase(char[] vertexs, int[][] matrix) {
        //初始化顶点数和边的个数
        int vlen = vertexs.length;

        //初始化顶点, 复制拷贝的方式
        this.vertexs = new char[vlen];
        for(int i = 0; i &lt; vertexs.length; i++) {
            this.vertexs[i] = vertexs[i];
        }

        //初始化边, 使用的是复制拷贝的方式
        this.matrix = new int[vlen][vlen];
        for(int i = 0; i &lt; vlen; i++) {
            for(int j= 0; j &lt; vlen; j++) {
                this.matrix[i][j] = matrix[i][j];
            }
        }
        //统计边的条数
        for(int i =0; i &lt; vlen; i++) {
            for(int j = i+1; j &lt; vlen; j++) {
                if(this.matrix[i][j] != INF) {
                    edgeNum++;
                }
            }
        }

    }
    public void kruskal() {
        int index = 0; //表示最后结果数组的索引
        int[] ends = new int[edgeNum]; //用于保存&quot;已有最小生成树&quot; 中的每个顶点在最小生成树中的终点
        //创建结果数组, 保存最后的最小生成树
        EData[] rets = new EData[edgeNum];

        //获取图中 所有的边的集合 ， 一共有12边
        EData[] edges = getEdges();
        System.out.println(&quot;图的边的集合=&quot; + Arrays.toString(edges) + &quot; 共&quot;+ edges.length); //12

        //按照边的权值大小进行排序(从小到大)
        sortEdges(edges);

        //遍历edges 数组，将边添加到最小生成树中时，判断是准备加入的边否形成了回路，如果没有，就加入 rets, 否则不能加入
        for(int i=0; i &lt; edgeNum; i++) {
            //获取到第i条边的第一个顶点(起点)
            int p1 = getPosition(edges[i].start); //p1=4
            //获取到第i条边的第2个顶点
            int p2 = getPosition(edges[i].end); //p2 = 5

            //获取p1这个顶点在已有最小生成树中的终点
            int m = getEnd(ends, p1); //m = 4
            //获取p2这个顶点在已有最小生成树中的终点
            int n = getEnd(ends, p2); // n = 5
            //是否构成回路
            if(m != n) { //没有构成回路
                ends[m] = n; // 设置m 在&quot;已有最小生成树&quot;中的终点 &lt;E,F&gt; [0,0,0,0,5,0,0,0,0,0,0,0]
                rets[index++] = edges[i]; //有一条边加入到rets数组
            }
        }
        //&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; &lt;B,F&gt; &lt;E,G&gt; &lt;A,B&gt;。
        //统计并打印 &quot;最小生成树&quot;, 输出  rets
        System.out.println(&quot;最小生成树为&quot;);
        for(int i = 0; i &lt; index; i++) {
            System.out.println(rets[i]);
        }


    }

    //打印邻接矩阵
    public void print() {
        System.out.println(&quot;邻接矩阵为: \n&quot;);
        for(int i = 0; i &lt; vertexs.length; i++) {
            for(int j=0; j &lt; vertexs.length; j++) {
                System.out.printf(&quot;%12d&quot;, matrix[i][j]);
            }
            System.out.println();//换行
        }
    }
    /**
     * 功能：对边进行排序处理, 冒泡排序
     * @param edges 边的集合
     */
    private void sortEdges(EData[] edges) {
        for(int i = 0; i &lt; edges.length - 1; i++) {
            for(int j = 0; j &lt; edges.length - 1 - i; j++) {
                if(edges[j].weight &gt; edges[j+1].weight) {//交换
                    EData tmp = edges[j];
                    edges[j] = edges[j+1];
                    edges[j+1] = tmp;
                }
            }
         }
    }
    /**
     * 
     * @param ch 顶点的值，比如&apos;A&apos;,&apos;B&apos;
     * @return 返回ch顶点对应的下标，如果找不到，返回-1
     */
    private int getPosition(char ch) {
        for(int i = 0; i &lt; vertexs.length; i++) {
            if(vertexs[i] == ch) {//找到
                return i;
            }
        }
        //找不到,返回-1
        return -1;
    }
    /**
     * 功能: 获取图中边，放到EData[] 数组中，后面我们需要遍历该数组
     * 是通过matrix 邻接矩阵来获取
     * EData[] 形式 [[&apos;A&apos;,&apos;B&apos;, 12], [&apos;B&apos;,&apos;F&apos;,7], .....]
     * @return
     */
    private EData[] getEdges() {
        int index = 0;
        EData[] edges = new EData[edgeNum];
        for(int i = 0; i &lt; vertexs.length; i++) {
            for(int j=i+1; j &lt;vertexs.length; j++) {
                if(matrix[i][j] != INF) {
                    edges[index++] = new EData(vertexs[i], vertexs[j], matrix[i][j]);
                }
            }
        }
        return edges;
    }
    /**
     * 功能: 获取下标为i的顶点的终点(), 用于后面判断两个顶点的终点是否相同
     * @param ends ： 数组就是记录了各个顶点对应的终点是哪个,ends 数组是在遍历过程中，逐步形成
     * @param i : 表示传入的顶点对应的下标
     * @return 返回的就是 下标为i的这个顶点对应的终点的下标, 一会回头还有来理解
     */
    private int getEnd(int[] ends, int i) { // i = 4 [0,0,0,0,5,0,0,0,0,0,0,0]
        while(ends[i] != 0) {
            i = ends[i];
        }
        return i;
    }

}
//创建一个类EData ，它的对象实例就表示一条边
class EData {
    char start; //边的一个点
    char end; //边的另外一个点
    int weight; //边的权值
    //构造器
    public EData(char start, char end, int weight) {
        this.start = start;
        this.end = end;
        this.weight = weight;
    }
    //重写toString, 便于输出边信息
    @Override
    public String toString() {
        return &quot;EData [&lt;&quot; + start + &quot;, &quot; + end + &quot;&gt;= &quot; + weight + &quot;]&quot;;
    }


}</code></pre>
    <div id="aplayer-bOYxCsDx" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="28481103" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2019/11/15/greedy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="贪贪贪"><a href="#贪贪贪" class="headerlink" title="贪贪贪"></a>贪贪贪</h2><p>小孩子才做选择，我全都要</p>
<a id="more"></a>
<h2 id="贪心算法介绍"><a href="#贪心算法介绍" class="headerlink" title="贪心算法介绍"></a>贪心算法介绍</h2><p>贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法<br>贪婪算法所得到的结果不一定是最优的结果(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</p>
<h2 id="贪心算法最佳应用-集合覆盖"><a href="#贪心算法最佳应用-集合覆盖" class="headerlink" title="贪心算法最佳应用-集合覆盖"></a>贪心算法最佳应用-集合覆盖</h2><p>假设存在如下表的需要付费的广播台，以及广播台信号可以覆盖的地区。 如何选择最少的广播台，让所有的地区都可以接收到信号</p>
<p><img src="/images/suanfa/1573785066(1).jpg" alt="示例图"></p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>如何找出覆盖所有地区的广播台的集合呢，使用穷举法实现,列出每个可能的广播台的集合，这被称为幂集。假设总的有n个广播台，则广播台的组合总共有2ⁿ -1 个,假设每秒可以计算10个子集， 如图:</p>
<p><img src="/images/suanfa/1573785156(1).jpg" alt="示例图"></p>
<p>使用贪婪算法，效率高:<br>目前并没有算法可以快速计算得到准备的值，使用贪婪算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合:<br>1.遍历所有的广播电台, 找到一个覆盖了最多未覆盖的地区的电台(此电台可能包含一些已覆盖的地区，但没有关系）<br>2.将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。<br>3.重复第1步直到覆盖了全部的地区</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>public class GreedyAlgorithm {
    public static void main(String[] args) {
        //创建广播电台,放入到Map
        HashMap&lt;String,HashSet&lt;String&gt;&gt; broadcasts = new HashMap&lt;String, HashSet&lt;String&gt;&gt;();
        //将各个电台放入到broadcasts
        HashSet&lt;String&gt; hashSet1 = new HashSet&lt;String&gt;();
        hashSet1.add(&quot;北京&quot;);
        hashSet1.add(&quot;上海&quot;);
        hashSet1.add(&quot;天津&quot;);

        HashSet&lt;String&gt; hashSet2 = new HashSet&lt;String&gt;();
        hashSet2.add(&quot;广州&quot;);
        hashSet2.add(&quot;北京&quot;);
        hashSet2.add(&quot;深圳&quot;);

        HashSet&lt;String&gt; hashSet3 = new HashSet&lt;String&gt;();
        hashSet3.add(&quot;成都&quot;);
        hashSet3.add(&quot;上海&quot;);
        hashSet3.add(&quot;杭州&quot;);


        HashSet&lt;String&gt; hashSet4 = new HashSet&lt;String&gt;();
        hashSet4.add(&quot;上海&quot;);
        hashSet4.add(&quot;天津&quot;);

        HashSet&lt;String&gt; hashSet5 = new HashSet&lt;String&gt;();
        hashSet5.add(&quot;杭州&quot;);
        hashSet5.add(&quot;大连&quot;);

        //加入到map
        broadcasts.put(&quot;K1&quot;, hashSet1);
        broadcasts.put(&quot;K2&quot;, hashSet2);
        broadcasts.put(&quot;K3&quot;, hashSet3);
        broadcasts.put(&quot;K4&quot;, hashSet4);
        broadcasts.put(&quot;K5&quot;, hashSet5);

        //allAreas 存放所有的地区
        HashSet&lt;String&gt; allAreas = new HashSet&lt;String&gt;();
        allAreas.add(&quot;北京&quot;);
        allAreas.add(&quot;上海&quot;);
        allAreas.add(&quot;天津&quot;);
        allAreas.add(&quot;广州&quot;);
        allAreas.add(&quot;深圳&quot;);
        allAreas.add(&quot;成都&quot;);
        allAreas.add(&quot;杭州&quot;);
        allAreas.add(&quot;大连&quot;);

        //创建ArrayList, 存放选择的电台集合
        ArrayList&lt;String&gt; selects = new ArrayList&lt;String&gt;();

        //定义一个临时的集合， 在遍历的过程中，存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集
        HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;();

        //定义给maxKey ， 保存在一次遍历过程中，能够覆盖最大未覆盖的地区对应的电台的key
        //如果maxKey 不为null , 则会加入到 selects
        String maxKey = null;
        while(allAreas.size() != 0) { // 如果allAreas 不为0, 则表示还没有覆盖到所有的地区
            //每进行一次while,需要
            maxKey = null;

            //遍历 broadcasts, 取出对应key
            for(String key : broadcasts.keySet()) {
                //每进行一次for
                tempSet.clear();
                //当前这个key能够覆盖的地区
                HashSet&lt;String&gt; areas = broadcasts.get(key);
                tempSet.addAll(areas);
                //求出tempSet 和   allAreas 集合的交集, 交集会赋给 tempSet
                tempSet.retainAll(allAreas);
                //如果当前这个集合包含的未覆盖地区的数量，比maxKey指向的集合地区还多
                //就需要重置maxKey
                // tempSet.size() &gt;broadcasts.get(maxKey).size()) 体现出贪心算法的特点,每次都选择最优的
                if(tempSet.size() &gt; 0 &amp;&amp; 
                        (maxKey == null || tempSet.size() &gt;broadcasts.get(maxKey).size())){
                    maxKey = key;
                }
            }
            //maxKey != null, 就应该将maxKey 加入selects
            if(maxKey != null) {
                selects.add(maxKey);
                //将maxKey指向的广播电台覆盖的地区，从 allAreas 去掉
                allAreas.removeAll(broadcasts.get(maxKey));
            }

        }

        System.out.println(&quot;得到的选择结果是&quot; + selects);//[K1,K2,K3,K5]



    }
}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>贪婪算法所得到的结果不一定是最优的结果(有时候会是最优解)，但是都是相对近似(接近)最优解的结果，比如上题的算法选出的是K1, K2, K3, K5，符合覆盖了全部的地区，但是我们发现 K2, K3,K4,K5 也可以覆盖全部地区，如果K2 的使用成本低于K1,那么我们上题的 K1, K2, K3, K5 虽然是满足条件，但是并不是最优的.</p>

    <div id="aplayer-fvJvyfQx" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="25714352" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/2019/11/14/KMP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="拒绝暴力匹配"><a href="#拒绝暴力匹配" class="headerlink" title="拒绝暴力匹配"></a>拒绝暴力匹配</h2><p>大胆Say No ！！！！！！</p>
<a id="more"></a>
<h2 id="暴力匹配算法"><a href="#暴力匹配算法" class="headerlink" title="暴力匹配算法"></a>暴力匹配算法</h2><p>如果用暴力匹配的思路，并假设现在str1匹配到 i 位置，子串str2匹配到 j 位置，则有:<br>1.如果当前字符匹配成功（即str1[i] == str2[j]），则i++，j++，继续匹配下一个字符<br>2.如果失配（即str1[i]! = str2[j]），令i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。<br>3.用暴力方法解决的话就会有大量的回溯，每次只移动一位，若是不匹配，移动到下一位接着判断，浪费了大量的时间。(不可行!)</p>
<h2 id="KMP算法介绍"><a href="#KMP算法介绍" class="headerlink" title="KMP算法介绍"></a>KMP算法介绍</h2><p>KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法<br>Knuth-Morris-Pratt 字符串查找算法，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法.<br>KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间</p>
<h2 id="部分匹配值怎么来的？"><a href="#部分匹配值怎么来的？" class="headerlink" title="部分匹配值怎么来的？"></a>部分匹配值怎么来的？</h2><p><img src="/images/suanfa/1573718747.jpg" alt="示例图"><br><img src="/images/suanfa/1573718832(1).jpg" alt="示例图"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>public class KMPAlgorithm {
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        String str1 = &quot;BBC ABCDAB ABCDABCDABDE&quot;;
        String str2 = &quot;ABCDABD&quot;;
        //String str2 = &quot;BBC&quot;;

        int[] next = kmpNext(&quot;ABCDABD&quot;); //[0, 1, 2, 0]
        System.out.println(&quot;next=&quot; + Arrays.toString(next));

        int index = kmpSearch(str1, str2, next);
        System.out.println(&quot;index=&quot; + index); // 15了


    }

    //写出我们的kmp搜索算法
    /**
     * 
     * @param str1 源字符串
     * @param str2 子串
     * @param next 部分匹配表, 是子串对应的部分匹配表
     * @return 如果是-1就是没有匹配到，否则返回第一个匹配的位置
     */
    public static int kmpSearch(String str1, String str2, int[] next) {

        //遍历 
        for(int i = 0, j = 0; i &lt; str1.length(); i++) {

            //需要处理 str1.charAt(i) ！= str2.charAt(j), 去调整j的大小
            //KMP算法核心点, 可以验证...
            while( j &gt; 0 &amp;&amp; str1.charAt(i) != str2.charAt(j)) {
                j = next[j-1]; 
            }

            if(str1.charAt(i) == str2.charAt(j)) {
                j++;
            }            
            if(j == str2.length()) {//找到了 // j = 3 i 
                return i - j + 1;
            }
        }
        return  -1;
    }
    //获取到一个字符串(子串) 的部分匹配值表
    public static  int[] kmpNext(String dest) {
        //创建一个next 数组保存部分匹配值
        int[] next = new int[dest.length()];
        next[0] = 0; //如果字符串是长度为1 部分匹配值就是0
        for(int i = 1, j = 0; i &lt; dest.length(); i++) {
            //当dest.charAt(i) != dest.charAt(j) ，我们需要从next[j-1]获取新的j
            //直到我们发现 有  dest.charAt(i) == dest.charAt(j)成立才退出
            //这时kmp算法的核心点
            while(j &gt; 0 &amp;&amp; dest.charAt(i) != dest.charAt(j)) {
                j = next[j-1];
            }

            //当dest.charAt(i) == dest.charAt(j) 满足时，部分匹配值就是+1
            if(dest.charAt(i) == dest.charAt(j)) {
                j++;
            }
            next[i] = j;
        }
        return next;
    }
}</code></pre>
    <div id="aplayer-hDYXCUuo" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1392089153" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>/2019/11/14/%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="图的举例说明"><a href="#图的举例说明" class="headerlink" title="图的举例说明"></a>图的举例说明</h2><p>图是一种数据结构，其中结点可以具有零个或多个相邻元素。两个结点之间的连接称为边。 结点也可以称为顶点。如图：<br><img src="/images/suanfa/1573717048(1).jpg" alt="示例图"></p>
<a id="more"></a>
<h2 id="图的表示方式"><a href="#图的表示方式" class="headerlink" title="图的表示方式"></a>图的表示方式</h2><p>1.二维数组表示（邻接矩阵）<br><img src="/images/suanfa/1573717190(1).jpg" alt="示例图"></p>
<p>2.链表表示（邻接表）<br><img src="/images/suanfa/1573717249(1).jpg" alt="示例图"></p>
<h2 id="图遍历介绍-最终代码最后给，直接copy到你的IDE中查看"><a href="#图遍历介绍-最终代码最后给，直接copy到你的IDE中查看" class="headerlink" title="图遍历介绍(最终代码最后给，直接copy到你的IDE中查看)"></a>图遍历介绍(最终代码最后给，直接copy到你的IDE中查看)</h2><p>所谓图的遍历，即是对结点的访问。一个图有那么多个结点，如何遍历这些结点，需要特定策略，一般有两种访问策略:<br>(1)深度优先遍历<br>(2)广度优先遍历</p>
<h3 id="深度优先遍历基本思想"><a href="#深度优先遍历基本思想" class="headerlink" title="深度优先遍历基本思想"></a>深度优先遍历基本思想</h3><p>图的深度优先搜索(Depth First Search)<br>深度优先遍历，从初始访问结点出发，初始访问结点可能有多个邻接结点，深度优先遍历的策略就是首先访问第一个邻接结点，然后再以这个被访问的邻接结点作为初始结点，访问它的第一个邻接结点，可以这样理解：每次都在访问完当前结点后首先访问当前结点的第一个邻接结点。我们可以看到，这样的访问策略是优先往纵向挖掘深入，而不是对一个结点的所有邻接结点进行横向访问。显然，深度优先搜索是一个递归的过程</p>
<p>深度优先遍历算法步骤:<br>1.访问初始结点v，并标记结点v为已访问。<br>2.查找结点v的第一个邻接结点w。<br>3.若w存在，则继续执行4，如果w不存在，则回到第1步，将从v的下一个结点继续。<br>4.若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后进行步骤123）。<br>5.查找结点v的w邻接结点的下一个邻接结点，转到步骤3。</p>
<p><img src="/images/suanfa/1573717464(1).jpg" alt="示例图"></p>
<h3 id="图的广度优先遍历基本思想"><a href="#图的广度优先遍历基本思想" class="headerlink" title="图的广度优先遍历基本思想"></a>图的广度优先遍历基本思想</h3><p>图的广度优先搜索(Broad First Search) 。<br>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点</p>
<p>广度优先遍历算法步骤:<br>1.访问初始结点v并标记结点v为已访问。<br>2.结点v入队列<br>3.当队列非空时，继续执行，否则算法结束。<br>4.出队列，取得队头结点u。<br>5.查找结点u的第一个邻接结点w。<br>6.若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：<br>6.1 若结点w尚未被访问，则访问结点w并标记为已访问。<br>6.2 结点w入队列<br>6.3 查找结点u的继w邻接结点后的下一个邻接结点w，转到步骤6。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>public class Graph {
    private ArrayList&lt;String&gt; vertexList; //存储顶点集合
    private int[][] edges; //存储图对应的邻结矩阵
    private int numOfEdges; //表示边的数目
    //定义给数组boolean[], 记录某个结点是否被访问
    private boolean[] isVisited;

    public static void main(String[] args) {
        //测试一把图是否创建ok
        int n = 8;  //结点的个数
        //String Vertexs[] = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;};
        String Vertexs[] = {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;};

        //创建图对象
        Graph graph = new Graph(n);
        //循环的添加顶点
        for(String vertex: Vertexs) {
            graph.insertVertex(vertex);
        }

        //添加边
        //A-B A-C B-C B-D B-E 
//        graph.insertEdge(0, 1, 1); // A-B
//        graph.insertEdge(0, 2, 1); // 
//        graph.insertEdge(1, 2, 1); // 
//        graph.insertEdge(1, 3, 1); // 
//        graph.insertEdge(1, 4, 1); // 

        //更新边的关系
        graph.insertEdge(0, 1, 1);
        graph.insertEdge(0, 2, 1);
        graph.insertEdge(1, 3, 1);
        graph.insertEdge(1, 4, 1);
        graph.insertEdge(3, 7, 1);
        graph.insertEdge(4, 7, 1);
        graph.insertEdge(2, 5, 1);
        graph.insertEdge(2, 6, 1);
        graph.insertEdge(5, 6, 1);


        //显示一把邻结矩阵
        graph.showGraph();

        //测试一把，我们的dfs遍历是否ok
        System.out.println(&quot;深度遍历&quot;);
        graph.dfs(); // A-&gt;B-&gt;C-&gt;D-&gt;E [1-&gt;2-&gt;4-&gt;8-&gt;5-&gt;3-&gt;6-&gt;7]
//        System.out.println();
        System.out.println(&quot;广度优先!&quot;);
        graph.bfs(); // A-&gt;B-&gt;C-&gt;D-E [1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8]

    }

    //构造器
    public Graph(int n) {
        //初始化矩阵和vertexList
        edges = new int[n][n];
        vertexList = new ArrayList&lt;String&gt;(n);
        numOfEdges = 0;

    }

    //得到第一个邻接结点的下标 w 
    /**
     * 
     * @param index 
     * @return 如果存在就返回对应的下标，否则返回-1
     */
    public int getFirstNeighbor(int index) {
        for(int j = 0; j &lt; vertexList.size(); j++) {
            if(edges[index][j] &gt; 0) {
                return j;
            }
        }
        return -1;
    }
    //根据前一个邻接结点的下标来获取下一个邻接结点
    public int getNextNeighbor(int v1, int v2) {
        for(int j = v2 + 1; j &lt; vertexList.size(); j++) {
            if(edges[v1][j] &gt; 0) {
                return j;
            }
        }
        return -1;
    }

    //深度优先遍历算法
    //i 第一次就是 0
    private void dfs(boolean[] isVisited, int i) {
        //首先我们访问该结点,输出
        System.out.print(getValueByIndex(i) + &quot;-&gt;&quot;);
        //将结点设置为已经访问
        isVisited[i] = true;
        //查找结点i的第一个邻接结点w
        int w = getFirstNeighbor(i);
        while(w != -1) {//说明有
            if(!isVisited[w]) {
                dfs(isVisited, w);
            }
            //如果w结点已经被访问过
            w = getNextNeighbor(i, w);
        }

    }

    //对dfs 进行一个重载, 遍历我们所有的结点，并进行 dfs
    public void dfs() {
        isVisited = new boolean[vertexList.size()];
        //遍历所有的结点，进行dfs[回溯]
        for(int i = 0; i &lt; getNumOfVertex(); i++) {
            if(!isVisited[i]) {
                dfs(isVisited, i);
            }
        }
    }

    //对一个结点进行广度优先遍历的方法
    private void bfs(boolean[] isVisited, int i) {
        int u ; // 表示队列的头结点对应下标
        int w ; // 邻接结点w
        //队列，记录结点访问的顺序
        LinkedList queue = new LinkedList();
        //访问结点，输出结点信息
        System.out.print(getValueByIndex(i) + &quot;=&gt;&quot;);
        //标记为已访问
        isVisited[i] = true;
        //将结点加入队列
        queue.addLast(i);

        while( !queue.isEmpty()) {
            //取出队列的头结点下标
            u = (Integer)queue.removeFirst();
            //得到第一个邻接结点的下标 w 
            w = getFirstNeighbor(u);
            while(w != -1) {//找到
                //是否访问过
                if(!isVisited[w]) {
                    System.out.print(getValueByIndex(w) + &quot;=&gt;&quot;);
                    //标记已经访问
                    isVisited[w] = true;
                    //入队
                    queue.addLast(w);
                }
                //以u为前驱点，找w后面的下一个邻结点
                w = getNextNeighbor(u, w); //体现出我们的广度优先
            }
        }

    } 

    //遍历所有的结点，都进行广度优先搜索
    public void bfs() {
        isVisited = new boolean[vertexList.size()];
        for(int i = 0; i &lt; getNumOfVertex(); i++) {
            if(!isVisited[i]) {
                bfs(isVisited, i);
            }
        }
    }

    //图中常用的方法
    //返回结点的个数
    public int getNumOfVertex() {
        return vertexList.size();
    }
    //显示图对应的矩阵
    public void showGraph() {
        for(int[] link : edges) {
            System.err.println(Arrays.toString(link));
        }
    }
    //得到边的数目
    public int getNumOfEdges() {
        return numOfEdges;
    }
    //返回结点i(下标)对应的数据 0-&gt;&quot;A&quot; 1-&gt;&quot;B&quot; 2-&gt;&quot;C&quot;
    public String getValueByIndex(int i) {
        return vertexList.get(i);
    }
    //返回v1和v2的权值
    public int getWeight(int v1, int v2) {
        return edges[v1][v2];
    }
    //插入结点
    public void insertVertex(String vertex) {
        vertexList.add(vertex);
    }
    //添加边
    /**
     * 
     * @param v1 表示点的下标即使第几个顶点  &quot;A&quot;-&quot;B&quot; &quot;A&quot;-&gt;0 &quot;B&quot;-&gt;1
     * @param v2 第二个顶点对应的下标
     * @param weight 表示 
     */
    public void insertEdge(int v1, int v2, int weight) {
        edges[v1][v2] = weight;
        edges[v2][v1] = weight;
        numOfEdges++;
    }
}</code></pre>
    <div id="aplayer-YZzISOJT" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1403250178" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>背包问题（01背包）</title>
    <url>/2019/11/13/knapsackProblem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="数码宝贝"><a href="#数码宝贝" class="headerlink" title="数码宝贝"></a>数码宝贝</h2><p>亚古兽进化—&gt;暴龙兽！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p>
<a id="more"></a>
<h2 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h2><p>1.动态规划算法的核心思想是将大问题分解成小问题解决，从而一步步获取最优解的处理算法<br>2.与分治方法不同的是，适合于用动态规划求解的问题，经分解得到的子问题往往不是互相独立的<br>3.动态规划可以通过填表的方式来逐步推进，得到最优解</p>
<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p><img src="/images/suanfa/1573628365(1).jpg" alt="示例图"><br><img src="/images/suanfa/1573628473(1).jpg" alt="示例图"><br><img src="/images/suanfa/1573628525(1).jpg" alt="示例图"></p>
<p>看了上面图片的内容后，我直接上代码：</p>
<pre><code>public class KnapsackProblem {
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        int[] w = {1, 4, 3 };//物品的重量
        int[] val = {1500, 3000, 3100}; //物品的价值 这里val[i] 就是前面讲的v[i]
        int m = 5; //背包的容量
        int n = val.length; //物品的个数



        //创建二维数组，
        //v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值
        int[][] v = new int[n+1][m+1];
        //为了记录放入商品的情况，我们定一个二维数组
        int[][] path = new int[n+1][m+1];

        //初始化第一行和第一列, 这里在本程序中，可以不去处理，因为默认就是0
        for(int i = 0; i &lt; v.length; i++) {
            v[i][0] = 0; //将第一列设置为0
        }
        for(int i=0; i &lt; v[0].length; i++) {
            v[0][i] = 0; //将第一行设置0
        }


        //根据前面得到公式来动态规划处理
        for(int i = 1; i &lt; v.length; i++) { //不处理第一行 i是从1开始的
            for(int j=1; j &lt; v[0].length; j++) {//不处理第一列, j是从1开始的
                //公式
                if(w[i-1]&gt; j) { // 因为我们程序i 是从1开始的，因此原来公式中的 w[i] 修改成 w[i-1]
                    v[i][j]=v[i-1][j];
                } else {
                    //说明:
                    //因为我们的i 从1开始的， 因此公式需要调整成
                    //v[i][j]=Math.max(v[i-1][j], val[i-1]+v[i-1][j-w[i-1]]);
                    //v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);
                    //为了记录商品存放到背包的情况，我们不能直接的使用上面的公式，需要使用if-else来体现公式
                    if(v[i - 1][j] &lt; val[i - 1] + v[i - 1][j - w[i - 1]]) {
                        v[i][j] = val[i - 1] + v[i - 1][j - w[i - 1]];
                        //把当前的情况记录到path
                        path[i][j] = 1;
                    } else {
                        v[i][j] = v[i - 1][j];
                    }

                }
            }
        }

        //输出一下v 看看目前的情况
        for(int i =0; i &lt; v.length;i++) {
            for(int j = 0; j &lt; v[i].length;j++) {
                System.out.print(v[i][j] + &quot; &quot;);
            }
            System.out.println();
        }

        System.out.println(&quot;============================&quot;);
        //输出最后我们是放入的哪些商品
        //遍历path, 这样输出会把所有的放入情况都得到, 其实我们只需要最后的放入
//        for(int i = 0; i &lt; path.length; i++) {
//            for(int j=0; j &lt; path[i].length; j++) {
//                if(path[i][j] == 1) {
//                    System.out.printf(&quot;第%d个商品放入到背包\n&quot;, i);
//                }
//            }
//        }

        //动脑筋
        int i = path.length - 1; //行的最大下标
        int j = path[0].length - 1;  //列的最大下标
        while(i &gt; 0 &amp;&amp; j &gt; 0 ) { //从path的最后开始找
            if(path[i][j] == 1) {
                System.out.printf(&quot;第%d个商品放入到背包\n&quot;, i); 
                j -= w[i-1]; //w[i-1]
            }
            i--;
        }

    }
}</code></pre>
    <div id="aplayer-sTkexIOO" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="4940920" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希表</title>
    <url>/2019/11/10/hashtable/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Surprise"><a href="#Surprise" class="headerlink" title="Surprise"></a>Surprise</h2><p>没得歌这篇</p>
<a id="more"></a>
<h2 id="Google公司的一个上机题"><a href="#Google公司的一个上机题" class="headerlink" title="Google公司的一个上机题"></a>Google公司的一个上机题</h2><p>有一个公司，当有新员工来报道时，要求将该员工的信息加入（id，姓名），当输入该员工的id时，要求查找到该员工的所有信息<br>要求：<br>1.不使用数据库，速度越快越好<br>2.添加时保证id从低到高插入<br>3.使用链表来实现哈希表，该链表不带头<br>4.思路分析并画出示意图</p>
<h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p><img src="/images/suanfa/1573360335(1).jpg" alt="示例图"></p>
<p>上代码：</p>
<pre><code>        //创建哈希表
        HashTab hashTab = new HashTab(7);

        //写一个简单的菜单
        String key = &quot;&quot;;
        Scanner scanner = new Scanner(System.in);
        while(true) {
            System.out.println(&quot;add:  添加雇员&quot;);
            System.out.println(&quot;list: 显示雇员&quot;);
            System.out.println(&quot;find: 查找雇员&quot;);
            System.out.println(&quot;exit: 退出系统&quot;);

            key = scanner.next();
            switch (key) {
            case &quot;add&quot;:
                System.out.println(&quot;输入id&quot;);
                int id = scanner.nextInt();
                System.out.println(&quot;输入名字&quot;);
                String name = scanner.next();
                //创建 雇员
                Emp emp = new Emp(id, name);
                hashTab.add(emp);
                break;
            case &quot;list&quot;:
                hashTab.list();
                break;
            case &quot;find&quot;:
                System.out.println(&quot;请输入要查找的id&quot;);
                id = scanner.nextInt();
                hashTab.findEmpById(id);
                break;
            case &quot;exit&quot;:
                scanner.close();
                System.exit(0);
            default:
                break;
            }
        }

    }
}
//创建HashTab 管理多条链表
class HashTab {
    private EmpLinkedList[] empLinkedListArray;
    private int size; //表示有多少条链表

    //构造器
    public HashTab(int size) {
        this.size = size;
        //初始化empLinkedListArray
        empLinkedListArray = new EmpLinkedList[size];
        //？留一个坑, 这时不要分别初始化每个链表
        for(int i = 0; i &lt; size; i++) {
            empLinkedListArray[i] = new EmpLinkedList();
        }
    }

    //添加雇员
    public void add(Emp emp) {
        //根据员工的id ,得到该员工应当添加到哪条链表
        int empLinkedListNO = hashFun(emp.id);
        //将emp 添加到对应的链表中
        empLinkedListArray[empLinkedListNO].add(emp);

    }
    //遍历所有的链表,遍历hashtab
    public void list() {
        for(int i = 0; i &lt; size; i++) {
            empLinkedListArray[i].list(i);
        }
    }

    //根据输入的id,查找雇员
    public void findEmpById(int id) {
        //使用散列函数确定到哪条链表查找
        int empLinkedListNO = hashFun(id);
        Emp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);
        if(emp != null) {//找到
            System.out.printf(&quot;在第%d条链表中找到 雇员 id = %d\n&quot;, (empLinkedListNO + 1), id);
        }else{
            System.out.println(&quot;在哈希表中，没有找到该雇员~&quot;);
        }
    }

    //编写散列函数, 使用一个简单取模法
    public int hashFun(int id) {
        return id % size;
    }


}
//表示一个雇员
class Emp {
    public int id;
    public String name;
    public Emp next; //next 默认为 null
    public Emp(int id, String name) {
        super();
        this.id = id;
        this.name = name;
    }
}
//创建EmpLinkedList ,表示链表
class EmpLinkedList {
    //头指针，执行第一个Emp,因此我们这个链表的head 是直接指向第一个Emp
    private Emp head; //默认null

    //添加雇员到链表
    //说明
    //1. 假定，当添加雇员时，id 是自增长，即id的分配总是从小到大
    //   因此我们将该雇员直接加入到本链表的最后即可
    public void add(Emp emp) {
        //如果是添加第一个雇员
        if(head == null) {
            head = emp;
            return;
        }
        //如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后
        Emp curEmp = head;
        while(true) {
            if(curEmp.next == null) {//说明到链表最后
                break;
            }
            curEmp = curEmp.next; //后移
        }
        //退出时直接将emp 加入链表
        curEmp.next = emp;
    }

    //遍历链表的雇员信息
    public void list(int no) {
        if(head == null) { //说明链表为空
            System.out.println(&quot;第 &quot;+(no+1)+&quot; 链表为空&quot;);
            return;
        }
        System.out.print(&quot;第 &quot;+(no+1)+&quot; 链表的信息为&quot;);
        Emp curEmp = head; //辅助指针
        while(true) {
            System.out.printf(&quot; =&gt; id=%d name=%s\t&quot;, curEmp.id, curEmp.name);
            if(curEmp.next == null) {//说明curEmp已经是最后结点
                break;
            }
            curEmp = curEmp.next; //后移，遍历
        }
        System.out.println();
    }

    //根据id查找雇员
    //如果查找到，就返回Emp, 如果没有找到，就返回null
    public Emp findEmpById(int id) {
        //判断链表是否为空
        if(head == null) {
            System.out.println(&quot;链表为空&quot;);
            return null;
        }
        //辅助指针
        Emp curEmp = head;
        while(true) {
            if(curEmp.id == id) {//找到
                break;//这时curEmp就指向要查找的雇员
            }
            //退出
            if(curEmp.next == null) {//说明遍历当前链表没有找到该雇员
                curEmp = null;
                break;
            }
            curEmp = curEmp.next;//以后
        }

        return curEmp;
    }</code></pre>]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>查找算法</title>
    <url>/2019/11/10/search/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="查找算法介绍"><a href="#查找算法介绍" class="headerlink" title="查找算法介绍"></a>查找算法介绍</h2><p>在java中常用的有这些查找算法：顺序查找，二分查找，插值查找，斐波那契查找（后面三个都必须是有序的）</p>
<a id="more"></a>
<h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><p>这个简单的就直接上代码了：</p>
<pre><code>/**
 * 这里我们实现的线性查找是找到一个满足条件的值，就返回
 * @param arr
 * @param value
 * @return
 */
public static int seqSearch(int[] arr, int value) {
    // 线性查找是逐一比对，发现有相同值，就返回下标
    for (int i = 0; i &lt; arr.length; i++) {
        if(arr[i] == value) {
            return i;
        }
    }
    return -1;
}</code></pre><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找的思路分析：<br>1.首先确定该数组的中间的下标<br>mid = (left + right) / 2<br>2.然后让需要查找的数 findVal 和 arr[mid] 比较<br>2.1 findVal &gt; arr[mid] ,  说明你要查找的数在mid 的右边, 因此需要递归的向右查找<br>2.2 findVal &lt; arr[mid], 说明你要查找的数在mid 的左边, 因此需要递归的向左查找<br>2.3 findVal == arr[mid] 说明找到，就返回</p>
<p>什么时候我们需要结束递归？<br>1)找到就结束递归<br>2)递归完整个数组，仍然没有找到findVal ，也需要结束递归  当 left &gt; right 就需要退出</p>
<p>上代码：</p>
<pre><code>    public static List&lt;Integer&gt; binarySearch2(int[] arr, int left, int right, int findVal) {
        // 当 left &gt; right 时，说明递归整个数组，但是没有找到
        if (left &gt; right) {
            return new ArrayList&lt;Integer&gt;();
        }
        int mid = (left + right) / 2;
        int midVal = arr[mid];
        if (findVal &gt; midVal) { // 向 右递归
            return binarySearch2(arr, mid + 1, right, findVal);
        } else if (findVal &lt; midVal) { // 向左递归
            return binarySearch2(arr, left, mid - 1, findVal);
        } else {
//             * 思路分析
//             * 1. 在找到mid 索引值，不要马上返回
//             * 2. 向mid 索引值的左边扫描，将所有满足的元素的下标，加入到集合ArrayList
//             * 3. 向mid 索引值的右边扫描，将所有满足的元素的下标，加入到集合ArrayList
//             * 4. 将Arraylist返回

            List&lt;Integer&gt; resIndexlist = new ArrayList&lt;Integer&gt;();
            //向mid 索引值的左边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList
            int temp = mid - 1;
            while(true) {
                if (temp &lt; 0 || arr[temp] != findVal) {//退出
                    break;
                }
                //否则，就temp 放入到 resIndexlist
                resIndexlist.add(temp);
                temp -= 1; //temp左移
            }
            resIndexlist.add(mid);  //

            //向mid 索引值的右边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList
            temp = mid + 1;
            while(true) {
                if (temp &gt; arr.length - 1 || arr[temp] != findVal) {//退出
                    break;
                }
                //否则，就temp 放入到 resIndexlist
                resIndexlist.add(temp);
                temp += 1; //temp右移
            }

            return resIndexlist;
        }
    }</code></pre><h2 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h2><p>数组arr = [1, 2, 3, ……., 100]<br>假如我们需要查找的值1<br>使用二分查找的话，我们需要多次递归，才能找到 1<br>使用插值查找算法<br>int mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])<br>int mid = 0 + (99 - 0) * (1 - 1)/ (100 - 1) = 0 + 99 * 0 / 99 = 0<br>比如我们查找的值 100<br>int mid = 0 + (99 - 0) * (100 - 1) / (100 - 1) = 0 + 99 * 99 / 99 = 0 + 99 = 99<br>所以简单的来说，插值查找就是在二分查找的基础上改了下mid值的规定</p>
<p>上代码：</p>
<pre><code>//编写插值查找算法
//说明：插值查找算法，也要求数组是有序的
/**
 * 
 * @param arr 数组
 * @param left 左边索引
 * @param right 右边索引
 * @param findVal 查找值
 * @return 如果找到，就返回对应的下标，如果没有找到，返回-1
 */
public static int insertValueSearch(int[] arr, int left, int right, int findVal) { 
    System.out.println(&quot;插值查找次数~~&quot;);

    //注意：findVal &lt; arr[0]  和  findVal &gt; arr[arr.length - 1] 必须需要
    //否则我们得到的 mid 可能越界
    if (left &gt; right || findVal &lt; arr[0] || findVal &gt; arr[arr.length - 1]) {
        return -1;
    }
    // 求出mid, 自适应
    int mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);
    int midVal = arr[mid];
    if (findVal &gt; midVal) { // 说明应该向右边递归
        return insertValueSearch(arr, mid + 1, right, findVal);
    } else if (findVal &lt; midVal) { // 说明向左递归查找
        return insertValueSearch(arr, left, mid - 1, findVal);
    } else {
        return mid;
    }
}</code></pre><h2 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h2><p><img src="/images/suanfa/1573357649(1).jpg" alt="示例图"></p>
<p>上代码：</p>
<pre><code>//因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列
//非递归方法得到一个斐波那契数列
public static int[] fib() {
    int[] f = new int[maxSize];
    f[0] = 1;
    f[1] = 1;
    for (int i = 2; i &lt; maxSize; i++) {
        f[i] = f[i - 1] + f[i - 2];
    }
    return f;
}

//编写斐波那契查找算法
//使用非递归的方式编写算法
/**
 * 
 * @param a  数组
 * @param key 我们需要查找的关键码(值)
 * @return 返回对应的下标，如果没有-1
 */
public static int fibSearch(int[] a, int key) {
    int low = 0;
    int high = a.length - 1;
    int k = 0; //表示斐波那契分割数值的下标
    int mid = 0; //存放mid值
    int f[] = fib(); //获取到斐波那契数列
    //获取到斐波那契分割数值的下标
    while(high &gt; f[k] - 1) {
        k++;
    }
    //因为 f[k] 值 可能大于 a 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]
    //不足的部分会使用0填充
    int[] temp = Arrays.copyOf(a, f[k]);
    //实际上需求使用a数组最后的数填充 temp
    //举例:
    //temp = {1,8, 10, 89, 1000, 1234, 0, 0}  =&gt; {1,8, 10, 89, 1000, 1234, 1234, 1234,}
    for(int i = high + 1; i &lt; temp.length; i++) {
        temp[i] = a[high];
    }

    // 使用while来循环处理，找到我们的数 key
    while (low &lt;= high) { // 只要这个条件满足，就可以找
        mid = low + f[k - 1] - 1;
        if(key &lt; temp[mid]) { //我们应该继续向数组的前面查找(左边)
            high = mid - 1;
            //为甚是 k--
            //说明
            //1. 全部元素 = 前面的元素 + 后边元素
            //2. f[k] = f[k-1] + f[k-2]
            //因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]
            //即 在 f[k-1] 的前面继续查找 k--
            //即下次循环 mid = f[k-1-1]-1
            k--;
        } else if ( key &gt; temp[mid]) { // 我们应该继续向数组的后面查找(右边)
            low = mid + 1;
            //为什么是k -=2
            //说明
            //1. 全部元素 = 前面的元素 + 后边元素
            //2. f[k] = f[k-1] + f[k-2]
            //3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-1] = f[k-3] + f[k-4]
            //4. 即在f[k-2] 的前面进行查找 k -=2
            //5. 即下次循环 mid = f[k - 1 - 2] - 1
            k -= 2;
        } else { //找到
            //需要确定，返回的是哪个下标
            if(mid &lt;= high) {
                return mid;
            } else {
                return high;
            }
        }
    }
    return -1;
}</code></pre>
    <div id="aplayer-xoDybrZe" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1363303614" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>各种各样的sort（上）</title>
    <url>/2019/11/05/sort/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="有些啥子排序呢？"><a href="#有些啥子排序呢？" class="headerlink" title="有些啥子排序呢？"></a>有些啥子排序呢？</h2><p>冒泡排序，选择排序，插入排序，归并排序，希尔排序，基数排序，快速排序。。。。。燥起来，堆排序后面单独说</p>
<a id="more"></a>
<h2 id="这张图你最好记一下（面试常考）"><a href="#这张图你最好记一下（面试常考）" class="headerlink" title="这张图你最好记一下（面试常考）"></a>这张图你最好记一下（面试常考）</h2><p><img src="/images/suanfa/1572921491(1).jpg" alt="示例图"></p>
<h2 id="BubbleSort"><a href="#BubbleSort" class="headerlink" title="BubbleSort"></a>BubbleSort</h2><p><img src="/images/suanfa/1572924940(1).jpg" alt="示例图"></p>
<pre><code>public static void bubbleSort(int[] arr) {
    // 冒泡排序 的时间复杂度 O(n^2), 自己写出
    int temp = 0; // 临时变量
    boolean flag = false; // 标识变量，表示是否进行过交换
    for (int i = 0; i &lt; arr.length - 1; i++) {
        for (int j = 0; j &lt; arr.length - 1 - i; j++) {
            // 如果前面的数比后面的数大，则交换
            if (arr[j] &gt; arr[j + 1]) {
                flag = true;
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
        //System.out.println(&quot;第&quot; + (i + 1) + &quot;趟排序后的数组&quot;);
        //System.out.println(Arrays.toString(arr));
        if (!flag) { // 在一趟排序中，一次交换都没有发生过
            break;
        } else {
            flag = false; // 重置flag!!!, 进行下次判断
        }
    }
}</code></pre><h2 id="SelectSort"><a href="#SelectSort" class="headerlink" title="SelectSort"></a>SelectSort</h2><p><img src="/images/suanfa/1572925478(1).jpg" alt="示例图"></p>
<pre><code>//选择排序
public static void selectSort(int[] arr) {
            //选择排序时间复杂度是 O(n^2)
    for (int i = 0; i &lt; arr.length - 1; i++) {
        int minIndex = i;
        int min = arr[i];
        for (int j = i + 1; j &lt; arr.length; j++) {
            if (min &gt; arr[j]) { // 说明假定的最小值，并不是最小
                min = arr[j]; // 重置min
                minIndex = j; // 重置minIndex
            }
        }
        // 将最小值，放在arr[i], 即交换
        if (minIndex != i) {
            arr[minIndex] = arr[i];
            arr[i] = min;
        }
        //System.out.println(&quot;第&quot;+(i+1)+&quot;轮后~~&quot;);
        //System.out.println(Arrays.toString(arr));// 1, 34, 119, 101
    }</code></pre><h2 id="InsertSort"><a href="#InsertSort" class="headerlink" title="InsertSort"></a>InsertSort</h2><p>思路图如下:<br><img src="/images/suanfa/1572931639(1).jpg" alt="示例图"><br>每一趟都是在一个有序排列中寻找到合适位置插入进去</p>
<pre><code>//插入排序
public static void insertSort(int[] arr) {
    int insertVal = 0;
    int insertIndex = 0;
    //使用for循环来把代码简化
    for(int i = 1; i &lt; arr.length; i++) {
        //定义待插入的数
        insertVal = arr[i];
        insertIndex = i - 1; // 即arr[1]的前面这个数的下标

        // 给insertVal 找到插入的位置
        // 说明
        // 1. insertIndex &gt;= 0 保证在给insertVal 找插入位置，不越界
        // 2. insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入位置
        // 3. 就需要将 arr[insertIndex] 后移
        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) {
            arr[insertIndex + 1] = arr[insertIndex];// arr[insertIndex]
            insertIndex--;
        }
        // 当退出while循环时，说明插入的位置找到, insertIndex + 1
        //这里我们判断是否需要赋值
        if(insertIndex + 1 != i) {
            arr[insertIndex + 1] = insertVal;
        }
        //System.out.println(&quot;第&quot;+i+&quot;轮插入&quot;);
        //System.out.println(Arrays.toString(arr));
    }</code></pre><h2 id="ShellSort"><a href="#ShellSort" class="headerlink" title="ShellSort"></a>ShellSort</h2><p>希尔排序的示意图如下<br><img src="/images/suanfa/1572933650(1).jpg" alt="示例图"><br>得到图中最后的数组后仅需要简单的微调即可，建议自己给一个无序数组，自己debug一步一步看一下</p>
<p>移位法（类似插入排序法）（优）：</p>
<pre><code>//对交换式的希尔排序进行优化-&gt;移位法
public static void shellSort2(int[] arr) {
    // 增量gap, 并逐步的缩小增量
    for (int gap = arr.length / 2; gap &gt; 0; gap /= 2) {
        // 从第gap个元素，逐个对其所在的组进行直接插入排序
        for (int i = gap; i &lt; arr.length; i++) {
            int j = i;
            int temp = arr[j];
            if (arr[j] &lt; arr[j - gap]) {
                while (j - gap &gt;= 0 &amp;&amp; temp &lt; arr[j - gap]) {
                    //移动
                    arr[j] = arr[j-gap];
                    j -= gap;
                }
                //当退出while后，就给temp找到插入的位置
                arr[j] = temp;
            }
        }
    }
}</code></pre><p>交换法（劣）：</p>
<pre><code>public static void shellSort(int[] arr) {

    int temp = 0;
    int count = 0;
    // 根据前面的逐步分析，使用循环处理
    for (int gap = arr.length / 2; gap &gt; 0; gap /= 2) {
        for (int i = gap; i &lt; arr.length; i++) {
            // 遍历各组中所有的元素(共gap组，每组有个元素), 步长gap
            for (int j = i - gap; j &gt;= 0; j -= gap) {
                // 如果当前元素大于加上步长后的那个元素，说明交换
                if (arr[j] &gt; arr[j + gap]) {
                    temp = arr[j];
                    arr[j] = arr[j + gap];
                    arr[j + gap] = temp;
                }
            }
        }
        //System.out.println(&quot;希尔排序第&quot; + (++count) + &quot;轮 =&quot; + Arrays.toString(arr));
    }
｝</code></pre><h2 id="QuickSort"><a href="#QuickSort" class="headerlink" title="QuickSort"></a>QuickSort</h2><p>快速排序是对冒泡排序的一种改进<br><img src="/images/suanfa/1572935717(1).jpg" alt="示例图"></p>
<pre><code>public static void quickSort(int[] arr,int left, int right) {
    int l = left; //左下标
    int r = right; //右下标
    //pivot 中轴值
    int pivot = arr[(left + right) / 2];
    int temp = 0; //临时变量，作为交换时使用
    //while循环的目的是让比pivot 值小放到左边
    //比pivot 值大放到右边
    while( l &lt; r) { 
        //在pivot的左边一直找,找到大于等于pivot值,才退出
        while( arr[l] &lt; pivot) {
            l += 1;
        }
        //在pivot的右边一直找,找到小于等于pivot值,才退出
        while(arr[r] &gt; pivot) {
            r -= 1;
        }
        //如果l &gt;= r说明pivot 的左右两的值，已经按照左边全部是
        //小于等于pivot值，右边全部是大于等于pivot值
        if( l &gt;= r) {
            break;
        }

        //交换
        temp = arr[l];
        arr[l] = arr[r];
        arr[r] = temp;

        //如果交换完后，发现这个arr[l] == pivot值 相等 r--， 前移
        if(arr[l] == pivot) {
            r -= 1;
        }
        //如果交换完后，发现这个arr[r] == pivot值 相等 l++， 后移
        if(arr[r] == pivot) {
            l += 1;
        }
    }

    // 如果 l == r, 必须l++, r--, 否则为出现栈溢出
    if (l == r) {
        l += 1;
        r -= 1;
    }
    //向左递归
    if(left &lt; r) {
        quickSort(arr, left, r);
    }
    //向右递归
    if(right &gt; l) {
        quickSort(arr, l, right);
    }
}</code></pre><h2 id="MergeSort"><a href="#MergeSort" class="headerlink" title="MergeSort"></a>MergeSort</h2><p>该算法采用经典的分治策略，如下图所示：<br><img src="/images/suanfa/1573348264(1).jpg" alt="示例图"><br>核心思路：<br><img src="/images/suanfa/1573348363(1).jpg" alt="示例图"></p>
<pre><code>public static void mergeSort(int[] arr, int left, int right, int[] temp) {
    if(left &lt; right) {
        int mid = (left + right) / 2; //中间索引
        //向左递归进行分解
        mergeSort(arr, left, mid, temp);
        //向右递归进行分解
        mergeSort(arr, mid + 1, right, temp);
        //合并
        merge(arr, left, mid, right, temp);

    }
}
//合并的方法
/**
 * 
 * @param arr 排序的原始数组
 * @param left 左边有序序列的初始索引
 * @param mid 中间索引
 * @param right 右边索引
 * @param temp 做中转的数组
 */
public static void merge(int[] arr, int left, int mid, int right, int[] temp) {

    int i = left; // 初始化i, 左边有序序列的初始索引
    int j = mid + 1; //初始化j, 右边有序序列的初始索引
    int t = 0; // 指向temp数组的当前索引

    //(一)
    //先把左右两边(有序)的数据按照规则填充到temp数组
    //直到左右两边的有序序列，有一边处理完毕为止
    while (i &lt;= mid &amp;&amp; j &lt;= right) {//继续
        //如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素
        //即将左边的当前元素，填充到 temp数组 
        //然后 t++, i++
        if(arr[i] &lt;= arr[j]) {
            temp[t] = arr[i];
            t += 1;
            i += 1;
        } else { //反之,将右边有序序列的当前元素，填充到temp数组
            temp[t] = arr[j];
            t += 1;
            j += 1;
        }
    }

    //(二)
    //把有剩余数据的一边的数据依次全部填充到temp
    while( i &lt;= mid) { //左边的有序序列还有剩余的元素，就全部填充到temp
        temp[t] = arr[i];
        t += 1;
        i += 1;    
    }

    while( j &lt;= right) { //右边的有序序列还有剩余的元素，就全部填充到temp
        temp[t] = arr[j];
        t += 1;
        j += 1;    
    }


    //(三)
    //将temp数组的元素拷贝到arr
    //注意，并不是每次都拷贝所有
    t = 0;
    int tempLeft = left; // 
    //第一次合并 tempLeft = 0 , right = 1 //  tempLeft = 2  right = 3 // tL=0 ri=3
    //最后一次 tempLeft = 0  right = 7
    while(tempLeft &lt;= right) { 
        arr[tempLeft] = temp[t];
        t += 1;
        tempLeft += 1;
    }

}</code></pre><h2 id="RadixSort"><a href="#RadixSort" class="headerlink" title="RadixSort"></a>RadixSort</h2><p>基数排序，也称为桶排序<br><img src="/images/suanfa/1573348768(1).jpg" alt="示例图"><br><img src="/images/suanfa/1573348837(1).jpg" alt="示例图"></p>
<pre><code>public static void radixSort(int[] arr) {

    //根据前面的推导过程，我们可以得到最终的基数排序代码

    //1. 得到数组中最大的数的位数
    int max = arr[0]; //假设第一数就是最大数
    for(int i = 1; i &lt; arr.length; i++) {
        if (arr[i] &gt; max) {
            max = arr[i];
        }
    }
    //得到最大数是几位数
    int maxLength = (max + &quot;&quot;).length();


    //定义一个二维数组，表示10个桶, 每个桶就是一个一维数组
    //说明
    //1. 二维数组包含10个一维数组
    //2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length
    //3. 名明确，基数排序是使用空间换时间的经典算法
    int[][] bucket = new int[10][arr.length];

    //为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数
    //可以这里理解
    //比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数
    int[] bucketElementCounts = new int[10];


    //这里我们使用循环将代码处理

    for(int i = 0 , n = 1; i &lt; maxLength; i++, n *= 10) {
        //(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位..
        for(int j = 0; j &lt; arr.length; j++) {
            //取出每个元素的对应位的值
            int digitOfElement = arr[j] / n % 10;
            //放入到对应的桶中
            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
            bucketElementCounts[digitOfElement]++;
        }
        //按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)
        int index = 0;
        //遍历每一桶，并将桶中是数据，放入到原数组
        for(int k = 0; k &lt; bucketElementCounts.length; k++) {
            //如果桶中，有数据，我们才放入到原数组
            if(bucketElementCounts[k] != 0) {
                //循环该桶即第k个桶(即第k个一维数组), 放入
                for(int l = 0; l &lt; bucketElementCounts[k]; l++) {
                    //取出元素放入到arr
                    arr[index++] = bucket[k][l];
                }
            }
            //第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！
            bucketElementCounts[k] = 0;

        }
        //System.out.println(&quot;第&quot;+(i+1)+&quot;轮，对个位的排序处理 arr =&quot; + Arrays.toString(arr));

    }
}</code></pre>
    <div id="aplayer-sQquaJSP" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="25714352" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>

]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>中缀和后缀实现计算器</title>
    <url>/2019/10/31/%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><p>学习了栈之后，接下来看看中缀表达式和后缀表达式实现计算器的方法以及有什么不同吧</p>
<a id="more"></a>
<h2 id="栈实现综合计算器（中缀表达式）"><a href="#栈实现综合计算器（中缀表达式）" class="headerlink" title="栈实现综合计算器（中缀表达式）"></a>栈实现综合计算器（中缀表达式）</h2><p>思路：<br>1.通过一个index值（索引），来遍历我们的表达式<br>2.如果我们发现是一个数字,就直接入数栈<br>3.如果发现扫描到是一个符号,就分如下情况<br>3.1如果发现当前的符号栈为空，就直接入栈<br>3.2如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈， 如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈.</p>
<ol start="4">
<li><p>当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</p>
</li>
<li><p>最后在数栈只有一个数字，就是表达式的结果</p>
<p> public class Calculator {</p>
<pre><code>public static void main(String[] args) {
    //根据前面思路，完成表达式的运算
    String expression = &quot;7*2*2-5+1-5+3-4&quot;; // 15//如何处理多位数的问题？
    //创建两个栈，数栈，一个符号栈
    ArrayStack2 numStack = new ArrayStack2(10);
    ArrayStack2 operStack = new ArrayStack2(10);
    //定义需要的相关变量
    int index = 0;//用于扫描
    int num1 = 0; 
    int num2 = 0;
    int oper = 0;
    int res = 0;
    char ch = &apos; &apos;; //将每次扫描得到char保存到ch
    String keepNum = &quot;&quot;; //用于拼接 多位数
    //开始while循环的扫描expression
    while(true) {
        //依次得到expression 的每一个字符
        ch = expression.substring(index, index+1).charAt(0);
        //判断ch是什么，然后做相应的处理
        if(operStack.isOper(ch)) {//如果是运算符
            //判断当前的符号栈是否为空
            if(!operStack.isEmpty()) {
                //如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数,
                //在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈
                if(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) {
                    num1 = numStack.pop();
                    num2 = numStack.pop();
                    oper = operStack.pop();
                    res = numStack.cal(num1, num2, oper);
                    //把运算的结果如数栈
                    numStack.push(res);
                    //然后将当前的操作符入符号栈
                    operStack.push(ch);
                } else {
                    //如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.
                    operStack.push(ch);
                }
            }else {
                //如果为空直接入符号栈..
                operStack.push(ch); // 1 + 3
            }
        } else { //如果是数，则直接入数栈

            //numStack.push(ch - 48); //? &quot;1+3&quot; &apos;1&apos; =&gt; 1
            //分析思路
            //1. 当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数
            //2. 在处理数，需要向expression的表达式的index 后再看一位,如果是数就进行扫描，如果是符号才入栈
            //3. 因此我们需要定义一个变量 字符串，用于拼接

            //处理多位数
            keepNum += ch;

            //如果ch已经是expression的最后一位，就直接入栈
            if (index == expression.length() - 1) {
                numStack.push(Integer.parseInt(keepNum));
            }else{

                //判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈
                //注意是看后一位，不是index++
                if (operStack.isOper(expression.substring(index+1,index+2).charAt(0))) {
                    //如果后一位是运算符，则入栈 keepNum = &quot;1&quot; 或者 &quot;123&quot;
                    numStack.push(Integer.parseInt(keepNum));
                    //重要的!!!!!!, keepNum清空
                    keepNum = &quot;&quot;;

                }
            }
        }
        //让index + 1, 并判断是否扫描到expression最后.
        index++;
        if (index &gt;= expression.length()) {
            break;
        }
    }

    //当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.
    while(true) {
        //如果符号栈为空，则计算到最后的结果, 数栈中只有一个数字【结果】
        if(operStack.isEmpty()) {
            break;
        }
        num1 = numStack.pop();
        num2 = numStack.pop();
        oper = operStack.pop();
        res = numStack.cal(num1, num2, oper);
        numStack.push(res);//入栈
    }
    //将数栈的最后数，pop出，就是结果
    int res2 = numStack.pop();
    System.out.printf(&quot;表达式 %s = %d&quot;, expression, res2);
}</code></pre><p> }<br> //先创建一个栈,直接使用前面创建好<br> //定义一个 ArrayStack2 表示栈, 需要扩展功能<br> class ArrayStack2 {</p>
<pre><code>private int maxSize; // 栈的大小
private int[] stack; // 数组，数组模拟栈，数据就放在该数组
private int top = -1;// top表示栈顶，初始化为-1

//构造器
public ArrayStack2(int maxSize) {
    this.maxSize = maxSize;
    stack = new int[this.maxSize];
}

//增加一个方法，可以返回当前栈顶的值, 但是不是真正的pop
public int peek() {
    return stack[top];
}

//栈满
public boolean isFull() {
    return top == maxSize - 1;
}
//栈空
public boolean isEmpty() {
    return top == -1;
}
//入栈-push
public void push(int value) {
    //先判断栈是否满
    if(isFull()) {
        System.out.println(&quot;栈满&quot;);
        return;
    }
    top++;
    stack[top] = value;
}
//出栈-pop, 将栈顶的数据返回
public int pop() {
    //先判断栈是否空
    if(isEmpty()) {
        //抛出异常
        throw new RuntimeException(&quot;栈空，没有数据~&quot;);
    }
    int value = stack[top];
    top--;
    return value;
}
//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据
public void list() {
    if(isEmpty()) {
        System.out.println(&quot;栈空，没有数据~~&quot;);
        return;
    }
    //需要从栈顶开始显示数据
    for(int i = top; i &gt;= 0 ; i--) {
        System.out.printf(&quot;stack[%d]=%d\n&quot;, i, stack[i]);
    }
}
//返回运算符的优先级，优先级是程序员来确定, 优先级使用数字表示
//数字越大，则优先级就越高.
public int priority(int oper) {
    if(oper == &apos;*&apos; || oper == &apos;/&apos;){
        return 1;
    } else if (oper == &apos;+&apos; || oper == &apos;-&apos;) {
        return 0;
    } else {
        return -1; // 假定目前的表达式只有 +, - , * , /
    }
}
//判断是不是一个运算符
public boolean isOper(char val) {
    return val == &apos;+&apos; || val == &apos;-&apos; || val == &apos;*&apos; || val == &apos;/&apos;;
}
//计算方法
public int cal(int num1, int num2, int oper) {
    int res = 0; // res 用于存放计算的结果
    switch (oper) {
    case &apos;+&apos;:
        res = num1 + num2;
        break;
    case &apos;-&apos;:
        res = num2 - num1;// 注意顺序
        break;
    case &apos;*&apos;:
        res = num1 * num2;
        break;
    case &apos;/&apos;:
        res = num2 / num1;
        break;
    default:
        break;
    }
    return res;
}</code></pre><p> }</p>
</li>
</ol>
<h2 id="栈实现综合计算器（中缀转后缀）"><a href="#栈实现综合计算器（中缀转后缀）" class="headerlink" title="栈实现综合计算器（中缀转后缀）"></a>栈实现综合计算器（中缀转后缀）</h2><p>后缀表达式也称为逆波兰表达式<br>1) 初始化两个栈：运算符栈s1和储存中间结果的栈s2；<br>2) 从左至右扫描中缀表达式；<br>3) 遇到操作数时，将其压s2；<br>4) 遇到运算符时，比较其与s1栈顶运算符的优先级：<br>1.如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；<br>2.否则，若优先级比栈顶运算符的高，也将运算符压入s1；<br>3.否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较；<br>5) 遇到括号时：(1) 如果是左括号“(”，则直接压入s1(2) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃<br>6) 重复步骤2至5，直到表达式的最右边<br>7) 将s1中剩余的运算符依次弹出并压入s2<br>8)  依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达</p>
<pre><code>public class PolandNotation {
    public static void main(String[] args) {
        //完成将一个中缀表达式转成后缀表达式的功能
        //说明
        //1. 1+((2+3)×4)-5 =&gt; 转成  1 2 3 + 4 × + 5 –
        //2. 因为直接对str 进行操作，不方便，因此 先将  &quot;1+((2+3)×4)-5&quot; =》 中缀的表达式对应的List
        //   即 &quot;1+((2+3)×4)-5&quot; =&gt; ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]
        //3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List
        //   即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]

        String expression = &quot;1+((2+3)*4)-5&quot;;//注意表达式 
        List&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);
        System.out.println(&quot;中缀表达式对应的List=&quot; + infixExpressionList); // ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]
        List&lt;String&gt; suffixExpreesionList = parseSuffixExpreesionList(infixExpressionList);
        System.out.println(&quot;后缀表达式对应的List&quot; + suffixExpreesionList); //ArrayList [1,2,3,+,4,*,+,5,–] 

        System.out.printf(&quot;expression=%d&quot;, calculate(suffixExpreesionList)); // ?
        /*

        //先定义给逆波兰表达式
        //(30+4)×5-6  =&gt; 30 4 + 5 × 6 - =&gt; 164
        // 4 * 5 - 8 + 60 + 8 / 2 =&gt; 4 5 * 8 - 60 + 8 2 / + 
        //测试 
        //说明为了方便，逆波兰表达式 的数字和符号使用空格隔开
        //String suffixExpression = &quot;30 4 + 5 * 6 -&quot;;
        String suffixExpression = &quot;4 5 * 8 - 60 + 8 2 / +&quot;; // 76
        //思路
        //1. 先将 &quot;3 4 + 5 × 6 - &quot; =&gt; 放到ArrayList中
        //2. 将 ArrayList 传递给一个方法，遍历 ArrayList 配合栈 完成计算

        List&lt;String&gt; list = getListString(suffixExpression);
        System.out.println(&quot;rpnList=&quot; + list);
        int res = calculate(list);
        System.out.println(&quot;计算的结果是=&quot; + res);

        */
    }
    //即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]
    //方法：将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List
    public static List&lt;String&gt; parseSuffixExpreesionList(List&lt;String&gt; ls) {
        //定义两个栈
        Stack&lt;String&gt; s1 = new Stack&lt;String&gt;(); // 符号栈
        //说明：因为s2 这个栈，在整个转换过程中，没有pop操作，而且后面我们还需要逆序输出
        //因此比较麻烦，这里我们就不用 Stack&lt;String&gt; 直接使用 List&lt;String&gt; s2
        //Stack&lt;String&gt; s2 = new Stack&lt;String&gt;(); // 储存中间结果的栈s2
        List&lt;String&gt; s2 = new ArrayList&lt;String&gt;(); // 储存中间结果的Lists2

        //遍历ls
        for(String item: ls) {
            //如果是一个数，加入s2
            if(item.matches(&quot;\\d+&quot;)) {
                s2.add(item);
            } else if (item.equals(&quot;(&quot;)) {
                s1.push(item);
            } else if (item.equals(&quot;)&quot;)) {
                //如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃
                while(!s1.peek().equals(&quot;(&quot;)) {
                    s2.add(s1.pop());
                }
                s1.pop();//!!! 将 ( 弹出 s1栈， 消除小括号
            } else {
                //当item的优先级小于等于s1栈顶运算符, 将s1栈顶的运算符弹出并加入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较
                //问题：我们缺少一个比较优先级高低的方法
                while(s1.size() != 0 &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item) ) {
                    s2.add(s1.pop());
                }
                //还需要将item压入栈
                s1.push(item);
            }
        }

        //将s1中剩余的运算符依次弹出并加入s2
        while(s1.size() != 0) {
            s2.add(s1.pop());
        }
        return s2; //注意因为是存放到List, 因此按顺序输出就是对应的后缀表达式对应的List

    }

    //方法：将 中缀表达式转成对应的List
    //  s=&quot;1+((2+3)×4)-5&quot;;
    public static List&lt;String&gt; toInfixExpressionList(String s) {
        //定义一个List,存放中缀表达式 对应的内容
        List&lt;String&gt; ls = new ArrayList&lt;String&gt;();
        int i = 0; //这时是一个指针，用于遍历 中缀表达式字符串
        String str; // 对多位数的拼接
        char c; // 每遍历到一个字符，就放入到c
        do {
            //如果c是一个非数字，我需要加入到ls
            if((c=s.charAt(i)) &lt; 48 ||  (c=s.charAt(i)) &gt; 57) {
                ls.add(&quot;&quot; + c);
                i++; //i需要后移
            } else { //如果是一个数，需要考虑多位数
                str = &quot;&quot;; //先将str 置成&quot;&quot; &apos;0&apos;[48]-&gt;&apos;9&apos;[57]
                while(i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= 48 &amp;&amp; (c=s.charAt(i)) &lt;= 57) {
                    str += c;//拼接
                    i++;
                }
                ls.add(str);
            }
        }while(i &lt; s.length());
        return ls;//返回
    }

    //将一个逆波兰表达式， 依次将数据和运算符 放入到 ArrayList中
    public static List&lt;String&gt; getListString(String suffixExpression) {
        //将 suffixExpression 分割
        String[] split = suffixExpression.split(&quot; &quot;);
        List&lt;String&gt; list = new ArrayList&lt;String&gt;();
        for(String ele: split) {
            list.add(ele);
        }
        return list;

    }

    //完成对逆波兰表达式的运算
    /*
     * 1)从左至右扫描，将3和4压入堆栈；
        2)遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；
        3)将5入栈；
        4)接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；
        5)将6入栈；
        6)最后是-运算符，计算出35-6的值，即29，由此得出最终结果
     */

    public static int calculate(List&lt;String&gt; ls) {
        // 创建给栈, 只需要一个栈即可
        Stack&lt;String&gt; stack = new Stack&lt;String&gt;();
        // 遍历 ls
        for (String item : ls) {
            // 这里使用正则表达式来取出数
            if (item.matches(&quot;\\d+&quot;)) { // 匹配的是多位数
                // 入栈
                stack.push(item);
            } else {
                // pop出两个数，并运算， 再入栈
                int num2 = Integer.parseInt(stack.pop());
                int num1 = Integer.parseInt(stack.pop());
                int res = 0;
                if (item.equals(&quot;+&quot;)) {
                    res = num1 + num2;
                } else if (item.equals(&quot;-&quot;)) {
                    res = num1 - num2;
                } else if (item.equals(&quot;*&quot;)) {
                    res = num1 * num2;
                } else if (item.equals(&quot;/&quot;)) {
                    res = num1 / num2;
                } else {
                    throw new RuntimeException(&quot;运算符有误&quot;);
                }
                //把res 入栈
                stack.push(&quot;&quot; + res);
            }

        }
        //最后留在stack中的数据是运算结果
        return Integer.parseInt(stack.pop());
    }
}
//编写一个类 Operation 可以返回一个运算符 对应的优先级
class Operation {
    private static int ADD = 1;
    private static int SUB = 1;
    private static int MUL = 2;
    private static int DIV = 2;

    //写一个方法，返回对应的优先级数字
    public static int getValue(String operation) {
        int result = 0;
        switch (operation) {
        case &quot;+&quot;:
            result = ADD;
            break;
        case &quot;-&quot;:
            result = SUB;
            break;
        case &quot;*&quot;:
            result = MUL;
            break;
        case &quot;/&quot;:
            result = DIV;
            break;
        default:
            System.out.println(&quot;不存在该运算符&quot; + operation);
            break;
        }
        return result;
    }

}</code></pre>
    <div id="aplayer-vnoLUgxy" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="451703096" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2019/10/31/%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h2><p>栈（stack）又名堆栈(先进后出），它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p>
<a id="more"></a>
<h2 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h2><p>1.子程序的调用<br>2.处理递归调用<br>3.表达式的转换&lt;中缀表达式转后缀表达式&gt;<br>4.二叉树的遍历<br>5.图形的深度优先（depth–&gt;first）搜索法</p>
<h2 id="数组实现栈"><a href="#数组实现栈" class="headerlink" title="数组实现栈"></a>数组实现栈</h2><p>实现栈的思路分析<br>1.使用数组来模拟栈<br>2.定义一个 top来表示栈顶，初始化为-1<br>3.入栈的操作，当有数据加入到栈时，top++; stack[top] = data;<br>4.出栈的操作， int value = stack[top]; top–,return value</p>
<pre><code>class ArrayStack {
    private int maxSize;
    private int[] stack;
    private int top = -1;
    public ArrayStack(int maxSize) {
        this.maxSize = maxSize;
        this.stack = new int[this.maxSize];
    }
    /*
    *  判断是否栈满
    */
    public boolean isFull() {
        return this.top == this.maxSize - 1;
    }
    /*
     *  判断是否栈空
     */
    public boolean isEmpty() {
        return this.top == -1;
    }
    /*
     *  入栈
     */
    public void push(int value) {
        if (this.isFull()) {
            System.out.println(&quot;栈满&quot;);
        } else {
            ++this.top;
            this.stack[this.top] = value;
        }
    }
    /*
     *  出栈
     */
    public int pop() {
        if (this.isEmpty()) {
            throw new RuntimeException(&quot;栈空，没有数据~&quot;);
        } else {
            int value = this.stack[this.top];
            --this.top;
            return value;
        }
    }
    /*
     *  显示栈的数据
     */
    public void list() {
        if (this.isEmpty()) {
            System.out.println(&quot;栈空，没有数据~~&quot;);
        } else {
            for(int i = this.top; i &gt;= 0; --i) {
                System.out.printf(&quot;stack[%d]=%d\n&quot;, i, this.stack[i]);
            }
        }
    }
}</code></pre><h2 id="来玩一把栈吧"><a href="#来玩一把栈吧" class="headerlink" title="来玩一把栈吧"></a>来玩一把栈吧</h2><pre><code>public class ArrayStackDemo {
    public static void main(String[] args) {
        //测试一下ArrayStack 是否正确
        //先创建一个ArrayStack对象-&gt;表示栈
        ArrayStack stack = new ArrayStack(4);
        String key = &quot;&quot;;
        boolean loop = true; //控制是否退出菜单
        Scanner scanner = new Scanner(System.in);

        while(loop) {
            System.out.println(&quot;show: 表示显示栈&quot;);
            System.out.println(&quot;exit: 退出程序&quot;);
            System.out.println(&quot;push: 表示添加数据到栈(入栈)&quot;);
            System.out.println(&quot;pop: 表示从栈取出数据(出栈)&quot;);
            System.out.println(&quot;请输入你的选择&quot;);
            key = scanner.next();
            switch (key) {
            case &quot;show&quot;:
                stack.list();
                break;
            case &quot;push&quot;:
                System.out.println(&quot;请输入一个数&quot;);
                int value = scanner.nextInt();
                stack.push(value);
                break;
            case &quot;pop&quot;:
                try {
                    int res = stack.pop();
                    System.out.printf(&quot;出栈的数据是 %d\n&quot;, res);
                } catch (Exception e) {
                    // TODO: handle exception
                    System.out.println(e.getMessage());
                }
                break;
            case &quot;exit&quot;:
                scanner.close();
                loop = false;
                break;
            default:
                break;
            }
        }

        System.out.println(&quot;程序退出~~~&quot;);
       }
    }
 ｝</code></pre>
    <div id="aplayer-kgDyOlRB" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="401249910" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫问题</title>
    <url>/2019/10/31/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2><p>Josephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。<br>n = 5 , 即有5个人<br>k = 1, 从第一个人开始报数<br>m = 2, 数2下<br>出圈的顺序<br>2-&gt;4-&gt;1-&gt;5-&gt;3</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="/images/Ahem/1572500363(1).jpg" alt="示例图"></p>
<p>构建一个单向的环形链表思路<br>1.先创建第一个节点, 让 first 指向该节点，并形成环形<br>2.后面当我们每创建一个新的节点，就把该节点，加入到已有的环形链表中即可.</p>
<p>遍历环形链表<br>1.先让一个辅助指针(变量) curBoy，指向first节点<br>2.然后通过一个while循环遍历 该环形链表即可 curBoy.next  == first 结束</p>
<p>需求创建一个辅助指针(变量)helper,事先应该指向环形链表的最后这个节点.<br>补充： 小孩报数前，先让first和helper移动 k - 1次<br>当小孩报数时，让first和helper指针同时的移动m-1次<br>这时就可以将first指向的小孩节点出圈<br>first = first .next<br>helper.next = first<br>原来first 指向的节点就没有任何引用，就会被回收</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>先创建一个类如下：</p>
<pre><code>class Boy {
    private int no;
    private Boy next;
    public Boy(int no) {
        this.no = no;
    }
    public int getNo() {
        return this.no;
    }
    public void setNo(int no) {
        this.no = no;
    }
    public Boy getNext() {
        return this.next;
    }
    public void setNext(Boy next) {
        this.next = next;
    }
}</code></pre><p>环形链表实现：</p>
<pre><code>class CircleSingleLinkedList {
    private Boy first = null;
    CircleSingleLinkedList() {
    }</code></pre><p>创建一个环形单向链表</p>
<pre><code>public void addBoy(int nums) {
    if (nums &lt; 1) {
        System.out.println(&quot;nums的值不正确&quot;);
    } else {
        Boy curBoy = null;
        for(int i = 1; i &lt;= nums; ++i) {
            Boy boy = new Boy(i);
            if (i == 1) {
                this.first = boy;
                this.first.setNext(this.first);
                curBoy = this.first;
            } else {
                curBoy.setNext(boy);
                boy.setNext(this.first);
                curBoy = boy;
            }
        }
    }
}</code></pre><p>显示所有小孩</p>
<pre><code>public void showBoy() {
    if (this.first == null) {
        System.out.println(&quot;没有任何小孩~~&quot;);
    } else {
        Boy curBoy = this.first;
        while(true) {
            System.out.printf(&quot;小孩的编号 %d \n&quot;, curBoy.getNo());
            if (curBoy.getNext() == this.first) {
                return;
            }
            curBoy = curBoy.getNext();
        }
    }
}</code></pre><p>根据用户的输入计算出小孩的出圈顺序</p>
<pre><code>    public void countBoy(int startNo, int countNum, int nums) {
        if (this.first != null &amp;&amp; startNo &gt;= 1 &amp;&amp; startNo &lt;= nums) {
            Boy helper;
            for(helper = this.first; helper.getNext() != this.first; helper = helper.getNext()) {
            }
            int j;
            for(j = 0; j &lt; startNo - 1; ++j) {
                this.first = this.first.getNext();
                helper = helper.getNext();
            }
            while(helper != this.first) {
                for(j = 0; j &lt; countNum - 1; ++j) {
                    this.first = this.first.getNext();
                    helper = helper.getNext();
                }
                System.out.printf(&quot;小孩%d出圈\n&quot;, this.first.getNo());
                this.first = this.first.getNext();
                helper.setNext(this.first);
            }
            System.out.printf(&quot;最后留在圈中的小孩编号%d \n&quot;, this.first.getNo());
        } else {
            System.out.println(&quot;参数输入有误， 请重新输入&quot;);
        }
    }
}</code></pre><p>最后自己来测试一下吧（自己去看最终结果洛）：</p>
<pre><code>public class Joseph {
    public Joseph() {
    }
    public static void main(String[] args) {
        CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();
        circleSingleLinkedList.addBoy(5);
        circleSingleLinkedList.showBoy();
        circleSingleLinkedList.countBoy(1, 2, 5);
    }
}</code></pre>
    <div id="aplayer-cITwTtvV" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="26470630" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2019/10/31/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>本节主要讲单链表，双链表，环形链表，链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。</p>
<a id="more"></a>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>让我们来看看这个单链表的类（分带头结点的链表和不带头结点的链表，根据需求决定，这里讲的都是带头结点的链表）</p>
<pre><code>public class HeroNode {
    public int no;
    public String nickname;
    public String name;
    public HeroNode next;
    public HeroNode(int no, String nickname, String name) {
        this.no = no;
        this.nickname = nickname;
        this.name = name;
    }
    @Override
    public String toString() {
        return &quot;HeroNode{&quot; +
                &quot;no=&quot; + no +
                &quot;, nickname=&apos;&quot; + nickname + &apos;\&apos;&apos; +
                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +
                &apos;}&apos;;
    }
}</code></pre><p>直接上代码来看看怎么实现单链表的增删改查吧：</p>
<pre><code>public class SingleLinkedList {
    private HeroNode head = new HeroNode(0,&quot;&quot;,&quot;&quot;);
    SingleLinkedList(){
    }
    public HeroNode getHead() {
        return head;
    }</code></pre><h3 id="单链表的增加节点"><a href="#单链表的增加节点" class="headerlink" title="单链表的增加节点"></a>单链表的增加节点</h3><pre><code>public void add(HeroNode heroNode){
    HeroNode temp;
    for (temp = this.head;temp.next!=null;temp = temp.next){
    }
    temp.next=heroNode;
}
public void addByOrder(HeroNode heroNode) {
    HeroNode temp = this.head;
    boolean flag;
    for(flag = false; temp.next != null &amp;&amp; temp.next.no &lt;= heroNode.no; temp = temp.next) {
        if (temp.next.no == heroNode.no) {
            flag = true;
            break;
        }
    }
    if (flag) {
        System.out.printf(&quot;准备插入的英雄的编号 %d 已经存在了, 不能加入\n&quot;, heroNode.no);
    } else {
        heroNode.next = temp.next;
        temp.next = heroNode;
    }
}</code></pre><p>由上面代码可以看出，第一个方法是直接在末尾添加，第二个方法是按No排序增加，注意temp是辅助指针，用于遍历链表的</p>
<h3 id="单链表的修改节点"><a href="#单链表的修改节点" class="headerlink" title="单链表的修改节点"></a>单链表的修改节点</h3><pre><code>public void update(HeroNode newHeroNode) {
    if (this.head.next == null) {
        System.out.println(&quot;链表为空~&quot;);
    } else {
        HeroNode temp = this.head.next;
        boolean flag;
        for(flag = false; temp != null; temp = temp.next) {
            if (temp.no == newHeroNode.no) {
                flag = true;
                break;
            }
        }
        if (flag) {
            temp.name = newHeroNode.name;
            temp.nickname = newHeroNode.nickname;
        } else {
            System.out.printf(&quot;没有找到 编号 %d 的节点，不能修改\n&quot;, newHeroNode.no);
        }
    }
}</code></pre><h3 id="单链表的删除节点"><a href="#单链表的删除节点" class="headerlink" title="单链表的删除节点"></a>单链表的删除节点</h3><p>单链表的删除需要temp指针指到待删除节点的前一个节点</p>
<pre><code>public void del(int no) {
    HeroNode temp = this.head;
    boolean flag;
    for(flag = false; temp.next != null; temp = temp.next) {
        if (temp.next.no == no) {
            flag = true;
            break;
        }
    }
    if (flag) {
        temp.next = temp.next.next;
    } else {
        System.out.printf(&quot;要删除的 %d 节点不存在\n&quot;, no);
    }
}</code></pre><h3 id="显示单链表"><a href="#显示单链表" class="headerlink" title="显示单链表"></a>显示单链表</h3><pre><code>public void list() {
    if (this.head.next == null) {
        System.out.println(&quot;链表为空&quot;);
    } else {
        for(HeroNode temp = this.head.next; temp != null; temp = temp.next) {
            System.out.println(temp);
        }
    }
}</code></pre><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>相对于单链表，双向链表多了一个pre，如下:</p>
<pre><code>public class HeroNode2 {
    public int no;
    public String name;
    public String nickname;
    public HeroNode2 next;
    public HeroNode2 pre;
    public HeroNode2(int no, String name, String nickname) {
        this.no = no;
        this.name = name;
        this.nickname = nickname;
    }
    public String toString() {
        return &quot;HeroNode [no=&quot; + this.no + &quot;, name=&quot; + this.name + &quot;, nickname=&quot; + this.nickname + &quot;]&quot;;
    }
}</code></pre><p>直接上代码来看看怎么实现双向链表的增删改查吧：</p>
<pre><code>public class DoubleLinkedList {
    private HeroNode2 head = new HeroNode2(0,&quot;&quot;,&quot;&quot;);
    public HeroNode2 getHead(){
        return getHead();
    }</code></pre><h3 id="显示双向链表"><a href="#显示双向链表" class="headerlink" title="显示双向链表"></a>显示双向链表</h3><pre><code>public void list(){
    if(head.next==null){
        System.out.println(&quot;链表为空&quot;);
        return;
    }
    HeroNode2 temp = head.next;
    while(true){
        if(temp == null){
            break;
        }
        System.out.println(temp);
        temp = temp.next;
    }
}</code></pre><h3 id="双向链表的添加节点"><a href="#双向链表的添加节点" class="headerlink" title="双向链表的添加节点"></a>双向链表的添加节点</h3><pre><code>public void add(HeroNode2 heroNode){
    HeroNode2 temp = head.next;
    while (true){
        if(temp == null){
            break;
        }
        temp = temp.next;
    }
    temp.next = heroNode;
    heroNode.pre = temp;
}</code></pre><h3 id="双向链表的修改节点"><a href="#双向链表的修改节点" class="headerlink" title="双向链表的修改节点"></a>双向链表的修改节点</h3><pre><code>public void update(HeroNode2 heroNode){
    if(head.next == null){
        System.out.println(&quot;链表为空&quot;);
    }
    HeroNode2 temp = head.next;
    boolean flag = false;
    while (true){
        if(temp == null){
            break;
        }
        if (temp.no == heroNode.no){
            flag = true;
            break;
        }
        temp = temp.next;
    }
    if (flag){
        temp.name = heroNode.name;
        temp.nickname = heroNode.nickname;
    }else {
        System.out.printf(&quot;没有找到%d编号的节点&quot;,heroNode.no);
    }
}</code></pre><h3 id="双向链表的删除节点"><a href="#双向链表的删除节点" class="headerlink" title="双向链表的删除节点"></a>双向链表的删除节点</h3><p>不同于单链表的删除，双向链表可以实现自我删除，不用temp指到前一个节点</p>
<pre><code>public void del(int no){
    if (head.next == null){
        System.out.println(&quot;链表为空无法删除&quot;);
        return;
    }
    HeroNode2 temp = head.next;
    boolean flag = false;
    while (true){
        if (temp == null){
            break;
        }
        if (temp.no == no){
            flag = true;
            break;
        }
        temp = temp.next;
    }
    if (flag){
        temp.pre.next = temp.next;
        if (temp.next != null){
            temp.next.pre = temp.pre;
        }
    }else{
        System.out.printf(&quot;要删除的节点%d不存在&quot;,no);
    }
}</code></pre><h2 id="单链表的面试题"><a href="#单链表的面试题" class="headerlink" title="单链表的面试题"></a>单链表的面试题</h2><p>1) 求单链表中有效节点的个数</p>
<pre><code>public static int getLength(HeroNode head) {
    if (head.next == null) {
        return 0;
    } else {
        int length = 0;
        for(HeroNode cur = head.next; cur != null; cur = cur.next) {
            ++length;
        }
        return length;
    }
}</code></pre><p>2）查找单链表中的倒数第K个节点<br>思路：<br>        Index：指倒数第Index个节点<br>        得到链表总长度Size后（用的上一个方法），遍历Size - Index 个节点</p>
<pre><code>public static HeroNode findLastIndexNode(HeroNode head, int index) {
    if (head.next == null) {
        return null;
    } else {
        int size = getLength(head);
        if (index &gt; 0 &amp;&amp; index &lt;= size) {
            HeroNode cur = head.next;
            for(int i = 0; i &lt; size - index; ++i) {
                cur = cur.next;
            }
            return cur;
        } else {
            return null;
        }
    }
}</code></pre><p>3）单链表的反转<br>思路:<br>    先定义一个节点 reverseHead = new HeroNode();<br>    从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端.<br>    原来的链表的head.next = reverseHead.next</p>
<pre><code>public static void reversetList(HeroNode head) {
    if (head.next != null &amp;&amp; head.next.next != null) {
        HeroNode cur = head.next;
        HeroNode next = null;
        HeroNode reverseHead;
        for(reverseHead = new HeroNode(0, &quot;&quot;, &quot;&quot;); cur != null; cur = next) {
            next = cur.next;
            cur.next = reverseHead.next;
            reverseHead.next = cur;
        }
        head.next = reverseHead.next;
    }
}</code></pre><p>4）逆序打印单链表，不破坏结构（使用栈的特性先进后出）</p>
<pre><code>public static void reversePrint(HeroNode head) {
    if (head.next != null) {
        Stack&lt;HeroNode&gt; stack = new Stack();
        for(HeroNode cur = head.next; cur != null; cur = cur.next) {
            stack.push(cur);
        }
        while(stack.size() &gt; 0) {
            System.out.println(stack.pop());
        }
    }
}</code></pre><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>约瑟夫问题涉及环形链表，请看约瑟夫问题讲解，seeYa!!!!</p>

    <div id="aplayer-SRrEWoJX" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="406475394" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
      <tags>
        <tag>-算法 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>集成flowable</title>
    <url>/2019/10/16/%E9%9B%86%E6%88%90Flowable/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Flowable是一个紧凑且高效的工作流和用Java编写的业务流程管理（BPM）平台。其核心是闪电般的，经过实践检验的BPMN2流程引擎，以及本机案例管理（CMMN）和DMN引擎。只需将选择的下载文件解压缩到所选目录，然后按照readme.html中的说明进行操作即可。它具有指向文档和发行说明的链接。《用户指南》有一个快速入门部分，可让您在几分钟内开始运行。</p>
<p>##TODO</p>
]]></content>
  </entry>
  <entry>
    <title>easypoi导入导出</title>
    <url>/2019/10/15/easypoi%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Excel导入导出"><a href="#Excel导入导出" class="headerlink" title="Excel导入导出"></a>Excel导入导出</h2><p>小伙伴们业务上遇到需求需要导入导出Excel的时候是怎么做的呢？今天我们用easypoi来实现，简单哦！</p>
<a id="more"></a>
<h2 id="easypoi是做什么的？"><a href="#easypoi是做什么的？" class="headerlink" title="easypoi是做什么的？"></a>easypoi是做什么的？</h2><p>easypoi功能如同名字easy,主打的功能就是容易,让一个没见接触过poi的人员，就可以方便的写出Excel导出,Excel模板导出,Excel导入,Word模板导出,PDF导出,Excel转HTML,Excel charts导出通过简单的注解和模板 语言(熟悉的表达式语法),完成以前复杂的写法</p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>这是目前的最新版本：</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;
    &lt;artifactId&gt;easypoi-base&lt;/artifactId&gt;
    &lt;version&gt;4.1.0&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;
    &lt;artifactId&gt;easypoi-annotation&lt;/artifactId&gt;
    &lt;version&gt;4.1.0&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;
    &lt;artifactId&gt;easypoi-web&lt;/artifactId&gt;
    &lt;version&gt;4.1.0&lt;/version&gt;
&lt;/dependency&gt;</code></pre><h2 id="注解-Excel"><a href="#注解-Excel" class="headerlink" title="注解@Excel"></a>注解@Excel</h2><p>在pojo类的每一个字段添加对应的@Excel注解，类要序列化实现serializable，示例：</p>
<pre><code>@Data
@TableName(&quot;SJ_SR_PERSPECTIVE&quot;)
public class SrPerspective implements Serializable {
    private static final long serialVersionUID = 1L;
    /**
    * 主键id
    * 
    */
    @Excel(name = &quot;主键id&quot;, width = 20, isImportField = &quot;true_st&quot;)
    @TableId(value = &quot;id&quot;,type = IdType.ID_WORKER)
    private Long id;
    /**
     * 主题
     *
     */
    @Excel(name = &quot;主题&quot;, width = 20, isImportField = &quot;true_st&quot;)
    @TableField(value=&quot;REQ_PATH&quot;)
    private String reqPath;</code></pre><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><pre><code>@RequestMapping(&quot;/export&quot;)
    public void exportExcel(String[] ids,
                            boolean isAll,
                            String name,
                            String beginTime,
                            String endTime,
                            String projectNo,
                            String systemName,
                            String bizSceneName,
                            String operRoleName,
                            String bizStageName,
                            String funcPointTypeName,
                            String impLvName,
                            HttpServletResponse response) throws Exception {
        response.setHeader(&quot;content-Type&quot;, &quot;application/vnd.ms-excel&quot;);
        String fileName = &quot;需求透视图-&quot;;
        // 下载文件的默认名称
        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(fileName, &quot;UTF-8&quot;) + System.currentTimeMillis() + &quot;.xls&quot;);
        List&lt;SrPerspective&gt; list;
        if (isAll) {
            //导出所有页
            list = srPerspectiveService.exportDataAll( name,  projectNo, systemName,
                    bizSceneName, operRoleName, bizStageName, funcPointTypeName, impLvName);
        }else {
            //导出所选数据
            list = srPerspectiveService.exportDataByIds(ids);
        }
        List&lt;SrPerspectiveDto&gt; result = new ArrayList&lt;&gt;();
        for (SrPerspective data : list) {
            result.add(this.srPerspectiveService.convert(data));
        }
        Workbook workbook = ExcelExportUtil.exportExcel(
                new ExportParams(null, &quot;需求透视图&quot;), SrPerspectiveDto.class, result);
        workbook.write(response.getOutputStream());
    }</code></pre><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre><code>@RequestMapping(value = &quot;/import&quot;, method = {RequestMethod.POST})
@ResponseBody
public Object importExcel(MultipartFile file) throws Exception {
    ImportParams params = new ImportParams();
    params.setHeadRows(1);
    List&lt;SrPerspectiveDto&gt; list = ExcelImportUtil.importExcel(
            file.getInputStream(), SrPerspectiveDto.class, params);
    if (list.size() &gt; 5000) {
        return ResponseData.error(&quot;最多一次导入5000条&quot;);
    }
    HashMap&lt;String, PpProject&gt; projects = ppMemberService.getMemberProject(&quot;测试经理&quot;);
    if (projects.size() == 0) {
        return ResponseData.error(&quot;您没有任何项目权限！&quot;);
    }
    String result = srPerspectiveService.importExcel(list, projects);
    return ResponseData.success(&quot;导入成功：&lt;br/&gt;&quot; + result);
}</code></pre>
    <div id="aplayer-qKYerxQL" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="440208476" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>


]]></content>
  </entry>
  <entry>
    <title>dubbo基础</title>
    <url>/2019/10/15/dubbo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="什么是RPC？"><a href="#什么是RPC？" class="headerlink" title="什么是RPC？"></a>什么是RPC？</h2><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p>
<a id="more"></a>
<h2 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h2><p>Apache Dubbo是一款高性能、轻量级的开源JavaRPC框架，它提供了三大核心能力：<br>面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。<br>在serviceImpl中添加dubbo的@service注解暴露服务</p>
<p>服务消费者（Consumer）: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务,服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。<br>在消费者需要调用什么方法的地方不用@autowire导入方法而是@reference</p>
<p>注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p>
<p>监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p>
<h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><p>zookeeper作为注册中心<br>监控中心宕掉不影响使用，只是丢失部分采样数据<br>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务<br>注册中心对等集群，任意一台宕掉后，将自动切换到另一台<br>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯（还有dubbo直连）<br>服务提供者无状态，任意一台宕掉后，不影响使用<br>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</p>
<h2 id="整合hystrix"><a href="#整合hystrix" class="headerlink" title="整合hystrix"></a>整合hystrix</h2><p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能</p>
<h3 id="spring-boot官方提供了对hystrix的集成，直接在pom-xml里加入依赖："><a href="#spring-boot官方提供了对hystrix的集成，直接在pom-xml里加入依赖：" class="headerlink" title="spring boot官方提供了对hystrix的集成，直接在pom.xml里加入依赖："></a>spring boot官方提供了对hystrix的集成，直接在pom.xml里加入依赖：</h3><pre><code> &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;
    &lt;version&gt;1.4.4.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre><h3 id="配置Provider端"><a href="#配置Provider端" class="headerlink" title="配置Provider端"></a>配置Provider端</h3><p>在Dubbo的Provider上增加@HystrixCommand配置，这样子调用就会经过Hystrix代理。</p>
<pre><code>@Service(version = &quot;1.0.0&quot;)
public class HelloServiceImpl implements HelloService {
    @HystrixCommand(commandProperties = {
     @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),
     @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;) })
    @Override
    public String sayHello(String name) {
        // System.out.println(&quot;async provider received: &quot; + name);
        // return &quot;annotation: hello, &quot; + name;
        throw new RuntimeException(&quot;Exception to show hystrix enabled.&quot;);
    }
}</code></pre><h3 id="配置Consumer端"><a href="#配置Consumer端" class="headerlink" title="配置Consumer端"></a>配置Consumer端</h3><p>对于Consumer端，则可以增加一层method调用，并在method上配置@HystrixCommand。当调用出错时，会走到fallbackMethod = “reliable”的调用里。</p>
<pre><code>@Reference(version = &quot;1.0.0&quot;)
private HelloService demoService;
@HystrixCommand(fallbackMethod = &quot;reliable&quot;)
public String doSayHello(String name) {
    return demoService.sayHello(name);
}
public String reliable(String name) {
    return &quot;hystrix fallback value&quot;;
}</code></pre><h2 id="什么是服务降级？"><a href="#什么是服务降级？" class="headerlink" title="什么是服务降级？"></a>什么是服务降级？</h2><p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>1.Random LoadBalance<br>随机，按权重设置随机概率。<br>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。<br>2.RoundRobin LoadBalance<br>轮循，按公约后的权重设置轮循比率。存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。<br>3.LeastActive LoadBalance<br>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。<br>4.ConsistentHash LoadBalance<br>一致性 Hash，相同参数的请求总是发到同一提供者。当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：<a href="http://en.wikipedia.org/wiki/" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/</a></p>
<h2 id="配置文件示例-SSM-boot的可根据SSM的来配"><a href="#配置文件示例-SSM-boot的可根据SSM的来配" class="headerlink" title="配置文件示例(SSM)(boot的可根据SSM的来配)"></a>配置文件示例(SSM)(boot的可根据SSM的来配)</h2><p>服务端：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;
    &lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;
    &lt;dubbo:application name=&quot;user-service-provider&quot;&gt;&lt;/dubbo:application&gt;

    &lt;!-- 2、指定注册中心的位置 --&gt;
    &lt;!-- &lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;&gt;&lt;/dubbo:registry&gt; --&gt;
    &lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;127.0.0.1:2181&quot;&gt;&lt;/dubbo:registry&gt;

    &lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;
    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20882&quot;&gt;&lt;/dubbo:protocol&gt;

    &lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --&gt;
    &lt;dubbo:service interface=&quot;com.atguigu.gmall.service.UserService&quot; 
        ref=&quot;userServiceImpl01&quot; timeout=&quot;1000&quot; version=&quot;1.0.0&quot;&gt;
        &lt;dubbo:method name=&quot;getUserAddressList&quot; timeout=&quot;1000&quot;&gt;&lt;/dubbo:method&gt;
    &lt;/dubbo:service&gt;

    &lt;!--统一设置服务提供方的规则  --&gt;
    &lt;dubbo:provider timeout=&quot;1000&quot;&gt;&lt;/dubbo:provider&gt;


    &lt;!-- 服务的实现 --&gt;
    &lt;bean id=&quot;userServiceImpl01&quot; class=&quot;com.atguigu.gmall.service.impl.UserServiceImpl&quot;&gt;&lt;/bean&gt;


    &lt;dubbo:service interface=&quot;com.atguigu.gmall.service.UserService&quot; 
        ref=&quot;userServiceImpl02&quot; timeout=&quot;1000&quot; version=&quot;2.0.0&quot;&gt;
        &lt;dubbo:method name=&quot;getUserAddressList&quot; timeout=&quot;1000&quot;&gt;&lt;/dubbo:method&gt;
    &lt;/dubbo:service&gt;
    &lt;bean id=&quot;userServiceImpl02&quot; class=&quot;com.atguigu.gmall.service.impl.UserServiceImpl2&quot;&gt;&lt;/bean&gt;

    &lt;!-- 连接监控中心 --&gt;
    &lt;dubbo:monitor protocol=&quot;registry&quot;&gt;&lt;/dubbo:monitor&gt;

&lt;/beans&gt;</code></pre><p>消费端：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;
    &lt;context:component-scan base-package=&quot;com.atguigu.gmall.service.impl&quot;&gt;&lt;/context:component-scan&gt;
    &lt;dubbo:application name=&quot;order-service-consumer&quot;&gt;&lt;/dubbo:application&gt;

    &lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;&gt;&lt;/dubbo:registry&gt;

    &lt;!--  配置本地存根--&gt;

    &lt;!--声明需要调用的远程服务的接口；生成远程服务代理  --&gt;
    &lt;!-- 
        1）、精确优先 (方法级优先，接口级次之，全局配置再次之)
        2）、消费者设置优先(如果级别一样，则消费方优先，提供方次之)
    --&gt;
    &lt;!-- timeout=&quot;0&quot; 默认是1000ms--&gt;
    &lt;!-- retries=&quot;&quot;:重试次数，不包含第一次调用，0代表不重试--&gt;
    &lt;!-- 幂等（设置重试次数）【查询、删除、修改】、非幂等（不能设置重试次数）【新增】 --&gt;
    &lt;dubbo:reference interface=&quot;com.atguigu.gmall.service.UserService&quot; 
        id=&quot;userService&quot; timeout=&quot;5000&quot; retries=&quot;3&quot; version=&quot;*&quot;&gt;
        &lt;!-- &lt;dubbo:method name=&quot;getUserAddressList&quot; timeout=&quot;1000&quot;&gt;&lt;/dubbo:method&gt; --&gt;
    &lt;/dubbo:reference&gt;

    &lt;!-- 配置当前消费者的统一规则：所有的服务都不检查 --&gt;
    &lt;dubbo:consumer check=&quot;false&quot; timeout=&quot;5000&quot;&gt;&lt;/dubbo:consumer&gt;
    &lt;dubbo:monitor protocol=&quot;registry&quot;&gt;&lt;/dubbo:monitor&gt;
    &lt;!-- &lt;dubbo:monitor address=&quot;127.0.0.1:7070&quot;&gt;&lt;/dubbo:monitor&gt; --&gt;

&lt;/beans&gt;</code></pre>
    <div id="aplayer-PeUwziIE" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="461347998" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
      <tags>
        <tag>-大数据 -分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>该死的树（java）</title>
    <url>/2019/10/11/%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="大牛勿嘲"><a href="#大牛勿嘲" class="headerlink" title="大牛勿嘲"></a>大牛勿嘲</h2><p>我就是垃圾</p>
<a id="more"></a>
<h2 id="需求简介"><a href="#需求简介" class="headerlink" title="需求简介"></a>需求简介</h2><p>要求是把数据库中的所有path提取出来，根据斜杠截取，斜杠前是父节点，后面是子节点，需要判断数据重复<br><img src="/images/Ahem/1570776393(1).jpg" alt="示例图"></p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/Ahem/15701276490(1).jpg" alt="示例图"></p>
<h2 id="涉及代码"><a href="#涉及代码" class="headerlink" title="涉及代码"></a>涉及代码</h2><pre><code>/**
 * 获取tree列表，ztree格式
 *
 * @author wml
 * @Date 2019/10/10 20:00 PM
 */
@RequestMapping(value = &quot;/tree&quot;)
@ResponseBody
public synchronized List&lt;ZTreeNode&gt; tree() {
    List&lt;ZTreeNode&gt; tree = new ArrayList&lt;ZTreeNode&gt;();
    // 视图循环取每行记录
    List&lt;TestCase&gt; testCaseList = this.testCaseService.convertPath();  //这句只是把数据从数据库取出来，写的方法名字有误解
    String temp =&quot;&quot;;
    String sum=&quot;&quot;;
    String fullparentPath=&quot;&quot;;
    ZTreeNode node = new ZTreeNode();
    node.setChecked(true);
    node.setId(0L);
    node.setName(&quot;顶级&quot;);
    node.setOpen(true);
    node.setPId(0L);
    node.setFullPath(&quot;&quot;);
    tree.add(node);
    for(TestCase testCase : testCaseList){
        try{
        String[] aftersplit = testCase.getCasePath().split(&quot;\\\\&quot;);
        for(int i = 0; i &lt;aftersplit.length; i++) {
           if(i==aftersplit.length-1){
            temp = aftersplit[i];
        }else {
            temp = aftersplit[i] + &quot;\\&quot;;
        }
            sum += temp;
            fullparentPath = &quot;&quot;;
          for(int j=0;j&lt;i;j++){
              fullparentPath += (aftersplit[j] + &quot;\\&quot;);
          }
            if (nodefound(sum, tree) == true) {
            } else {
                ZTreeNode zTreeNode = new ZTreeNode();
                zTreeNode.setFullPath(sum);
                zTreeNode.setName(aftersplit[i]);
                zTreeNode.setId((long)(tree.size()+1));
                zTreeNode.setPId((long)getNodeId(fullparentPath,tree));
                tree.add(zTreeNode);
            }
        }
        sum=&quot;&quot;;
    }catch (Exception e){
            e.printStackTrace();
        }
    }
    return tree;
}
private boolean nodefound(String fullPath,List&lt;ZTreeNode&gt; zTreeNodeList){
    for(ZTreeNode node : zTreeNodeList){
        if(node.getFullPath().equals(fullPath)){
            return true;
        }
    }
    return false;
}
   private int getNodeId(String fullparentPath,List&lt;ZTreeNode&gt; zTreeNodeList){
    for (ZTreeNode node : zTreeNodeList){
        if (node.getFullPath().equals(fullparentPath)){
            return node.getId().intValue();
        }
    }
    return 0;
}</code></pre><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>1.pid的赋值应该是根据当前路径的上一个路径的id来赋值<br>2.nodefound()方法是用来判断重复数据的<br>3.积累，进步！</p>
<h2 id="zTree"><a href="#zTree" class="headerlink" title="zTree"></a>zTree</h2><p>这次用的是zTree，贴一下相关代码吧<br>类：</p>
<pre><code>@Data
public class ZTreeNode {
    /**
     * 节点id
     */
    private Long id;
    /**
     * 父节点id
     */
    private Long pId;
    /**
     * 节点名称
     */
    private String name;
     /**
     * 节点途径
     */
    private String fullPath;</code></pre><p>前端js涉及：<br><img src="/images/Ahem/1570775749(1).jpg" alt="示例图"></p>

    <div id="aplayer-ZupCVXvU" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="36492681" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
  </entry>
  <entry>
    <title>验证码（java）</title>
    <url>/2019/10/07/Hutool%E5%B7%A5%E5%85%B7%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="国庆最后一天，你开心马"><a href="#国庆最后一天，你开心马" class="headerlink" title="国庆最后一天，你开心马"></a>国庆最后一天，你开心马</h2><p>程序员拯救世界</p>
<a id="more"></a>
<h2 id="maven导包"><a href="#maven导包" class="headerlink" title="maven导包"></a>maven导包</h2><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;
    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;
    &lt;version&gt;4.6.8&lt;/version&gt;
&lt;/dependency&gt;</code></pre><h2 id="直接来吧baby"><a href="#直接来吧baby" class="headerlink" title="直接来吧baby"></a>直接来吧baby</h2><h3 id="在登录的controller层去写下面的代码（记得验证码是放在session里面）："><a href="#在登录的controller层去写下面的代码（记得验证码是放在session里面）：" class="headerlink" title="在登录的controller层去写下面的代码（记得验证码是放在session里面）："></a>在登录的controller层去写下面的代码（记得验证码是放在session里面）：</h3><pre><code>/**
 * 得到登陆验证码
 * @throws IOException 
 */
@RequestMapping(&quot;getCode&quot;)
public void getCode(HttpServletResponse response,HttpSession session) throws IOException {
    // 定义图形验证码的长和宽
    LineCaptcha lineCaptcha = CaptchaUtil.createLineCaptcha(116, 36,4,5); //4是指4个验证码，5是扰乱的东西
    session.setAttribute(&quot;code&quot;, lineCaptcha.getCode());
    ServletOutputStream outputStream = response.getOutputStream();
    ImageIO.write(lineCaptcha.getImage(), &quot;JPEG&quot;, outputStream);
}</code></pre><h3 id="修改你的登录方法"><a href="#修改你的登录方法" class="headerlink" title="修改你的登录方法"></a>修改你的登录方法</h3><p><img src="/images/Ahem/1332233.jpg" alt="示例图"></p>
<p>如图中先做一次判断，如果验证码不正确的话重新登录</p>
<h3 id="前端修改"><a href="#前端修改" class="headerlink" title="前端修改"></a>前端修改</h3><p>在你前端去调用啦<br><img src="/images/Ahem/123qweasdzxc.jpg" alt="示例图"></p>
<p>调用了之后已经出现验证码，这个时候你要实现点一下验证码就换一个验证码，怎么实现呢？COME ON</p>
<pre><code>&lt;div class=&quot;layui-form-item input-item&quot; id=&quot;imgCode&quot;&gt;
        &lt;label for=&quot;code&quot;&gt;验证码&lt;/label&gt;
        &lt;input type=&quot;text&quot; placeholder=&quot;请输入验证码&quot;  autocomplete=&quot;off&quot; name=&quot;code&quot; id=&quot;code&quot; class=&quot;layui-input&quot;&gt;
        &lt;img src=&quot;${ctx}/login/getCode.action&quot; onclick=&quot;this.src=this.src+&apos;?&apos;&quot;&gt;
    &lt;/div&gt;</code></pre><p>自己和上面一张图对比看一下区别吧，略略略</p>

    <div id="aplayer-OhbFvlDh" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="515453363" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
  </entry>
  <entry>
    <title>二维码生成与解析（java）</title>
    <url>/2019/10/07/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E4%B8%8E%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="二维码的生成方式"><a href="#二维码的生成方式" class="headerlink" title="二维码的生成方式"></a>二维码的生成方式</h2><p>1.qrcode  日本的<br>2.zxing 谷歌的<br>3.重点注意IO流的使用<br>4.如何做一个中间有logo的二维码<br>5.你问我怎么不截图只贴代码？代码都给你了你还想怎样</p>
<a id="more"></a>
<h2 id="maven导包"><a href="#maven导包" class="headerlink" title="maven导包"></a>maven导包</h2><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;
    &lt;artifactId&gt;core&lt;/artifactId&gt;
    &lt;version&gt;3.4.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;
    &lt;artifactId&gt;javase&lt;/artifactId&gt;
    &lt;version&gt;3.4.0&lt;/version&gt;
&lt;/dependency&gt;</code></pre><h2 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h2><h3 id="生成核心代码"><a href="#生成核心代码" class="headerlink" title="生成核心代码"></a>生成核心代码</h3><pre><code>public class ZXingCodeEncodeUtils {
    // 二维码颜色
    private static final int BLACK = 0xFF000000;
    // 二维码背景颜色
    private static final int WHITE = 0xFFFFFFFF;
    // 二维码格式参数
    private static final EnumMap&lt;EncodeHintType, Object&gt; hints = new EnumMap&lt;EncodeHintType, Object&gt;(
            EncodeHintType.class);
    static {
        /*
         * 二维码的纠错级别(排错率),4个级别： L (7%)、 M (15%)、 Q (25%)、 H (30%)(最高H)
         * 纠错信息同样存储在二维码中，纠错级别越高，纠错信息占用的空间越多，那么能存储的有用讯息就越少；共有四级； 选择M，扫描速度快。
         */
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
        // 二维码边界空白大小 1,2,3,4 (4为默认,最大)
        hints.put(EncodeHintType.MARGIN, 1);
        hints.put(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);// 设置放入的字符的编码
    }
    /**
     * 生成二维码保存到硬盘
     */
    public static void createZXingCodeSaveToDisk(String content, int width, int height, String savePath,
            String imageType) {
        try {
            BufferedImage image=createZXingCodeNormal(content, width, height);
            // 保存图片到硬盘
            File file = new File(savePath);
            if (!file.exists()) {
                file.createNewFile();
            }
            ImageIO.write(image, imageType, file);
            System.out.println(&quot;生成成功&quot;);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * 生成二维码返回图片对象
     */
    public static BufferedImage createZXingCodeNormal(String content, int width, int height) {
        try {
            BitMatrix encode = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);
            // 得到二维码的宽度
            int code_width = encode.getWidth();
            int code_height = encode.getHeight();
            // 创建图片
            BufferedImage image = new BufferedImage(code_width, code_height, BufferedImage.TYPE_INT_RGB);
            // 把二维码里面的信息写到图片里面
            for (int i = 0; i &lt; code_width; i++) {
                for (int j = 0; j &lt; code_height; j++) {
                    image.setRGB(i, j, encode.get(i, j) ? BLACK : WHITE);
                }
            }
            return image;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     * 生成一张带logo的二维码
     * @param logoStream  logo的流对象
     * 
     */
    public static void createZxingCodeUseLogoSaveToDisk(String content, int width, int height, String savePath,
            String imageType,InputStream logoStream) {
        try {
            BufferedImage codeImage=createZxingCodeUseLogo(content, width, height, logoStream);
            // 保存图片到硬盘
            File file = new File(savePath);
            if (!file.exists()) {
                file.createNewFile();
            }
            ImageIO.write(codeImage, imageType, file);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 生成一张带logo的二维码  返回BuffredeImage
     * @param logoStream  logo的流对象
     * 
     */
    public static BufferedImage createZxingCodeUseLogo(String content, int width, int height,InputStream logoStream) {

        try {
            //生成二维码图片
            BufferedImage codeNormal = createZXingCodeNormal(content, width, height);
            if(null!=codeNormal) {
                //判断logoStream是否为空
                if(null!=logoStream) {
                    //拿到可以操作当前图片的画笔
                    Graphics2D graphics = codeNormal.createGraphics();
                    //得到logo图片的对象
                    BufferedImage logoImage = ImageIO.read(logoStream);
                    //得到logo的原始宽高
                    int old_logo_width = logoImage.getWidth();
                    int old_logo_height = logoImage.getHeight();


                    //得到二维码的宽高
                    int code_width=codeNormal.getWidth();
                    int code_height=codeNormal.getHeight();

                    //算出logo在二维码里面能存在的最大值
                    int logo_max_width=code_width/5;
                    int logo_max_height=code_height/5;

                    //计算logo的可用宽高
                    int logo_width=logo_max_width&lt;old_logo_width?logo_max_width:old_logo_width;
                    int logo_height=logo_max_height&lt;old_logo_height?logo_max_height:old_logo_height;

                    //计算logo的开始点的坐标
                    int x=(code_width-logo_width)/2;
                    int y=(code_height-logo_height)/2;

                    /**
                     * logoImage logo图片对象
                     * x 开始画的x轴坐标
                     * y 开始画的y轴的坐
                     * logo_width 要画的x轴的长度
                     * logo_height 要画的y车的长度
                     * arg5  null
                     */
                    graphics.drawImage(logoImage, x, y, logo_width, logo_height, null);

                    graphics.setStroke(new BasicStroke(2));
                    graphics.setColor(Color.WHITE);
                    //画白色边框
                    graphics.drawRoundRect(x, y, logo_width, logo_height, 15, 15);
                    graphics.dispose();//让画上的去的内容生效
                    return codeNormal;
                }
            }else {
                System.out.println(&quot;生成失败&quot;);
            }

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(&quot;生成失败&quot;);
        }
        return null;
    }

    public static void main(String[] args) {
//        createZXingCodeSaveToDisk(&quot;Andrew&quot;, 400, 400, &quot;D:/Andrew.gif&quot;, &quot;JPEG&quot;);
        InputStream logoStream=ZXingCodeEncodeUtils.class.getClassLoader().getResourceAsStream(&quot;logo.jpg&quot;);
        createZxingCodeUseLogoSaveToDisk(&quot;Andrew&quot;, 400, 400, &quot;D:/Andrew.gif&quot;, &quot;JPEG&quot;, logoStream);

    }
}</code></pre><h3 id="将二维码写到网页上（注意流的使用）"><a href="#将二维码写到网页上（注意流的使用）" class="headerlink" title="将二维码写到网页上（注意流的使用）"></a>将二维码写到网页上（注意流的使用）</h3><pre><code>@WebServlet(&quot;/code.action&quot;)
public class CodeServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //生成图片
//        BufferedImage codeImage=ZXingCodeEncodeUtils.createZXingCodeNormal(&quot;Andrew&quot;, 300, 300);
        InputStream logoStream=this.getClass().getClassLoader().getResourceAsStream(&quot;logo.jpg&quot;);
        BufferedImage codeImage=ZXingCodeEncodeUtils.createZxingCodeUseLogo(&quot;Andrew&quot;, 300, 300, logoStream);

        ServletOutputStream outputStream = response.getOutputStream();
        ImageIO.write(codeImage, &quot;JPEG&quot;, outputStream);
        outputStream.close();
    }
}</code></pre><h2 id="二维码的解析"><a href="#二维码的解析" class="headerlink" title="二维码的解析"></a>二维码的解析</h2><h3 id="解析核心代码"><a href="#解析核心代码" class="headerlink" title="解析核心代码"></a>解析核心代码</h3><pre><code>public class ZXingCodeDecodeUtils {
    // 二维码格式参数
    private static final EnumMap&lt;DecodeHintType, Object&gt; decodeHints = new EnumMap&lt;DecodeHintType, Object&gt;(
            DecodeHintType.class);
    static {
        decodeHints.put(DecodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);
    }
    /**
     * 解析文件
     * 
     * @param args
     */
    public static String decodeCodeFile(String path) {
        File file = new File(path);
        if (file.exists()) {
            // 把文件转成图片对象
            try {
                String content = decodeCodeStream(new FileInputStream(file));
                return content;
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        } else {
            return null;
        }
    }
    /**
     * 解析流
     * 
     * @param args
     */
    public static String decodeCodeStream(InputStream is) {
        if (null != is) {
            try {
                BufferedImage image = ImageIO.read(is);
                LuminanceSource source = new BufferedImageLuminanceSource(image);
                Binarizer binarizer = new HybridBinarizer(source);
                BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer);
                MultiFormatReader reader = new MultiFormatReader();
                Result result = reader.decode(binaryBitmap, decodeHints);
                String content = result.getText();
                return content;
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        }
        return null;
    }
    public static void main(String[] args) throws FileNotFoundException {
//        String string = decodeCodeFile(&quot;D:/Andrew.gif&quot;);
        String string = decodeCodeStream(new FileInputStream(new File(&quot;D:/Andrew.gif&quot;)));
        System.out.println(string);
    }
}</code></pre><h3 id="上传到网页解析实例"><a href="#上传到网页解析实例" class="headerlink" title="上传到网页解析实例"></a>上传到网页解析实例</h3><pre><code>@WebServlet(&quot;/decode.action&quot;)
@MultipartConfig
public class DeCodeServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Part part=request.getPart(&quot;mf&quot;);
        request.setCharacterEncoding(&quot;utf-8&quot;);
        response.setCharacterEncoding(&quot;utf-8&quot;);
        response.setContentType(&quot;text/html;charset=utf-8&quot;);
        String string = ZXingCodeDecodeUtils.decodeCodeStream(part.getInputStream());
        PrintWriter out = response.getWriter();
        out.write(string);
        out.flush();
        out.close();
    }
}</code></pre>
    <div id="aplayer-xExrdFuZ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="528326686" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
  </entry>
  <entry>
    <title>来做做数据库的题吧（二）</title>
    <url>/2019/09/27/shujuku2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="接着做做题吧"><a href="#接着做做题吧" class="headerlink" title="接着做做题吧"></a>接着做做题吧</h2><a id="more"></a>
<h2 id="把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩"><a href="#把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩" class="headerlink" title="把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩"></a>把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩</h2><p>Select * Into Sc From tblScore<br>go Update Sc Set Score=(Select Avg(Score) From tblScore s1 Where s1.CourseId=sc.CourseId)<br>Where CourseId IN<br>(Select CourseId From tblCourse cs INNER JOIN tblTeacher tc ON cs.TeaID=tc.TeaID WHERE TeaName =’叶平’)</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2>]]></content>
  </entry>
  <entry>
    <title>来做做数据库的题吧（一）</title>
    <url>/2019/09/25/shujuku1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="数据库的一些小题目"><a href="#数据库的一些小题目" class="headerlink" title="数据库的一些小题目"></a>数据库的一些小题目</h2><a id="more"></a>
<h2 id="先看看表结构吧"><a href="#先看看表结构吧" class="headerlink" title="先看看表结构吧"></a>先看看表结构吧</h2><p><img src="/images/Ahem/1569395126(1).jpg" alt="示例图"></p>
<h2 id="查询课程1的成绩比课程2的成绩高的所有学生的学号"><a href="#查询课程1的成绩比课程2的成绩高的所有学生的学号" class="headerlink" title="查询课程1的成绩比课程2的成绩高的所有学生的学号"></a>查询课程1的成绩比课程2的成绩高的所有学生的学号</h2><p>SELECT * FROM tblScore ts1, tblScore ts2<br>WHERE ts1.stuid = ts2.stuid AND ts1.courseid = ‘1’ AND ts2.courseid = ‘2’ AND ts1.score &gt; ts2.score</p>
<h2 id="查询平均成绩大于60分的同学的学号和平均成绩"><a href="#查询平均成绩大于60分的同学的学号和平均成绩" class="headerlink" title="查询平均成绩大于60分的同学的学号和平均成绩"></a>查询平均成绩大于60分的同学的学号和平均成绩</h2><p>SELECT stu.stuid, AVG(score.score)FROM tblstudent stu, tblscore score<br>WHERE stu.stuid = score.stuid GROUP BY stu.stuid<br>HAVING AVG(score.score) &gt; 60</p>
<h2 id="查询所有同学的学号、姓名、选课数、总成绩"><a href="#查询所有同学的学号、姓名、选课数、总成绩" class="headerlink" title="查询所有同学的学号、姓名、选课数、总成绩"></a>查询所有同学的学号、姓名、选课数、总成绩</h2><p>SELECT stu.stuid, stu.stuname,COUNT(score.courseid),SUM(score.score)<br>FROM tblstudent stu, tblCourse course, tblScore score<br>WHERE stu.stuid = score.stuid AND course.courseid = score.courseid<br>GROUP BY stu.stuid,stu.stuname ORDER BY stuid</p>
<h2 id="查询姓“张”的老师的个数"><a href="#查询姓“张”的老师的个数" class="headerlink" title="查询姓“张”的老师的个数"></a>查询姓“张”的老师的个数</h2><p><img src="/images/Ahem/1569390424(1).jpg" alt="示例图"></p>
<h2 id="查询没学过“张三”老师课的同学的学号、姓名"><a href="#查询没学过“张三”老师课的同学的学号、姓名" class="headerlink" title="查询没学过“张三”老师课的同学的学号、姓名"></a>查询没学过“张三”老师课的同学的学号、姓名</h2><p>SELECT *<br>FROM tblstudent<br>WHERE tblstudent.StuId NOT IN(SELECT tblscore.StuId FROM tblscore,<br>( SELECT t1.courseid kid FROM tblcourse t1,<br>(SELECT  tblteacher.TeaId tid FROM tblteacher WHERE tblteacher.TeaName=’张三’) t2<br>  WHERE t1.teaid=t2.tid) ykid  – 查出来张三老师上的课的课程id<br>  WHERE tblscore.CourseId=ykid.kid )<br>这是先查出来学过张三老师课程的同学，然后排用NOT IN排除掉</p>
<h2 id="查询同时学过课程1和课程2的同学的学号、姓名"><a href="#查询同时学过课程1和课程2的同学的学号、姓名" class="headerlink" title="查询同时学过课程1和课程2的同学的学号、姓名"></a>查询同时学过课程1和课程2的同学的学号、姓名</h2><p>标准答案：<br> SELECT StuId,StuName FROM tblStudent st<br>  WHERE (SELECT COUNT(<em>) FROM tblScore s1 WHERE s1.StuId=st.StuId AND s1.CourseId=’001’)&gt;0<br>   AND<br>   (SELECT COUNT(</em>) FROM tblScore s2 WHERE s2.StuId=st.StuId AND s2.CourseId=’002’)&gt;0</p>
<p> 其他答案：<br> SELECT<br>tblstudent.StuId,tblstudent.StuName<br>FROM<br>(SELECT t11.t1sid t33id<br>FROM<br>(SELECT t1.StuId t1sid FROM tblscore t1 WHERE t1.CourseId=’001’)t11,– 001的学生的id<br>(SELECT t1.StuId  t2sid FROM tblscore t1 WHERE t1.CourseId=’002’)t22– 002的学生的id<br>WHERE<br>t11.t1sid=t22.t2sid) t33   – 查出来的是学过“001”并且也学过编号“002”课程的同学的学号<br>,<br>tblstudent<br>WHERE tblstudent.StuId=t33.t33id</p>
<h2 id="查询学过“李四”老师所教所有课程的所有同学的学号、姓名"><a href="#查询学过“李四”老师所教所有课程的所有同学的学号、姓名" class="headerlink" title="查询学过“李四”老师所教所有课程的所有同学的学号、姓名"></a>查询学过“李四”老师所教所有课程的所有同学的学号、姓名</h2><p>select st.StuId,st.StuName from tblstudent st where </p>
<p>NOT EXISTS<br>(<br>//要满足的条件是：<br>//1:查叶平的id(两个)<br>//2：叶平的两个id（看做一个整体）不能包含在我学生对应的查出来的成绩表中的课程id</p>
<p>select  tblcourse.CourseId from tblcourse where tblcourse.TeaId=<br>(<br>select  tblteacher.TeaId from tblteacher where tblteacher.TeaName=’叶平’– 查出叶平老师的id<br>) and tblcourse.CourseId nOT IN(<br>SELECT TBLSCORE.CourseId FROM TBLSCORE WHERE tblscore.StuId=st.StuId</p>
<p>)<br>)</p>
<h2 id="查询课程编号1的成绩比课程编号2的成绩高的所有同学的学号、姓名"><a href="#查询课程编号1的成绩比课程编号2的成绩高的所有同学的学号、姓名" class="headerlink" title="查询课程编号1的成绩比课程编号2的成绩高的所有同学的学号、姓名"></a>查询课程编号1的成绩比课程编号2的成绩高的所有同学的学号、姓名</h2><p>select tblstudent.StuId,tblstudent.StuName from tblstudent where<br>(<br>(select tblscore.Score from tblscore where tblstudent.StuId=tblscore.StuId and tblscore.CourseId=’002’)<br>&lt;(select tblscore.Score from tblscore where tblstudent.StuId=tblscore.StuId and tblscore.CourseId=’001’)<br>)</p>
<h2 id="查询所有课程成绩小于60分的同学的学号、姓名"><a href="#查询所有课程成绩小于60分的同学的学号、姓名" class="headerlink" title="查询所有课程成绩小于60分的同学的学号、姓名"></a>查询所有课程成绩小于60分的同学的学号、姓名</h2><p>select tblstudent.StuId,tblstudent.StuName from tblstudent where<br>tblstudent.StuId NOT IN<br>(select tblscore.StuId from tblscore where tblstudent.StuId=tblscore.StuId AND tblscore.Score&gt;60)</p>
<h2 id="查询至少有一门课程与学号为1001的同学所学课程相同的同学的学号和姓名"><a href="#查询至少有一门课程与学号为1001的同学所学课程相同的同学的学号和姓名" class="headerlink" title="查询至少有一门课程与学号为1001的同学所学课程相同的同学的学号和姓名"></a>查询至少有一门课程与学号为1001的同学所学课程相同的同学的学号和姓名</h2><p> 方法一：<br> —–嵌套子查询<br> Select StuId,StuName From tblStudent<br>  Where StuId In<br>  (<br>   Select Distinct StuId From tblScore Where CourseId In (Select CourseId From tblScore Where StuId=’1001’)<br>  )</p>
<p> 方法二：<br> Select DistInct st.StuId,StuName From tblStudent st<br>  Inner Join tblScore sc ON st.StuId=sc.StuId<br>   Where sc.CourseId IN (Select CourseId From tblScore Where StuId=’1001’) </p>
]]></content>
  </entry>
  <entry>
    <title>仿抖音微信小程序日记Num.7</title>
    <url>/2019/09/15/%E4%BB%BF%E6%8A%96%E9%9F%B3Num7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="zookeeper介绍"><a href="#zookeeper介绍" class="headerlink" title="zookeeper介绍"></a>zookeeper介绍</h2><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>
<a id="more"></a>
<h2 id="SpringMVC-与-ZK-Curator整合（bgm下载）"><a href="#SpringMVC-与-ZK-Curator整合（bgm下载）" class="headerlink" title="SpringMVC 与 ZK Curator整合（bgm下载）"></a>SpringMVC 与 ZK Curator整合（bgm下载）</h2><p><img src="/images/Ahem/Ahem.jpg" alt="示例图"></p>
<p>1.配置zookeeper.xml文件(第一段注释部分是要的哦)：<br>      <!-- <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">
        <description>zookeeper 放入spring容器，项目启动加载的时候就建立和zk的连接</description> --></p>
<pre><code>&lt;!-- 创建重连策略 --&gt;
&lt;bean id=&quot;retryPolicy&quot; class=&quot;org.apache.curator.retry.ExponentialBackoffRetry&quot;&gt;
    &lt;!-- 每次重试连接的等待时间 --&gt;
    &lt;constructor-arg index=&quot;0&quot; value=&quot;1000&quot;&gt;&lt;/constructor-arg&gt;
    &lt;!-- 设置的重连的次数 --&gt;
    &lt;constructor-arg index=&quot;1&quot; value=&quot;5&quot;&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;!-- 创建zookeeper客户端 --&gt;
&lt;bean id=&quot;client&quot; class=&quot;org.apache.curator.framework.CuratorFrameworkFactory&quot; 
    factory-method=&quot;newClient&quot; init-method=&quot;start&quot;&gt;
    &lt;constructor-arg index=&quot;0&quot; value=&quot;192.168.217.131:2181&quot;&gt;&lt;/constructor-arg&gt;
    &lt;constructor-arg index=&quot;1&quot; value=&quot;10000&quot;&gt;&lt;/constructor-arg&gt;
    &lt;constructor-arg index=&quot;2&quot; value=&quot;10000&quot;&gt;&lt;/constructor-arg&gt;
    &lt;constructor-arg index=&quot;3&quot; ref=&quot;retryPolicy&quot;&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;!-- 客户端配置 --&gt;
&lt;!-- init-method=&quot;init&quot; 不使用zk的话，仅仅只是测试为了方便可以把这个方法暂时拿掉 --&gt;
&lt;bean id=&quot;ZKCurator&quot; class=&quot;com.wang.ZKCurator&quot; init-method=&quot;init&quot;&gt;
    &lt;constructor-arg index=&quot;0&quot; ref=&quot;client&quot;&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>2.创建zookeeper类文件，编写相关代码：</p>
<pre><code>public class ZKCurator {
     &lt;!-- zk客户端 --&gt;
    private CuratorFramework client = null;    
    final static Logger log = LoggerFactory.getLogger(ZKCurator.class);

    public ZKCurator(CuratorFramework client) {
        this.client = client;
    }

    public void init() {
        client = client.usingNamespace(&quot;admin&quot;);

        try {
            &lt;!-- 判断在admin命名空间下是否有bgm节点  /admin/bmg --&gt;
            if (client.checkExists().forPath(&quot;/bgm&quot;) == null) {
                /**
                 * 对于zk来讲，有两种类型的节点:
                 * 持久节点: 当你创建一个节点的时候，这个节点就永远存在，除非你手动删除
                 * 临时节点: 你创建一个节点之后，会话断开，会自动删除，当然也可以手动删除
                 */
                client.create().creatingParentsIfNeeded()
                    .withMode(CreateMode.PERSISTENT)        // 节点类型：持久节点
                    .withACL(Ids.OPEN_ACL_UNSAFE)            // acl：匿名权限
                    .forPath(&quot;/bgm&quot;);
                log.info(&quot;zookeeper初始化成功...&quot;);

                log.info(&quot;zookeeper服务器状态：{}&quot;, client.isStarted()); //isStarted()已经不建议使用
            }
        } catch (Exception e) {
            log.error(&quot;zookeeper客户端连接、初始化错误...&quot;);
            e.printStackTrace();
        }
    }

     &lt;!-- 增加或者删除bgm，向zk-server创建子节点，供小程序后端监听 --&gt;
    public void sendBgmOperator(String bgmId, String operObj) {
        try {

            client.create().creatingParentsIfNeeded()
                .withMode(CreateMode.PERSISTENT)        // 节点类型：持久节点
                .withACL(Ids.OPEN_ACL_UNSAFE)            // acl：匿名权限
                .forPath(&quot;/bgm/&quot; + bgmId, operObj.getBytes());
        } catch (Exception e) { 
            e.printStackTrace();
        }
    }
}</code></pre><p>在addBgm和deleteBgm方法中去进行调用sendBgmOperator()。</p>
<h2 id="Springboot小程序端和zookeeper整合"><a href="#Springboot小程序端和zookeeper整合" class="headerlink" title="Springboot小程序端和zookeeper整合"></a>Springboot小程序端和zookeeper整合</h2><p>呵呵，看代码吧骚年！！！注意一个是在java类里面配置，一个是在配置文件里配置，其实是大同小异的</p>
<pre><code>@Component
public class ZKCuratorClient {
    // zk客户端
    private CuratorFramework client = null;    
    final static Logger log = LoggerFactory.getLogger(ZKCuratorClient.class);
//    @Autowired
//    private BgmService bgmService;

//    public static final String ZOOKEEPER_SERVER = &quot;192.168.1.210:2181&quot;;

    @Autowired
    private ResourceConfig resourceConfig;

    public void init() {

        if (client != null) {
            return;
        }

        // 重试策略
        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 5);
        // 创建zk客户端
        client = CuratorFrameworkFactory.builder().connectString(resourceConfig.getZookeeperServer())
                .sessionTimeoutMs(10000).retryPolicy(retryPolicy).namespace(&quot;admin&quot;).build();
        // 启动客户端
        client.start();

        try {
//            String testNodeData = new String(client.getData().forPath(&quot;/bgm/18052674D26HH3X4&quot;));
//            log.info(&quot;测试的节点数据为： {}&quot;, testNodeData);
            addChildWatch(&quot;/bgm&quot;);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void addChildWatch(String nodePath) throws Exception {

        final PathChildrenCache cache = new PathChildrenCache(client, nodePath, true);
        cache.start();
        cache.getListenable().addListener(new PathChildrenCacheListener() {

            @Override
            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) 
                    throws Exception {

                if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)) {
                    log.info(&quot;监听到事件 CHILD_ADDED&quot;);

                    // 1. 从数据库查询bgm对象，获取路径path
                    String path = event.getData().getPath();
                    String operatorObjStr = new String(event.getData().getData(),&quot;UTF-8&quot;);
                    Map&lt;String, String&gt; map = JsonUtils.jsonToPojo(operatorObjStr, Map.class);
                    String operatorType = map.get(&quot;operType&quot;);
                    String songPath = map.get(&quot;path&quot;);

//                    String arr[] = path.split(&quot;/&quot;);
//                    String bgmId = arr[arr.length - 1];

//                    Bgm bgm = bgmService.queryBgmById(bgmId);
//                    if (bgm == null) {
//                        return;
//                    }

                    // 1.1 bgm所在的相对路径
//                    String songPath = bgm.getPath();

                    // 2. 定义保存到本地的bgm路径
//                    String filePath = &quot;C:\\imooc_videos_dev&quot; + songPath;
                    String filePath = resourceConfig.getFileSpace() + songPath;

                    // 3. 定义下载的路径（播放url）
                    String arrPath[] = songPath.split(&quot;\\\\&quot;);
                    String finalPath = &quot;&quot;;
                    // 3.1 处理url的斜杠以及编码
                    for(int i = 0; i &lt; arrPath.length ; i ++) {
                        if (StringUtils.isNotBlank(arrPath[i])) {
                            finalPath += &quot;/&quot;;
                            finalPath += URLEncoder.encode(arrPath[i], &quot;UTF-8&quot;) ;
                        }
                    }
//                    String bgmUrl = &quot;http://192.168.1.2:8080/mvc&quot; + finalPath;
                    String bgmUrl = resourceConfig.getBgmServer() + finalPath;

                    if (operatorType.equals(BGMOperatorTypeEnum.ADD.type)) {
                        // 下载bgm到spingboot服务器
                        URL url = new URL(bgmUrl);
                        File file = new File(filePath);
                        FileUtils.copyURLToFile(url, file);
                        client.delete().forPath(path);
                    } else if (operatorType.equals(BGMOperatorTypeEnum.DELETE.type)) {
                        File file = new File(filePath);
                        FileUtils.forceDelete(file);
                        client.delete().forPath(path);
                    }
                }
            }
        });
    }

}</code></pre>
    <div id="aplayer-oafxMjse" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="190473" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
  </entry>
  <entry>
    <title>仿抖音微信小程序日记Num.6</title>
    <url>/2019/09/14/%E4%BB%BF%E6%8A%96%E9%9F%B3Num6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="中秋节"><a href="#中秋节" class="headerlink" title="中秋节"></a>中秋节</h2><a id="more"></a>
<h2 id="关注与取消关注接口"><a href="#关注与取消关注接口" class="headerlink" title="关注与取消关注接口"></a>关注与取消关注接口</h2><p>首先在UserMapper里面去写相应的方法，如下图，分别是加减粉丝数量和加减关注数量<br><img src="/images/Ahem/q2.jpg" alt="示例图"><br>接下来我们在UserMapper.xml文件里面去实现一下各个方法，sql语句非常简单<br><img src="/images/Ahem/q1.jpg" alt="示例图"><br>然后呢我们到service层去写一下调用方法<br><img src="/images/Ahem/q3.jpg" alt="示例图"><br>下一步我们到ServiceImpl中去写一下实现：<br>    @Transactional(propagation = Propagation.REQUIRED)<br>    @Override<br>    public void saveUserFanRelation(String userId, String fanId) {<br>        UsersFans usersFans = new UsersFans();<br>        String relId = sid.nextShort();<br>        usersFans.setId(relId);<br>        usersFans.setUserId(userId);<br>        usersFans.setFanId(fanId);<br>        usersFansMapper.insert(usersFans);<br>        usersMapper.addFansCount(userId);<br>        usersMapper.addFollowCount(fanId);<br>    }</p>
<pre><code>@Transactional(propagation = Propagation.REQUIRED)
@Override
public void deleteUserFanRelation(String userId, String fanId) {
    Example example =new Example(UsersFans.class);
    Criteria criteria = example.createCriteria();
    criteria.andEqualTo(&quot;userId&quot;,userId);
    criteria.andEqualTo(&quot;fanId&quot;,fanId);
    usersFansMapper.deleteByExample(example);
    usersMapper.reduceFansCount(userId);
    usersMapper.reduceFollowCount(fanId);
}</code></pre><p>  最后我们到controller层去调用：<br>      @PostMapping(“/beyourfans”)<br>    public WangJSONResult beyourfans(String userId , String fanId) throws Exception {</p>
<pre><code>    if (StringUtils.isBlank(userId)||StringUtils.isBlank(fanId)) {
        return WangJSONResult.errorMsg(&quot;&quot;);
    }
    userService.saveUserFanRelation(userId, fanId);
    return WangJSONResult.ok(&quot;关注成功&quot;);
}

@PostMapping(&quot;/dontbeyourfans&quot;)
public WangJSONResult dontyourfans(String userId , String fanId) throws Exception {

    if (StringUtils.isBlank(userId)||StringUtils.isBlank(fanId)) {
        return WangJSONResult.errorMsg(&quot;&quot;);
    }
    userService.deleteUserFanRelation(userId, fanId);
    return WangJSONResult.ok(&quot;取消关注成功&quot;);
}</code></pre><h2 id="小程序联调关注与取消关注接口"><a href="#小程序联调关注与取消关注接口" class="headerlink" title="小程序联调关注与取消关注接口"></a>小程序联调关注与取消关注接口</h2><p>isMe是用来判断当前视频发布者和观看者是否是同一个人，判断publisherId和UserId是否相同即可<br>isFollow是用来判断是否已经关注<br>前端代码如下：<br><img src="/images/Ahem/q9.jpg" alt="示例图"></p>
<p>js代码如下：<br>  followMe: function (e) {<br>    var me = this;</p>
<pre><code>var user = app.getGlobalUserInfo();
var userId = user.id;
var publisherId = me.data.publisherId;

var followType = e.currentTarget.dataset.followtype;

// 1：关注 0：取消关注
var url = &apos;&apos;;
if (followType == &apos;1&apos;) {
  url = &apos;/user/beyourfans?userId=&apos; + publisherId + &apos;&amp;fanId=&apos; + userId;
} else {
  url = &apos;/user/dontbeyourfans?userId=&apos; + publisherId + &apos;&amp;fanId=&apos; + userId;
}

wx.showLoading();
wx.request({
  url: app.serverUrl + url,
  method: &apos;POST&apos;,
  header: {
    &apos;content-type&apos;: &apos;application/json&apos;, // 默认值
    &apos;headerUserId&apos;: user.id,
    &apos;headerUserToken&apos;: user.userToken
  },
  success: function () {
    wx.hideLoading();
    if (followType == &apos;1&apos;) {
      me.setData({
        isFollow: true,
        fansCounts: ++me.data.fansCounts
      })
    } else {
      me.setData({
        isFollow: false,
        fansCounts: --me.data.fansCounts
      })
    }
  }
})</code></pre><p>  },</p>
<h2 id="点赞与取消点赞接口"><a href="#点赞与取消点赞接口" class="headerlink" title="点赞与取消点赞接口"></a>点赞与取消点赞接口</h2><p>先让我们来看一下数据库的表结构吧<br><img src="/images/Ahem/q4.jpg" alt="示例图"><br>当视频点赞按钮被点击的时候，一下这些数据会发生改变，分别是视频的like_counts和Users的receive_like_counts<br>接下来我们来一一实现:<br>首先在VideomMapper中去写数据层的方法：<br><img src="/images/Ahem/q5.jpg" alt="示例图"><br>然后在相应的XML文件中去实现：<br><img src="/images/Ahem/q6.jpg" alt="示例图"><br>相应的用户的receive_like_counts也是相同的操作</p>
<p>Service中创建调用方法：<br><img src="/images/Ahem/q7.jpg" alt="示例图"><br>然后到ServiceImpl中去实现：<br>@Transactional(propagation = Propagation.REQUIRED)<br>    @Override<br>    public void userLikeVideo(String userId, String videoId, String videoCreaterId) {<br>        //1.保存用户和喜欢视频表的关联关系<br>        String likeId = sid.nextShort();<br>        UsersLikeVideos ulv = new UsersLikeVideos();<br>        ulv.setId(likeId);<br>        ulv.setUserId(userId);<br>        ulv.setVideoId(videoId);<br>        usersLikeVideosMapper.insert(ulv);</p>
<pre><code>    //2.视频喜欢数量累加
    videosMapperCustom.addVideoLikeCount(videoId);

    //3.用户受喜欢数量累加
    usersMapper.addReceiveLikeCount(userId);
}

@Transactional(propagation = Propagation.REQUIRED)
@Override
public void userUnLikeVideo(String userId, String videoId, String videoCreaterId) {
    //1.删除用户和喜欢视频表的关联关系
    Example example = new Example(UsersLikeVideos.class);
    Criteria criteria = example.createCriteria();
    criteria.andEqualTo(&quot;userId&quot;,userId);
    criteria.andEqualTo(&quot;videoId&quot;,videoId);
    usersLikeVideosMapper.deleteByExample(example);
    //2.视频喜欢数量累减
    videosMapperCustom.reduceVideoLikeCount(videoId);

    //3.用户受喜欢数量累减
    usersMapper.reduceReceiveLikeCount(userId);        
}</code></pre><p>controller层去调用：<br>    @PostMapping(value=”/userLike”)<br>    public WangJSONResult userLike(String userId, String videoId,String videoCreaterId) throws Exception {<br>        videoService.userLikeVideo(userId, videoId, videoCreaterId);<br>        return WangJSONResult.ok();<br>        }</p>
<pre><code>@PostMapping(value=&quot;/userUnLike&quot;)
public WangJSONResult userUnLike(String userId, String videoId,String videoCreaterId) throws Exception {
    videoService.userUnLikeVideo(userId, videoId, videoCreaterId);    
            return WangJSONResult.ok();
}</code></pre><h2 id="微信端联调点赞与取消点赞接口"><a href="#微信端联调点赞与取消点赞接口" class="headerlink" title="微信端联调点赞与取消点赞接口"></a>微信端联调点赞与取消点赞接口</h2><p><img src="/images/Ahem/q8.jpg" alt="示例图"><br> likeVideoOrNot: function () {<br>    var me = this;<br>    var videoInfo = me.data.videoInfo;<br>    var user = app.getGlobalUserInfo();</p>
<pre><code>if (user == null || user == undefined || user == &apos;&apos;) {
  wx.navigateTo({
    url: &apos;../userLogin/login&apos;,
  })
} else {

  var userLikeVideo = me.data.userLikeVideo;
  var url = &apos;/video/userLike?userId=&apos; + user.id + &apos;&amp;videoId=&apos; + videoInfo.id + &apos;&amp;videoCreaterId=&apos; + videoInfo.userId;
  if (userLikeVideo) {
    url = &apos;/video/userUnLike?userId=&apos; + user.id + &apos;&amp;videoId=&apos; + videoInfo.id + &apos;&amp;videoCreaterId=&apos; + videoInfo.userId;
  }

  var serverUrl = app.serverUrl;
  wx.showLoading({
    title: &apos;...&apos;,
  })
  wx.request({
    url: serverUrl + url,
    method: &apos;POST&apos;,
    header: {
      &apos;content-type&apos;: &apos;application/json&apos;, // 默认值
      &apos;headerUserId&apos;: user.id,
      &apos;headerUserToken&apos;: user.userToken
    },
    success:function(res) {
      wx.hideLoading();
      me.setData({
        userLikeVideo: !userLikeVideo
      });
    }
  })


}</code></pre><p>  },</p>

    <div id="aplayer-WBUFRzts" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="19945735" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
  </entry>
  <entry>
    <title>仿抖音微信小程序日记Num.5</title>
    <url>/2019/09/10/%E4%BB%BF%E6%8A%96%E9%9F%B3Num5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="阿珍爱上了阿强"><a href="#阿珍爱上了阿强" class="headerlink" title="阿珍爱上了阿强"></a>阿珍爱上了阿强</h2><a id="more"></a>
<h2 id="热搜词前后端联调"><a href="#热搜词前后端联调" class="headerlink" title="热搜词前后端联调"></a>热搜词前后端联调</h2><p>搜索匹配：<br><img src="/images/Ahem/1568111858(1).jpg" alt="示例图"><br>调用后端接口：<br>onLoad: function () {</p>
<pre><code>// 2 搜索栏初始化
var that = this;

// 查询热搜词
var serverUrl = app.serverUrl;
wx.request({
  url: serverUrl + &apos;/video/hot&apos;,
  method: &quot;POST&quot;,
  success: function(res) {
    console.log(res);
    var hotList = res.data.data;

    WxSearch.init(
      that,  // 本页面一个引用
      hotList,
     // 热点搜索推荐，[]表示不使用
      hotList,// 搜索匹配，[]表示不使用
      that.mySearchFunction, // 提供一个搜索回调函数
      that.myGobackFunction //提供一个返回回调函数
    );



  }
})</code></pre><p>  },<br>    // 4 搜索回调函数<br>  mySearchFunction: function (value) {<br>    // do your job here<br>    // 示例：跳转<br>    wx.redirectTo({<br>      url: ‘../index/index?isSaveRecord=1&amp;search=’ + value<br>    })<br>  },</p>
<p>  // 5 返回回调函数<br>  myGobackFunction: function () {<br>    // do your job here<br>    // 示例：返回<br>    wx.redirectTo({<br>      url: ‘../index/index’<br>    })<br>  }</p>
<h2 id="视频播放与暂停处理"><a href="#视频播放与暂停处理" class="headerlink" title="视频播放与暂停处理"></a>视频播放与暂停处理</h2><p>视频只有在播放页播放，当发生页面跳转时视频应该暂停，回到视屏页再进行继续播放。<br>在videoinfo.js中修改：</p>
<p> onLoad: function (params) {<br>    var me = this;<br>    me.videoCtx = wx.createVideoContext(“myVideo”, me);<br>    ｝</p>
<p>  onShow: function () {<br>    var me = this;<br>    me.videoCtx.play();<br>  },</p>
<p>  onHide: function () {<br>    var me = this;<br>    me.videoCtx.pause();<br>  },</p>
<h2 id="上传视频功能抽取出来复用"><a href="#上传视频功能抽取出来复用" class="headerlink" title="上传视频功能抽取出来复用"></a>上传视频功能抽取出来复用</h2><p>在page同级目录下创建Util文件夹，新建videoUtil.js，将之前写的视频上传的代码提取出来，进行修改：</p>
<p>//上传视频<br>function uploadVideo() {<br>  var me = this;<br>  wx.chooseVideo({<br>    sourceType: [‘album’],<br>    success: function(res) {<br>      console.log(res);</p>
<pre><code>  var duration = res.duration;
  var tmpHeight = res.height;
  var tmpWidth = res.width;
  var tmpVideoUrl = res.tempFilePath;
  var tmpCoverUrL = res.thumbTempFilePath;

  if (duration &gt; 30) {
    wx.showToast({
      title: &apos;视频长度不能超过30秒&apos;,
      icon: &apos;none&apos;,
      duration: 2500
    })
  } else if (duration &lt; 1) {
    wx.showToast({
      title: &apos;视频长度太短，请上传超过1秒的视频...&apos;,
      icon: &apos;none&apos;,
      duration: 2500
    })
  } else {
    // 打开BGM选择
    wx.navigateTo({
      url: &apos;../chooseBgm/chooseBgm?duration=&apos; + duration +
        &quot;&amp;tmpHeight=&quot; + tmpHeight +
        &quot;&amp;tmpWidth=&quot; + tmpWidth +
        &quot;&amp;tmpVideoUrl=&quot; + tmpVideoUrl +
        &quot;&amp;tmpCoverUrL=&quot; + tmpCoverUrL,
    })
  }
}
})
}
module.exports = { uploadVideo: uploadVideo}</code></pre><p>在需要调用视频上传功能的地方去添加：<br>var videoUtil = require(‘../../utils/videoUtil.js’)<br>然后调用videoUtil.uploadVideo方法即可<br>点击左上角的相机会调用上传视频接口（代码中关于身份验证的地方后面再讲）<br><img src="/images/Ahem/1568113631(1).jpg" alt="示例图"><br>  upload: function () {<br>    var me = this;</p>
<pre><code>var user = app.getGlobalUserInfo();

var videoInfo = JSON.stringify(me.data.videoInfo);
var realUrl = &apos;../videoinfo/videoinfo#videoInfo@&apos; + videoInfo;

if (user == null || user == undefined || user == &apos;&apos;) {
  wx.navigateTo({
    url: &apos;../userLogin/login?redirectUrl=&apos; + realUrl,
  })
} else {
  videoUtil.uploadVideo();
}</code></pre><p>  },</p>
<h2 id="拦截器配置与注册"><a href="#拦截器配置与注册" class="headerlink" title="拦截器配置与注册"></a>拦截器配置与注册</h2><p>在webmvcconfig中注册拦截器，并设置想要拦截的路径</p>
<pre><code>@Bean
public MiniInterceptor miniInterceptor() {
    return new MiniInterceptor();
}

@Override
public void addInterceptors(InterceptorRegistry registry) {
    registry.addInterceptor(miniInterceptor()).addPathPatterns(&quot;/user/**&quot;)
                                              .addPathPatterns(&quot;/video/upload&quot;,&quot;/video/uploadCover&quot;,&quot;/video/userLike&quot;,&quot;/video/userUnLike&quot;)
                                              .excludePathPatterns(&quot;/user/queryPublisher&quot;);
    WebMvcConfigurer.super.addInterceptors(registry);
}</code></pre><p>拦截器设置以及涉及一些账号重复登录的拦截：<br><img src="/images/Ahem/1568116321(1).jpg" alt="示例图"><br>public class MiniInterceptor implements HandlerInterceptor {</p>
<pre><code>@Autowired
public RedisOperator redis;
public static final String USER_REDIS_SESSION = &quot;user-redis-session&quot;;
/**
 * 拦截请求，在controller调用之前
 */
@Override
public boolean preHandle(HttpServletRequest request, HttpServletResponse response, 
        Object arg2) throws Exception {
    String userId = request.getHeader(&quot;headerUserId&quot;);
    String userToken = request.getHeader(&quot;headerUserToken&quot;);

    if (StringUtils.isNotBlank(userId) &amp;&amp; StringUtils.isNotBlank(userToken)) {
        String uniqueToken = redis.get(USER_REDIS_SESSION + &quot;:&quot; + userId);
        if (StringUtils.isEmpty(uniqueToken) &amp;&amp; StringUtils.isBlank(uniqueToken)) {
            System.out.println(&quot;请登录...&quot;);
            returnErrorResponse(response, new WangJSONResult().errorTokenMsg(&quot;请登录...&quot;));
            return false;
        } else {
            if (!uniqueToken.equals(userToken)) {
                System.out.println(&quot;账号被挤出...&quot;);
                returnErrorResponse(response, new WangJSONResult().errorTokenMsg(&quot;账号被挤出...&quot;));
                return false;
            }
        }
    } else {
        System.out.println(&quot;请登录...&quot;);
        returnErrorResponse(response, new WangJSONResult().errorTokenMsg(&quot;请登录...&quot;));
        return false;
    }


    /**
     * 返回 false：请求被拦截，返回
     * 返回 true ：请求OK，可以继续执行，放行
     */
    return true;
}

public void returnErrorResponse(HttpServletResponse response, WangJSONResult result) 
        throws IOException, UnsupportedEncodingException {
    OutputStream out=null;
    try{
        response.setCharacterEncoding(&quot;utf-8&quot;);
        response.setContentType(&quot;text/json&quot;);
        out = response.getOutputStream();
        out.write(JsonUtils.objectToJson(result).getBytes(&quot;utf-8&quot;));
        out.flush();
    } finally{
        if(out!=null){
            out.close();
        }
    }
}

/**
 * 请求controller之后，渲染视图之前
 */
@Override
public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)
        throws Exception {
}

/**
 * 请求controller之后，视图渲染之后
 */
@Override
public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)
        throws Exception {
}</code></pre><p>}</p>

    <div id="aplayer-DkMGPKFO" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1352321625" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
  </entry>
  <entry>
    <title>仿抖音微信小程序日记Num.4</title>
    <url>/2019/09/09/%E4%BB%BF%E6%8A%96%E9%9F%B3Num4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="微信小程序端界面相关业务开发"><a href="#微信小程序端界面相关业务开发" class="headerlink" title="微信小程序端界面相关业务开发"></a>微信小程序端界面相关业务开发</h2><p>本章主要讲解小程序端的相关业务开发,例如首页视频的展示,视频点赞，转发，留言，下载，查询等等，让我们开始吧！！</p>
<a id="more"></a>
<h2 id="视频列表分页查询接口（PageHelper使用）"><a href="#视频列表分页查询接口（PageHelper使用）" class="headerlink" title="视频列表分页查询接口（PageHelper使用）"></a>视频列表分页查询接口（PageHelper使用）</h2><p>首先建立一个PageResult类，新建需要用到的一些对象：<br><img src="/images/Ahem/pageresult.jpg" alt="示例图"><br>创建一个方法<br>public PagedResult getAllVideos(Integer page,Integer pageSize);<br>其实现如下：</p>
<pre><code>PageHelper.startPage(page, pageSize);

        List&lt;VideosVO&gt; list = videosMapperCustom.queryAllVideos(desc, userId);
        PageInfo&lt;VideosVO&gt; pageList = new PageInfo&lt;&gt;(list);

        PagedResult pagedResult = new PagedResult();
        pagedResult.setPage(page);
        pagedResult.setTotal(pageList.getPages());
        pagedResult.setRows(list);
        pagedResult.setRecords(pageList.getTotal());

        return pagedResult;</code></pre><p>其中的videosMapperCustom.queryAllVideos(desc, userId);是在mapper中写的自定义的查询方法，具体如下：<br>1.创建一个VideoMapper的副本取名VideosMapperCustom，类似VO的作用，在其中添加方法<br>public List<videosvo> queryAllVideos(@Param(“videoDesc”) String videoDesc);</videosvo></p>
<p>2.在VideoMapper.xml文件中去实现：<br><img src="/images/Ahem/querryallvideos.jpg" alt="示例图"></p>
<p>Controller层直接调用即可：</p>
<p>//isSaveRecord: 1 - 需要保存  0 - 不需要保存，或者为空的时候    </p>
<pre><code>@PostMapping(value=&quot;/showAll&quot;)
public WangJSONResult showAll(@RequestBody Videos video , Integer isSaveRecord , Integer page) throws Exception {

    if(page == null) {

        page = 1;

    }

    PagedResult result = videoService.getAllVideos(video,isSaveRecord,page, PAGE_SIZE);
    return WangJSONResult.ok(result);


}</code></pre><h2 id="小程序端调用视频查询接口进行展示（上拉分页和下拉刷新）"><a href="#小程序端调用视频查询接口进行展示（上拉分页和下拉刷新）" class="headerlink" title="小程序端调用视频查询接口进行展示（上拉分页和下拉刷新）"></a>小程序端调用视频查询接口进行展示（上拉分页和下拉刷新）</h2><p>const app = getApp()<br>Page({<br>  data: {<br>    // 用于分页的属性<br>    totalPage: 1,<br>    page:1,<br>    videoList:[],<br>    screenWidth: 350,<br>    serverUrl: “”,<br>    searchContent: “”<br>    },</p>
<p>  onLoad: function (params) {<br>    var me = this;<br>    var screenWidth = wx.getSystemInfoSync().screenWidth;  //getSystemInfoSync()是获取系统信息同步接口，获得你手机的宽度<br>    me.setData({<br>      screenWidth: screenWidth,<br>    });</p>
<pre><code>var searchContent = params.search;
var isSaveRecord = params.isSaveRecord;
if (isSaveRecord == null || isSaveRecord == &apos;&apos; || isSaveRecord == undefined) {
  isSaveRecord = 0;
}

me.setData({
  searchContent: searchContent
});

// 获取当前的分页数
var page = me.data.page;
me.getAllVideoList(page, isSaveRecord);</code></pre><p>  },</p>
<p>  getAllVideoList: function (page, isSaveRecord) {<br>    var me = this;<br>    var serverUrl = app.serverUrl;<br>    wx.showLoading({<br>      title: ‘请等待，加载中…’,<br>    });</p>
<pre><code>var searchContent = me.data.searchContent;

wx.request({
  url: serverUrl + &apos;/video/showAll?page=&apos; + page + &quot;&amp;isSaveRecord=&quot; + isSaveRecord,
  method: &quot;POST&quot;,
  data: {
    videoDesc: searchContent
  },
  success: function (res) {
    wx.hideLoading();
    wx.hideNavigationBarLoading();  //关闭加载的小菊花
    wx.stopPullDownRefresh();       //停止三个加载的小点点

    console.log(res.data);

    // 判断当前页page是否是第一页，如果是第一页，那么设置videoList为空
    if (page === 1) {
      me.setData({
        videoList: []
      });
    }

    var videoList = res.data.data.rows;
    var newVideoList = me.data.videoList;

    me.setData({
      videoList: newVideoList.concat(videoList),
      page: page,
      totalPage: res.data.data.total,
      serverUrl: serverUrl
    });

  }
})</code></pre><p>  },</p>
<p>})</p>
<p><img src="/images/Ahem/indexjson.jpg" alt="示例图"></p>
<h3 id="上拉分页"><a href="#上拉分页" class="headerlink" title="上拉分页"></a>上拉分页</h3><p>  onReachBottom:function() {<br>    var me = this;<br>    var currentPage = me.data.page;<br>    var totalPage = me.data.totalPage;</p>
<pre><code>// 判断当前页数和总页数是否相等，如果想的则无需查询
if (currentPage === totalPage) {
  wx.showToast({
    title: &apos;已经没有视频啦~~&apos;,
    icon: &quot;none&quot;
  })
  return;
}

var page = currentPage + 1;

me.getAllVideoList(page, 0);</code></pre><p>  },</p>
<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><p>  onPullDownRefresh: function() {<br>    wx.showNavigationBarLoading();<br>    this.getAllVideoList(1, 0);<br>  },<br>  showVideoInfo: function(e) {<br>    var me = this;<br>    var videoList = me.data.videoList;<br>    var arrindex = e.target.dataset.arrindex;<br>    var videoInfo = JSON.stringify(videoList[arrindex]);</p>
<pre><code>wx.redirectTo({
  url: &apos;../videoinfo/videoinfo?videoInfo=&apos; + videoInfo
})</code></pre><p>  }</p>
<p><img src="/images/Ahem/indexwxml.jpg" alt="示例图"></p>
<h2 id="视频展示页开发"><a href="#视频展示页开发" class="headerlink" title="视频展示页开发"></a>视频展示页开发</h2><p><img src="/images/Ahem/1568038480(1).jpg" alt="示例图"></p>
<p>前端代码设计如下：<br><view style="width:100%;height:100%;"></view></p>
<p>&lt;video  id=”myVideo” src=”“<br>muted=”false“<br>controls=”false“<br>autoplay=”true“<br>loop=”true“<br>enable-progress-gesture=”false“<br>style=’width:100%;height:100%;’<br>objectFit=’‘</p>
<blockquote>
</blockquote>
<cover-view class="container">
            <!-- 上传视频 -->

<pre><code>    &lt;cover-image src=&apos;../resource/images/camera.png&apos; style=&apos;width:50rpx;height:50rpx;&apos; bindtap=&apos;upload&apos;&gt;&lt;/cover-image&gt;


    &lt;!-- 搜索按钮 --&gt;
    &lt;cover-image src=&apos;../resource/images/search.png&apos; style=&apos;width:45rpx;height:45rpx;&apos; bindtap=&apos;showSearch&apos;&gt;&lt;/cover-image&gt;

&lt;/cover-view&gt;</code></pre><cover-view class="container-me">
            <!-- 头像 -->
            <cover-image class="face" src bindtap="showPublisher"></cover-image>


<pre><code>      &lt;!-- 喜欢收藏按钮 --&gt;
      &lt;block wx:if=&quot;{{userLikeVideo}}&quot;&gt;
          &lt;cover-image class=&quot;size-me&quot; src=&apos;../resource/images/like.png&apos; style=&apos;margin-top:30rpx;&apos; bindtap=&apos;likeVideoOrNot&apos;&gt;&lt;/cover-image&gt;
      &lt;/block&gt;
      &lt;block wx:else&gt;
          &lt;cover-image class=&quot;size-me&quot; src=&apos;../resource/images/unlike.png&apos; style=&apos;margin-top:30rpx;&apos; bindtap=&apos;likeVideoOrNot&apos;&gt;&lt;/cover-image&gt;
      &lt;/block&gt;


      &lt;!-- 评论按钮 --&gt;
      &lt;cover-image class=&quot;size-me&quot; src=&apos;../resource/images/comments.png&apos; style=&apos;margin-top:30rpx;&apos; bindtap=&apos;leaveComment&apos;&gt;&lt;/cover-image&gt;

      &lt;!-- 分享按钮 --&gt;
      &lt;cover-image class=&quot;size-me&quot; src=&apos;../resource/images/share.png&apos; style=&apos;margin-top:30rpx;&apos; bindtap=&apos;shareMe&apos;&gt;&lt;/cover-image&gt;

  &lt;/cover-view&gt;

&lt;cover-view class=&apos;container-words&apos;&gt;

      &lt;cover-view&gt;@{{publisher.nickname}}&lt;/cover-view&gt;

      &lt;cover-view class=&apos;video-desc&apos;&gt;{{videoInfo.videoDesc}}&lt;/cover-view&gt;



  &lt;/cover-view&gt;

  &lt;cover-view class=&apos;container-bottom&apos;&gt;
      &lt;!-- 首页按钮 --&gt;
      &lt;cover-image class=&apos;&apos; src=&apos;../resource/images/index.png&apos; class=&quot;size-bottom&quot; bindtap=&apos;showIndex&apos;&gt;&lt;/cover-image&gt;



      &lt;!-- 我的按钮 --&gt;
      &lt;cover-image class=&apos;&apos; src=&apos;../resource/images/mine.png&apos; class=&quot;size-bottom&quot; bindtap=&apos;showMine&apos;&gt;&lt;/cover-image&gt;

  &lt;/cover-view&gt;</code></pre>




<view>

<view class="saySthView">
<input name="commentContent" class="saySth" placeholder confirm-type="send" bindconfirm="saveComment" focus value data-replyfathercommentid data-replytouserid>
</view>

<block wx:for>
  <view class="comments-all" bindtap="replyFocus" data-fathercommentid data-touserid data-tonickname>
      <view class="container-comments">
          <image class="face-comments" src></image>
          <view class="nickname-comments">
              <label class="nickname-lbl">@</label>
              于 
              <label class="date-lbl"></label>
              <!-- 留言： -->
              <block wx:if="false">
                回复
                <label class="nickname-lbl">@</label>
              </block>
              <block wx:else>
                留言：
              </block>
          </view>
      </view>
      <view class="comments-content"></view>
  </view>
</block> 

</view>

<h2 id="修改全局用户对象使用缓存"><a href="#修改全局用户对象使用缓存" class="headerlink" title="修改全局用户对象使用缓存"></a>修改全局用户对象使用缓存</h2><p>首先在app.js中添加缓存的set，get方法：<br><img src="/images/Ahem/1568104084(1).jpg" alt="示例图"><br>在登录和注册页面把app.userinfo改为调用新的set缓存的方法，在需要获取缓存的地方改为get的方法，注销的地方调用 wx.removeStorageSync(“userInfo”) </p>
<h2 id="搜索插件使用"><a href="#搜索插件使用" class="headerlink" title="搜索插件使用"></a>搜索插件使用</h2><p>插件的链接：<a href="https://github.com/mindawei/wsSearchView" target="_blank" rel="noopener">https://github.com/mindawei/wsSearchView</a><br>跟着提示使用即可<br><img src="/images/Ahem/1568105761(1).jpg" alt="示例图"></p>
<h2 id="热搜词"><a href="#热搜词" class="headerlink" title="热搜词"></a>热搜词</h2><p>重点是热搜词查询的SQL语句： select content from search_records group by content order by count(content) desc</p>

    <div id="aplayer-EigNkoBM" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="18161816" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
</cover-view></cover-view>]]></content>
  </entry>
  <entry>
    <title>仿抖音微信小程序日记Num.3</title>
    <url>/2019/09/03/%E4%BB%BF%E6%8A%96%E9%9F%B3Num3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="上传视频相关接口与知识点"><a href="#上传视频相关接口与知识点" class="headerlink" title="上传视频相关接口与知识点"></a>上传视频相关接口与知识点</h2><p>本章重点讲解视频上传相关接口和ffmpeg和java结合对视频进行剪辑和替换背景音乐等相关操作</p>
<a id="more"></a>
<h2 id="视频上传相关接口"><a href="#视频上传相关接口" class="headerlink" title="视频上传相关接口"></a>视频上传相关接口</h2><p>视频的上传和前一章的头像上传差不多是相同的操作,同样是通过fileInputstream和fileoutputstream流来进行相关操作，别忘记用完之后要关闭，文件路径的设置也是需要细心对待的地方，先贴代码吧：<br>    @ApiOperation(value=”视频上传”,notes=”视频上传的接口”)<br>    @ApiImplicitParams({<br>        @ApiImplicitParam(name=”userId”,value=”用户id”,required=true,dataType=”String”,paramType=”form”),<br>        @ApiImplicitParam(name=”bgmId”,value=”背景音乐id”,required=false,dataType=”String”,paramType=”form”),<br>        @ApiImplicitParam(name=”videoSeconds”,value=”视频时间”,required=true,dataType=”String”,paramType=”form”),<br>        @ApiImplicitParam(name=”videoWidth”,value=”视频宽度”,required=true,dataType=”String”,paramType=”form”),<br>        @ApiImplicitParam(name=”videoHeight”,value=”视频高度”,required=true,dataType=”String”,paramType=”form”),<br>        @ApiImplicitParam(name=”desc”,value=”视频描述”,required=false,dataType=”String”,paramType=”form”)</p>
<pre><code>})
@PostMapping(value = &quot;/upload&quot;, headers =&quot;content-type=multipart/form-data&quot; )
public WangJSONResult upload(String userId,
                             String bgmId,double videoSeconds,int videoWidth,int videoHeight,
                             String desc, @ApiParam(value=&quot;短视频&quot; ,required=true) MultipartFile file ) throws Exception {

    if (StringUtils.isBlank(userId)) {
        return WangJSONResult.errorMsg(&quot;用户Id不能为空...&quot;);

    }

    //保存到数据库中的相对路径
    String uploadPathDB = &quot;/&quot; + userId +&quot;/video&quot;;
    String coverPathDB = &quot;/&quot; + userId + &quot;/video&quot;;

    FileOutputStream fileOutputStream = null;
    InputStream inputStream = null;
    String finalVideoPath = &quot;&quot;;
    try {
        if(file != null) {


            String fileName = file.getOriginalFilename();
            // abc.mp4
            String arrayFilenameItem[] =  fileName.split(&quot;\\.&quot;);
            String fileNamePrefix = &quot;&quot;;
            for (int i = 0 ; i &lt; arrayFilenameItem.length-1 ; i ++) {
                fileNamePrefix += arrayFilenameItem[i];
            }
            // fix bug: 解决小程序端OK，PC端不OK的bug，原因：PC端和小程序端对临时视频的命名不同</code></pre><p>//                String fileNamePrefix = fileName.split(“\.”)[0];</p>
<pre><code>            if (StringUtils.isNotBlank(fileName)) {
                //文件上传的最终保存路径
                finalVideoPath = FILE_SPACE + uploadPathDB + &quot;/&quot; +fileName;
                // 设置数据库保存的路径
                uploadPathDB += (&quot;/&quot; + fileName);
                coverPathDB = coverPathDB + &quot;/&quot; + fileNamePrefix + &quot;.jpg&quot;;

                File outFile =new File(finalVideoPath);
                if(outFile.getParentFile()!=null ||  !outFile.getParentFile().isDirectory()) {
                    //创建父文件
                    outFile.getParentFile().mkdirs();
                }

                fileOutputStream =new FileOutputStream(outFile);
                inputStream = file.getInputStream();
                IOUtils.copy(inputStream, fileOutputStream);
            }
        }else {
            return WangJSONResult.errorMsg(&quot;上传出错...&quot;);
        }
    } catch (Exception e) {
        e.printStackTrace();
        return WangJSONResult.errorMsg(&quot;上传出错...&quot;);
    }finally {
        if(fileOutputStream != null) {
            fileOutputStream.flush();
            fileOutputStream.close();
        }
    }
    //判断bgmId是否为空，如果不为空，就查询bgm信息并合并
    if(!StringUtils.isBlank(bgmId)) {
        Bgm bgm = bgmService.queryBgmById(bgmId);
        if(bgm != null) {
        String mp3InputPath = FILE_SPACE+bgm.getPath();

        MergeVideoMp3 tool =new MergeVideoMp3(FFMPEG_EXE);
        String videoInputPath = finalVideoPath;

        String videoOutputName = UUID.randomUUID().toString() + &quot;.mp4&quot;;
        uploadPathDB = &quot;/&quot; + userId +&quot;/video&quot; + &quot;/&quot; + videoOutputName;
        finalVideoPath = FILE_SPACE + uploadPathDB;
        tool.convertor(videoInputPath,mp3InputPath, videoSeconds, finalVideoPath);}

    }
//    System.out.println(&quot;uploadPathDB=&quot; + uploadPathDB);
//    System.out.println(&quot;finalVideoPath=&quot; + finalVideoPath);

    // 对视频进行截图
    FetchVideoCover videoInfo = new FetchVideoCover(FFMPEG_EXE);
    videoInfo.getCover(finalVideoPath, FILE_SPACE + coverPathDB);

    Videos video = new Videos();
    video.setAudioId(bgmId);
    video.setUserId(userId);
    video.setVideoSeconds((float)videoSeconds);
    video.setVideoHeight(videoHeight);
    video.setVideoWidth(videoWidth);
    video.setVideoDesc(desc);
    video.setVideoPath(uploadPathDB);
    video.setCoverPath(coverPathDB);
    video.setStatus(VideoStatusEnum.SUCCESS.value);
    video.setCreateTime(new Date());

    String videoId = videoService.saveVideo(video);
    return WangJSONResult.ok(videoId);
}</code></pre><h2 id="什么是ffmpeg"><a href="#什么是ffmpeg" class="headerlink" title="什么是ffmpeg?"></a>什么是ffmpeg?</h2><p>FFmpeg是一套可以用来记录、转换数字音频、视频,并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频,视频编解码库libavcodec,为了保证高可移植性和编解码质量,libavcodec里很多code都是从头开发的。<br>FFmpeg在Linux平台下开发，但它同样也可以在其它操作系统环境中编译运行，包括Windows、Mac OS X等。这个项目最早由Fabrice Bellard发起，2004年至2015年间由Michael Niedermayer主要负责维护。许多FFmpeg的开发人员都来自MPlayer项目，而且当前FFmpeg也是放在MPlayer项目组的服务器上。项目的名称来自MPEG视频编码标准，前面的”FF”代表”Fast Forward”。</p>
<h2 id="java结合ffmpeg将视频和MP3音乐合并"><a href="#java结合ffmpeg将视频和MP3音乐合并" class="headerlink" title="java结合ffmpeg将视频和MP3音乐合并"></a>java结合ffmpeg将视频和MP3音乐合并</h2><p>先贴代码吧:<br>    public void convertor(String videoInputPath, String mp3InputPath,<br>            double seconds, String videoOutputPath) throws Exception {<br>//ffmpeg -i bgm.mp3 -i input.mp4 -t 6 -filter_complex amix=inputs=2 output.mp4</p>
<pre><code>    List&lt;String&gt; command = new ArrayList&lt;&gt;();
    command.add(ffmpegEXE);
    command.add(&quot;-i&quot;);
    command.add(mp3InputPath);

    command.add(&quot;-i&quot;);
    command.add(videoInputPath);

    command.add(&quot;-t&quot;);
    command.add(String.valueOf(seconds));

    command.add(&quot;-filter_complex&quot;);

    command.add(&quot;amix=inputs=2&quot;);

    command.add(videoOutputPath);

    ProcessBuilder builder = new ProcessBuilder(command);
    Process process = builder.start();

    InputStream errorStream = process.getErrorStream();
    InputStreamReader inputStreamReader = new InputStreamReader(errorStream);
    BufferedReader br = new BufferedReader(inputStreamReader);

    String line = &quot;&quot;;
    while ( (line = br.readLine()) != null ) {
    }

    if (br != null) {
        br.close();
    }
    if (inputStreamReader != null) {
        inputStreamReader.close();
    }
    if (errorStream != null) {
        errorStream.close();
    }

}</code></pre><p>最后记得关掉所有，这里说一个坑，视频中教学用的命令是： ffmpeg -i bgm.mp3 -i input.mp4 output.mp4 来进行合并，但是输出的视频并没有和MP3合并成功，度娘问了一下，应该用这个命令：ffmpeg -i bgm.mp3 -i input.mp4 -t 6 -filter_complex amix=inputs=2 output.mp4，当然你也可以先把原视频消音之后再和MP3结合也能成功，一些基本命令如下：<br>1.分离视频音频流<br>ffmpeg -i input_file -vcodec copy -an output_file_video　　//分离视频流<br>ffmpeg -i input_file -acodec copy -vn output_file_audio　　//分离音频流<br>2.视频解复用<br>ffmpeg –i test.mp4 –vcodec copy –an –f m4v test.264<br>ffmpeg –i test.avi –vcodec copy –an –f m4v test.264<br>3.视频转码<br>ffmpeg –i test.mp4 –vcodec h264 –s 352<em>278 –an –f m4v test.264              //转码为码流原始文件<br>ffmpeg –i test.mp4 –vcodec h264 –bf 0 –g 25 –s 352</em>278 –an –f m4v test.264  //转码为码流原始文件<br>ffmpeg –i test.avi -vcodec mpeg4 –vtag xvid –qsame test_xvid.avi            //转码为封装文件<br>//-bf B帧数目控制，-g 关键帧间隔控制，-s 分辨率控制<br>4.视频封装<br>ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy output_file<br>5.视频剪切<br>ffmpeg –i test.avi –r 1 –f image2 image-%3d.jpeg        //提取图片<br>ffmpeg -ss 0:1:30 -t 0:0:20 -i input.avi -vcodec copy -acodec copy output.avi    //剪切视频<br>//-r 提取图像的频率，-ss 开始时间，-t 持续时间<br>6.视频录制<br>ffmpeg –i rtsp://192.168.3.205:5555/test –vcodec copy out.avi<br>7.YUV序列播放<br>ffplay -f rawvideo -video_size 1920x1080 input.yuv<br>8.YUV序列转AVI<br>ffmpeg –s w*h –pix_fmt yuv420p –i input.yuv –vcodec mpeg4 output.avi<br>9.YUV422序列转yuv420<br>ffmpeg -pix_fmt yuv422p -s 1024x576 -i input.yuv  -pix_fmt yuv420p output.yuv</p>
<h2 id="剪切视频封面"><a href="#剪切视频封面" class="headerlink" title="剪切视频封面"></a>剪切视频封面</h2><p>和上一个基本一样的，就是命令换了而已：<br>public void getCover(String videoInputPath, String coverOutputPath) throws IOException, InterruptedException {<br>//        ffmpeg.exe -ss 00:00:01 -i spring.mp4 -vframes 1 bb.jpg<br>        List<string> command = new java.util.ArrayList<string>();<br>        command.add(ffmpegEXE);</string></string></p>
<pre><code>    // 指定截取第1秒
    command.add(&quot;-ss&quot;);
    command.add(&quot;00:00:01&quot;);

    command.add(&quot;-y&quot;);
    command.add(&quot;-i&quot;);
    command.add(videoInputPath);

    command.add(&quot;-vframes&quot;);
    command.add(&quot;1&quot;);

    command.add(coverOutputPath);

    for (String c : command) {
        System.out.print(c + &quot; &quot;);
    }

    ProcessBuilder builder = new ProcessBuilder(command);
    Process process = builder.start();

    InputStream errorStream = process.getErrorStream();
    InputStreamReader inputStreamReader = new InputStreamReader(errorStream);
    BufferedReader br = new BufferedReader(inputStreamReader);

    String line = &quot;&quot;;
    while ( (line = br.readLine()) != null ) {
    }

    if (br != null) {
        br.close();
    }
    if (inputStreamReader != null) {
        inputStreamReader.close();
    }
    if (errorStream != null) {
        errorStream.close();
    }
}</code></pre><h2 id="微信端联调上传视频"><a href="#微信端联调上传视频" class="headerlink" title="微信端联调上传视频"></a>微信端联调上传视频</h2><p>uploadVideo: function () {<br>    // fixme 视频上传复用<br>    // videoUtil.uploadVideo();<br>    // 以下是原来的代码，不删除，便于参照<br>    var me = this;</p>
<pre><code>wx.chooseVideo({
  sourceType: [&apos;album&apos;],
  success: function (res) {
    console.log(res);

    var duration = res.duration;
    var tmpHeight = res.height;
    var tmpWidth = res.width;
    var tmpVideoUrl = res.tempFilePath;
    var tmpCoverUrl = res.thumbTempFilePath;

    if (duration &gt; 30) {
      wx.showToast({
        title: &apos;视频长度不能超过30秒...&apos;,
        icon: &quot;none&quot;,
        duration: 2500
      })
    } else if (duration &lt; 1) {
      wx.showToast({
        title: &apos;视频长度太短，请上传超过1秒的视频...&apos;,
        icon: &quot;none&quot;,
        duration: 2500
      })
    } else {
      // 打开选择bgm的页面
      wx.navigateTo({
        url: &apos;../chooseBgm/chooseBgm?duration=&apos; + duration
        + &quot;&amp;tmpHeight=&quot; + tmpHeight
        + &quot;&amp;tmpWidth=&quot; + tmpWidth
        + &quot;&amp;tmpVideoUrl=&quot; + tmpVideoUrl
        + &quot;&amp;tmpCoverUrl=&quot; + tmpCoverUrl
        ,
      })
    }

  }
})</code></pre><p>  },</p>
<p> 选择了视频后，将相关数据带到选择bgm的页面，then：<br>       wx.uploadFile({<br>        url: serverUrl + ‘/video/upload’,<br>        formData: {<br>          userId: userInfo.id,    // fixme 原来的 app.userInfo.id<br>          bgmId: bgmId,<br>          desc: desc,<br>          videoSeconds: duration,<br>          videoHeight: tmpHeight,<br>          videoWidth: tmpWidth<br>        },<br>        filePath: tmpVideoUrl,<br>        name: ‘file’,<br>        header: {<br>          ‘content-type’: ‘application/json’, // 默认值<br>          ‘headerUserId’: userInfo.id,<br>          ‘headerUserToken’: userInfo.userToken<br>        },<br>        success: function (res) {<br>          var data = JSON.parse(res.data);<br>          wx.hideLoading();<br>          if (data.status == 200) {<br>            wx.showToast({<br>              title: ‘上传成功!<del>‘,<br>              icon: “success”<br>            });<br>            // 上传成功后跳回之前的页面<br>            wx.navigateBack({<br>              delta: 1<br>            })<br>          } else if (res.data.status == 502) {<br>            wx.showToast({<br>              title: res.data.msg,<br>              duration: 2000,<br>              icon: “none”<br>            });<br>            wx.redirectTo({<br>              url: ‘../userLogin/login’,<br>            })<br>          } else {<br>            wx.showToast({<br>              title: ‘上传失败!</del>‘,<br>              icon: “success”<br>            });<br>          }</p>
<pre><code>    }
  })
}
 onLoad: function (params) {

  var me = this;
  console.log(params);
  me.setData({
    videoParams: params
  });

  wx.showLoading({
    title: &apos;请等待...&apos;,
  });
  var serverUrl = app.serverUrl;
  var user = app.getGlobalUserInfo();
  // 调用后端
  wx.request({
    url: serverUrl + &apos;/bgm/list&apos;,
    method: &quot;POST&quot;,
    header: {
      &apos;content-type&apos;: &apos;application/json&apos;, // 默认值
      &apos;headerUserId&apos;: user.id,
      &apos;headerUserToken&apos;: user.userToken
    },
    success: function (res) {
      console.log(res.data);
      wx.hideLoading();
      if (res.data.status == 200) {
        var bgmList = res.data.data;
        me.setData({
          bgmList: bgmList,
          serverUrl: serverUrl
        });
      } else if (res.data.status == 502) {
        wx.showToast({
          title: res.data.msg,
          duration: 2000,
          icon: &quot;none&quot;,
          success: function () {
            wx.redirectTo({
              url: &apos;../userLogin/login&apos;,
            })
          }
        });
      }
    }
  })
},</code></pre><p>心情不好不想写了，拜拜吧</p>
<h2 id="小程序端页面中显示数据库中所有bgm信息"><a href="#小程序端页面中显示数据库中所有bgm信息" class="headerlink" title="小程序端页面中显示数据库中所有bgm信息"></a>小程序端页面中显示数据库中所有bgm信息</h2><p><img src="/images/Ahem/bgm.jpg" alt="示例图"><br> onLoad: function (params) {</p>
<pre><code>  var me = this;
  console.log(params);
  me.setData({
    videoParams: params
  });

  wx.showLoading({
    title: &apos;请等待...&apos;,
  });
  var serverUrl = app.serverUrl;
  var user = app.getGlobalUserInfo();
  // 调用后端
  wx.request({
    url: serverUrl + &apos;/bgm/list&apos;,
    method: &quot;POST&quot;,
    header: {
      &apos;content-type&apos;: &apos;application/json&apos;, // 默认值
      &apos;headerUserId&apos;: user.id,
      &apos;headerUserToken&apos;: user.userToken
    },
    success: function (res) {
      console.log(res.data);
      wx.hideLoading();
      if (res.data.status == 200) {
        var bgmList = res.data.data;
        me.setData({
          bgmList: bgmList,
          serverUrl: serverUrl
        });
      } else if (res.data.status == 502) {
        wx.showToast({
          title: res.data.msg,
          duration: 2000,
          icon: &quot;none&quot;,
          success: function () {
            wx.redirectTo({
              url: &apos;../userLogin/login&apos;,
            })
          }
        });
      }
    }
  })
},</code></pre><p>心情不好不想写了，拜拜吧</p>

    <div id="aplayer-cAloNxON" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="417859631" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>]]></content>
  </entry>
  <entry>
    <title>仿抖音微信小程序日记Num.2</title>
    <url>/2019/08/19/%E4%BB%BF%E6%8A%96%E9%9F%B3Num2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="用户相关业务的接口"><a href="#用户相关业务的接口" class="headerlink" title="用户相关业务的接口"></a>用户相关业务的接口</h2><p>先设计两个接口，一个是用户头像上传的接口，一个是查询用户接口，重点是前面一个，涉及到IO口一些流的东西，内存优化的东西，let US 干！！！！！！！！！！</p>
<a id="more"></a>
<h2 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h2><p>说接口之前先让我们来说说Swagger2是个什么东东，如下图中@api系列的注解都属于swagger2的注解，它可以帮你生成一个接口文档，还可以实现测试，方便简单，让人一目了然，效果如第二张图一样，需要我们导入两个swagger的包。<br><img src="/images/Ahem/swagger.jpg" alt="示例图"><br><img src="/images/Ahem/swaggers.jpg" alt="示例图"><br><img src="/images/Ahem/swaggerbao.jpg" alt="示例图"></p>
<h2 id="WebMvcConfigurer"><a href="#WebMvcConfigurer" class="headerlink" title="WebMvcConfigurer"></a>WebMvcConfigurer</h2><p>在正式开发前还要说说这个东西，我们自己开发要把上传的在本地的文件映射成url，可以使用tomcat提供的WebMvcConfigurer，写一个类实现以下它，然后重写其中的addResourcehandler方法，具体如下，然后你就可以去网站试试啦，注意教学视频里面是继承的WebMvcConfigurerAdapter，这个已经弃用了，so，我干他娘，那个configurePathMatch一定要设置为false<br><img src="/images/Ahem/webmvcconfigurer.jpg" alt="示例图"></p>
<h2 id="用户上传头像接口"><a href="#用户上传头像接口" class="headerlink" title="用户上传头像接口"></a>用户上传头像接口</h2><p>代码如下：<br>    @ApiOperation(value=”用户上传头像”,notes=”用户上传头像的接口”)<br>    @ApiImplicitParam(name=”userId”,value=”用户id”,required=true,dataType=”String”,paramType=”query”)<br>    @PostMapping(“/uploadFace”)<br>    public WangJSONResult uploadFace(String userId,<br>                                    @RequestParam(“file”) MultipartFile[] files ) throws Exception {</p>
<pre><code>    if (StringUtils.isBlank(userId)) {
        return WangJSONResult.errorMsg(&quot;用户Id不能为空...&quot;);

    }

    //文件保存的命名空间
    String fileSpace = &quot;D:/wang_dev&quot;;
    //保存到数据库中的相对路径
    String uploadPathDB = &quot;/&quot; + userId +&quot;/face&quot;;
    FileOutputStream fileOutputStream = null;
    InputStream inputStream = null;
    try {
        if(files != null &amp;&amp; files.length &gt; 0) {


            String fileName = files[0].getOriginalFilename();
            if (StringUtils.isNotBlank(fileName)) {
                //文件上传的最终保存路径
                String finalFacePath = fileSpace + uploadPathDB + &quot;/&quot; +fileName;
                // 设置数据库保存的路径
                uploadPathDB += (&quot;/&quot; + fileName);

                File outFile =new File(finalFacePath);
                if(outFile.getParentFile()!=null ||  !outFile.getParentFile().isDirectory()) {
                    //创建父文件
                    outFile.getParentFile().mkdirs();
                }

                fileOutputStream =new FileOutputStream(outFile);
                inputStream = files[0].getInputStream();
                IOUtils.copy(inputStream, fileOutputStream);
            }
        }else {
            return WangJSONResult.errorMsg(&quot;上传出错...&quot;);
        }
    } catch (Exception e) {
        e.printStackTrace();
        return WangJSONResult.errorMsg(&quot;上传出错...&quot;);
    }finally {
        if(fileOutputStream != null) {
            fileOutputStream.flush();
            fileOutputStream.close();
        }
    }
    Users user = new Users();
    user.setId(userId);
    user.setFaceImage(uploadPathDB);
    userService.updateUserInfo(user);
    return WangJSONResult.ok(uploadPathDB);
}</code></pre><p>文件的传输涉及到IO流的知识点,inputstream和outputstream,注意使用之后要即使清理和关闭流！！路径的设置也要细心一点！！后面视频的传输也是相同的道理，换汤不换药。</p>
<h2 id="用户上传头像微信端联调"><a href="#用户上传头像微信端联调" class="headerlink" title="用户上传头像微信端联调"></a>用户上传头像微信端联调</h2><p>wx小程序提供了选择图片的接口，wx.chooseImage,可以选择从相册获取或者相机拍照，这里只用了相册获取，也提供了上传文件的接口wx.uploadfile,代码如下：</p>
<p>  changeFace: function () {<br>      var me = this;<br>      wx.chooseImage({<br>        count: 1,<br>        sizeType: [‘compressed’],  //压缩过的图片<br>        sourceType: [‘album’],  //加上camera就可以相机拍照获取<br>        success: function (res) {<br>          var tempFilePaths = res.tempFilePaths;<br>          console.log(tempFilePaths);<br>          wx.showLoading({<br>            title: ‘上传中…’,<br>          })<br>          var serverUrl = app.serverUrl;<br>          // fixme 修改原有的全局对象为本地缓存<br>          var userInfo = app.getGlobalUserInfo();<br>          wx.uploadFile({<br>            url: serverUrl + ‘/user/uploadFace?userId=’ + userInfo.id,  //app.userInfo.id,<br>            filePath: tempFilePaths[0],<br>            name: ‘file’,<br>            header: {<br>              ‘content-type’: ‘application/json’, // 默认值<br>              ‘headerUserId’: userInfo.id,<br>              ‘headerUserToken’: userInfo.userToken<br>            },<br>            success: function (res) {<br>              var data = JSON.parse(res.data);<br>              console.log(data);<br>              wx.hideLoading();<br>              if (data.status == 200) {<br>                wx.showToast({<br>                  title: ‘上传成功!~~’,<br>                  icon: “success”<br>                });<br>                var imageUrl = data.data;<br>                me.setData({<br>                  faceUrl: serverUrl + imageUrl<br>                });<br>              } else if (data.status == 500) {<br>                wx.showToast({<br>                  title: data.msg<br>                });<br>              } else if (res.data.status == 502) {<br>                wx.showToast({<br>                  title: res.data.msg,<br>                  duration: 2000,<br>                  icon: “none”,<br>                  success: function () {<br>                    wx.redirectTo({<br>                      url: ‘../userLogin/login’,<br>                    })<br>                  }<br>                });<br>              }<br>            }<br>          })<br>        }<br>      })<br>    },</p>
<h2 id="查询用户信息接口"><a href="#查询用户信息接口" class="headerlink" title="查询用户信息接口"></a>查询用户信息接口</h2><p>这是根据用户id来查询，service创建的方法如下：public Users queryUserInfo(String userId);只传入了用户Id<br>ServiceImpl中的实现代码如下：<br>    @Transactional(propagation = Propagation.SUPPORTS)<br>    @Override<br>    public Users queryUserInfo(String userId) {<br>        Example userExample = new Example(Users.class);<br>        Criteria criteria = userExample.createCriteria();<br>        criteria.andEqualTo(“id”,userId);<br>        Users users = usersMapper.selectOneByExample(userExample);<br>        return users;<br>    }</p>
<p>controller层代码：<br>    @ApiOperation(value=”查询用户信息”,notes=”查询用户信息的接口”)<br>    @ApiImplicitParam(name=”userId”,value=”用户id”,required=true,dataType=”String”,paramType=”query”)<br>    @PostMapping(“/query”)<br>    public WangJSONResult query(String userId,String fanId) throws Exception {</p>
<pre><code>    if (StringUtils.isBlank(userId)) {
        return WangJSONResult.errorMsg(&quot;用户Id不能为空...&quot;);
    }
    Users userInfo = userService.queryUserInfo(userId);
    UsersVO usersVO = new UsersVO();
    BeanUtils.copyProperties(userInfo, usersVO);
    usersVO.setFollow(userService.queryIfFollow(userId, fanId));
    return WangJSONResult.ok(usersVO);
}</code></pre><h2 id="将用户信息在小程序端显示出来"><a href="#将用户信息在小程序端显示出来" class="headerlink" title="将用户信息在小程序端显示出来"></a>将用户信息在小程序端显示出来</h2><p> 部分代码涉及后面的知识点，后面再说<br>    // 调用后端<br>    wx.request({<br>      url: serverUrl + ‘/user/query?userId=’ + userId + “&amp;fanId=” + user.id,<br>      method: “POST”,<br>      header: {<br>        ‘content-type’: ‘application/json’, // 默认值<br>        ‘headerUserId’: user.id,<br>        ‘headerUserToken’: user.userToken<br>      },<br>      success: function (res) {<br>        console.log(res.data);<br>        wx.hideLoading();<br>        if (res.data.status == 200) {<br>          var userInfo = res.data.data;<br>          var faceUrl = “../resource/images/noneface.png”;<br>          if (userInfo.faceImage != null &amp;&amp; userInfo.faceImage != ‘’ &amp;&amp; userInfo.faceImage != undefined) {<br>            faceUrl = serverUrl + userInfo.faceImage;<br>          }</p>
<pre><code>      me.setData({
        faceUrl: faceUrl,
        fansCounts: userInfo.fansCounts,
        followCounts: userInfo.followCounts,
        receiveLikeCounts: userInfo.receiveLikeCounts,
        nickname: userInfo.nickname,
        isFollow: userInfo.follow
      });
    } else if (res.data.status == 502) {
      wx.showToast({
        title: res.data.msg,
        duration: 3000,
        icon: &quot;none&quot;,
        success: function () {
          wx.redirectTo({
            url: &apos;../userLogin/login&apos;,
          })
        }
      })
    }
  }
})</code></pre>
    <div id="aplayer-fbBsoGIz" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1348568908" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>

]]></content>
  </entry>
  <entry>
    <title>仿抖音微信小程序日记Num.1</title>
    <url>/2019/08/18/%E4%BB%BF%E6%8A%96%E9%9F%B3Num1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="eclipse项目构建"><a href="#eclipse项目构建" class="headerlink" title="eclipse项目构建"></a>eclipse项目构建</h2><p>&nbsp;&nbsp;&nbsp;在Eclipse中建立如下的项目结构<br><img src="/images/Ahem/xiangmujiegou.jpg" alt="示例图"><br>Ahem是project，其他的都是module，从上往下，依次继承，引入包之类的就不说了</p>
<a id="more"></a>
<h2 id="mybatis-generator"><a href="#mybatis-generator" class="headerlink" title="mybatis generator"></a>mybatis generator</h2><p>&nbsp;&nbsp;&nbsp;使用mybatis逆向生成工具自动生成mapper和pojo类，同时还为我们提供了很多数据库增删改查的操作,生成之后把相应的pojo类和mapper拷贝到对应文件下就行了，对于该工具使用的时候踩得坑请移步另一篇Blog<br><img src="/images/Ahem/generatorXML.jpg" alt="示例图"><br><img src="/images/Ahem/zengshangaicha.jpg" alt="提供的很多增删改查方法"></p>
<h2 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h2><p>&nbsp;&nbsp;&nbsp;注册的controller层开发如下图所示，其中WangJsonResult相当于是个前后端数据传递的容器，queryUsernameIsExist()方法和saveUser()方法是在UserService写的然后在Impl中实现，重点是密码的加密是MD5加密,是调用的一个提前写好的MD5Utils，还有saveUser()方法中设置了用户Id，是随机Id所以也是调用的一个写好的事先写好的工具类设置的，后面我们单独提出来说，其中的setUserRedisSessionToken()是生成一个Redis的缓存新息，可以看做一个前后端连接起来的标志，后面我们单独说，//TODO一下哈哈<br><img src="/images/Ahem/zhuce.jpg" alt="示例图"></p>
<h2 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h2><p>&nbsp;&nbsp;&nbsp;登录的controller层开发如下图所示，起中queryUserForLogin()方法是通过用户名和密码查询用户，记得密码是要加密的，查询到了之后要传给前端，记得把密码设置为””,usersVO其实就是Users，是用来向前端传数据的，所以也可以在usersVO里的password的对象上面加@Jsonignore也可以实现不向前端传密码<br><img src="/images/Ahem/denglu.jpg" alt="示例图"></p>
<h2 id="注销接口"><a href="#注销接口" class="headerlink" title="注销接口"></a>注销接口</h2><p>&nbsp;&nbsp;&nbsp;注销的开发就比较简单了，把redis里的session删掉就行了，其中的del()方法我们后边说<br><img src="/images/Ahem/zhuxiao.jpg" alt="示例图"></p>
<h2 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h2><p>&nbsp;&nbsp;&nbsp;这是前端的样式，非原创设计，看看就好，登录注册页面基本一样的，注意绑定的事件，都是我们需要实现的js方法<br><img src="/images/Ahem/qdenglu.jpg" alt="示例图"><br><img src="/images/Ahem/qzhuce.jpg" alt="示例图"></p>
<center>登录事件如下</center>
doRegist:function(e){
      var formObject = e.detail.value;
      var username = formObject.username;
      var password = formObject.password;

<pre><code>//简单验证
if(username.length == 0 || password.length == 0){
  wx.showToast({
    title: &apos;用户名或密码不能为空&apos;,
    icon: &apos;none&apos;,
    duration: 3000
  })
 }else {
  var serverUrl = app.serverUrl;
  wx.showLoading({
    title: &apos;请等待.....&apos;,
  });
  wx.request({
    url: serverUrl + &apos;/regist&apos;,
    method: &quot;POST&quot;,
    data: {
      username: username,
      password: password
    },
    header: {
      &apos;content-type&apos;: &apos;application/json&apos; // 默认值
    },
    success: function(res) {
      console.log(res.data);
      wx.hideLoading();
      var status = res.data.status;
      if(status == 200){
        wx.showToast({
          title: &quot;注册成功&quot;,
          icon: &apos;none&apos;,
          duration: 3000
        }),
          app.userInfo=res.data.data;
      }else if(status == 500){
        wx.showToast({
          title: res.data.msg,
          icon: &apos;none&apos;,
          duration: 3000
        })
      }
    }
  })
 }</code></pre><p>  },<br>  goLoginPage: function(){<br>    wx.navigateTo({<br>      url: ‘../userLogin/login’,<br>    })<br>  }<br>})</p>
<center>注册事件如下</center>

<p>  doRegist:function(e){<br>      var formObject = e.detail.value;<br>      var username = formObject.username;<br>      var password = formObject.password;</p>
<pre><code>//简单验证
if(username.length == 0 || password.length == 0){
  wx.showToast({
    title: &apos;用户名或密码不能为空&apos;,
    icon: &apos;none&apos;,
    duration: 3000
  })
 }else {
  var serverUrl = app.serverUrl;
  wx.showLoading({
    title: &apos;请等待.....&apos;,
  });
  wx.request({
    url: serverUrl + &apos;/regist&apos;,
    method: &quot;POST&quot;,
    data: {
      username: username,
      password: password
    },
    header: {
      &apos;content-type&apos;: &apos;application/json&apos; // 默认值
    },
    success: function(res) {
      console.log(res.data);
      wx.hideLoading();
      var status = res.data.status;
      if(status == 200){
        wx.showToast({
          title: &quot;注册成功&quot;,
          icon: &apos;none&apos;,
          duration: 3000
        }),
          app.userInfo=res.data.data;
      }else if(status == 500){
        wx.showToast({
          title: res.data.msg,
          icon: &apos;none&apos;,
          duration: 3000
        })
      }
    }
  })
 }</code></pre><p>  },<br>  goLoginPage: function(){<br>    wx.navigateTo({<br>      url: ‘../userLogin/login’,<br>    })<br>  }<br>})</p>
<h2 id="记一个小坑"><a href="#记一个小坑" class="headerlink" title="记一个小坑"></a>记一个小坑</h2><center>Mysql时区问题</center>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;在JDBC使用的时候有时候会出现time zone的错误，出现这个的原因是因为mysql返回的时间总是有问题，比实际时间要早8小时。

<p>解决办法： 在jdbc连接的url后面加上serverTimezone=GMT即可解决问题，如果需要使用gmt+8时区，需要写成GMT%2B8</p>
<h2 id="妈的一个弱智坑"><a href="#妈的一个弱智坑" class="headerlink" title="妈的一个弱智坑"></a>妈的一个弱智坑</h2><p>@MapperScan的包导入tk的，别org的，否则会报错，干</p>

    <div id="aplayer-FmaUvkOo" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="516358164" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>
]]></content>
  </entry>
</search>
